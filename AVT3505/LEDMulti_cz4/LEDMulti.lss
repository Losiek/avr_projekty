
LEDMulti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  000002ec  2**0
                  ALLOC
  2 .stab         00000378  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000006d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b1  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000294  00000000  00000000  000007a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000116  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025b  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000168  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006e  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_17>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  68:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  6c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000070 <g_DaneCom>:
  70:	df ef f7 fb                                         ....

00000074 <g_WzoryCyfr>:
  74:	82 d7 23 43 56 4a 0a c7 02 42 06 1a aa 13 2a 2e     ..#CVJ...B....*.

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf ef       	ldi	r28, 0xFF	; 255
  8a:	d4 e0       	ldi	r29, 0x04	; 4
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	11 e0       	ldi	r17, 0x01	; 1
  92:	a0 e0       	ldi	r26, 0x00	; 0
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	e8 e7       	ldi	r30, 0x78	; 120
  98:	f2 e0       	ldi	r31, 0x02	; 2
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <.do_copy_data_start>

0000009c <.do_copy_data_loop>:
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0

000000a0 <.do_copy_data_start>:
  a0:	a0 30       	cpi	r26, 0x00	; 0
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <.do_copy_data_loop>

000000a6 <__do_clear_bss>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a8 30       	cpi	r26, 0x08	; 8
  b2:	b1 07       	cpc	r27, r17
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  ba:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <WyswietlDEC>:
//Zmienna przechowuj¹ca wartoœæ licznika.
uint16_t g_Licznik = 0;

//Funkcja wyœwitla w kodzie dziesiêtnym podan¹ liczbê.
void WyswietlDEC(uint16_t var) {
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	9c 01       	movw	r18, r24
	uint8_t n;
	if(var > 9999)
  cc:	87 e2       	ldi	r24, 0x27	; 39
  ce:	20 31       	cpi	r18, 0x10	; 16
  d0:	38 07       	cpc	r19, r24
  d2:	50 f0       	brcs	.+20     	; 0xe8 <WyswietlDEC+0x26>
	{
		for(n=0; n<4; n++)
		{
			g_DaneWyswietlacza[n] = (uint8_t)~(1<<LED_G);
  d4:	8f e7       	ldi	r24, 0x7F	; 127
  d6:	80 93 04 01 	sts	0x0104, r24
  da:	80 93 05 01 	sts	0x0105, r24
  de:	80 93 06 01 	sts	0x0106, r24
  e2:	80 93 07 01 	sts	0x0107, r24
  e6:	1b c0       	rjmp	.+54     	; 0x11e <WyswietlDEC+0x5c>
  e8:	03 e0       	ldi	r16, 0x03	; 3
  ea:	10 e0       	ldi	r17, 0x00	; 0
  ec:	c7 e0       	ldi	r28, 0x07	; 7
  ee:	d1 e0       	ldi	r29, 0x01	; 1
		}
		return;
	}
	
	for(n=4; n>0; n--)
	{
		g_DaneWyswietlacza[n-1] = pgm_read_byte(&g_WzoryCyfr[var%10]);
  f0:	c9 01       	movw	r24, r18
  f2:	6a e0       	ldi	r22, 0x0A	; 10
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 27 01 	call	0x24e	; 0x24e <__udivmodhi4>
  fa:	fc 01       	movw	r30, r24
  fc:	ec 58       	subi	r30, 0x8C	; 140
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	e4 91       	lpm	r30, Z
 102:	e8 83       	st	Y, r30
 104:	21 97       	sbiw	r28, 0x01	; 1
		var /= 10;
 106:	c9 01       	movw	r24, r18
 108:	6a e0       	ldi	r22, 0x0A	; 10
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	0e 94 27 01 	call	0x24e	; 0x24e <__udivmodhi4>
 110:	9b 01       	movw	r18, r22
 112:	01 50       	subi	r16, 0x01	; 1
 114:	10 40       	sbci	r17, 0x00	; 0
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	0f 3f       	cpi	r16, 0xFF	; 255
 11a:	18 07       	cpc	r17, r24
 11c:	49 f7       	brne	.-46     	; 0xf0 <WyswietlDEC+0x2e>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret

00000128 <ObslozPrzycisk>:
	}	
}	

void ObslozPrzycisk(uint8_t maska, void(*proc)(void))
{
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	18 2f       	mov	r17, r24
 130:	eb 01       	movw	r28, r22
	if(!(SWPIN & maska))
 132:	85 b1       	in	r24, 0x05	; 5
 134:	81 23       	and	r24, r17
 136:	d9 f4       	brne	.+54     	; 0x16e <ObslozPrzycisk+0x46>
	{
		//usuwanie drgañ styków.
		g_bDelay = 6; //50ms
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 03 01 	sts	0x0103, r24
		while(g_bDelay !=0) {}
 13e:	80 91 03 01 	lds	r24, 0x0103
 142:	88 23       	and	r24, r24
 144:	e1 f7       	brne	.-8      	; 0x13e <ObslozPrzycisk+0x16>
		if(!(SWPIN & maska))
 146:	85 b1       	in	r24, 0x05	; 5
 148:	81 23       	and	r24, r17
 14a:	89 f4       	brne	.+34     	; 0x16e <ObslozPrzycisk+0x46>
		{
			proc();
 14c:	fe 01       	movw	r30, r28
 14e:	09 95       	icall
			g_bDelay = 120; //1s
 150:	88 e7       	ldi	r24, 0x78	; 120
 152:	80 93 03 01 	sts	0x0103, r24
			do
			{
				if(g_bDelay==0)
 156:	80 91 03 01 	lds	r24, 0x0103
 15a:	88 23       	and	r24, r24
 15c:	29 f4       	brne	.+10     	; 0x168 <ObslozPrzycisk+0x40>
				{
					g_bDelay = 6; //50ms
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	80 93 03 01 	sts	0x0103, r24
					proc();
 164:	fe 01       	movw	r30, r28
 166:	09 95       	icall
				}
			}while(!(SWPIN & maska));
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	81 23       	and	r24, r17
 16c:	a1 f3       	breq	.-24     	; 0x156 <ObslozPrzycisk+0x2e>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	08 95       	ret

00000176 <Plus>:
		}
	}
}

void Plus(void)
{
 176:	80 91 00 01 	lds	r24, 0x0100
 17a:	90 91 01 01 	lds	r25, 0x0101
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	90 93 01 01 	sts	0x0101, r25
 184:	80 93 00 01 	sts	0x0100, r24
	++g_Licznik;
	WyswietlDEC(g_Licznik);
 188:	0e 94 61 00 	call	0xc2	; 0xc2 <WyswietlDEC>
 18c:	08 95       	ret

0000018e <Minus>:
}

void Minus(void)
{
 18e:	80 91 00 01 	lds	r24, 0x0100
 192:	90 91 01 01 	lds	r25, 0x0101
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	90 93 01 01 	sts	0x0101, r25
 19c:	80 93 00 01 	sts	0x0100, r24
	--g_Licznik;
	WyswietlDEC(g_Licznik);
 1a0:	0e 94 61 00 	call	0xc2	; 0xc2 <WyswietlDEC>
 1a4:	08 95       	ret

000001a6 <main>:
}

int main(void)
{
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	80 93 61 00 	sts	0x0061, r24
	//Dzielenie zegara
	CLKPR = 1<<CLKPCE;
	CLKPR = 1<<CLKPS0;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 61 00 	sts	0x0061, r24
	/////////////////////////////
	// inicjacja
	LEDDDR = 0xff; 
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	87 bb       	out	0x17, r24	; 23
	COMDDR = 1<<COM1 | 1<<COM2 | 1<<COM3 | 1<<COM4;
 1b6:	8c e3       	ldi	r24, 0x3C	; 60
 1b8:	81 bb       	out	0x11, r24	; 17
	//w¹czenie podci¹gania wyjœæ
	SWPORT = 1<<SW1 | 1<<SW2;
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	87 b9       	out	0x07, r24	; 7
	//Timer0.
	TCCR0 = 1<<CS01 | 1<<CS00;
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1<<TOIE0;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	89 bf       	out	0x39, r24	; 57
	//Globalne zezwolenie przerwañ.
	sei();
 1c6:	78 94       	sei
	// koniec inicjacji.
	/////////////////////////////
	
	/*Wpisanie próbnych wartoœci.
	g_DaneWyswietlacza[0] = ~(1<<LED_B | 1<<LED_C | 1<<LED_A | 1<<LED_E | 1<<LED_F | 1<<LED_D);
	g_DaneWyswietlacza[2] = ~(1<<LED_D | 1<<LED_A | 1<<LED_G | 1<<LED_E | 1<<LED_F);
	g_DaneWyswietlacza[1] = ~(1<<LED_F | 1<<LED_E | 1<<LED_D);
	g_DaneWyswietlacza[3] = ~(1<<LED_B | 1<<LED_C | 1<<LED_G| 1<<LED_E | 1<<LED_F);
	*/
	
	for(;;)
	{
		ObslozPrzycisk(1<<SW1, Plus); 
 1c8:	6b eb       	ldi	r22, 0xBB	; 187
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 94 00 	call	0x128	; 0x128 <ObslozPrzycisk>
		ObslozPrzycisk(1<<SW2, Minus);
 1d2:	67 ec       	ldi	r22, 0xC7	; 199
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	0e 94 94 00 	call	0x128	; 0x128 <ObslozPrzycisk>
 1dc:	f5 cf       	rjmp	.-22     	; 0x1c8 <main+0x22>

000001de <__vector_17>:
	
	}

	return 0; 
}
//____________________________________________________________________________________________
//Obs³uga przerwañ
SIGNAL(SIG_OVERFLOW0)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
		static uint8_t AktWyswietlacz = 0;
		//Wpisanie do licznika pocz¹tkowej wartoœci.
		TCNT0 = 128;
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	82 bf       	out	0x32, r24	; 50
		//Wygaszenie wyœwietlaczy.
		COMPORT |= 1<<COM1 | 1<<COM2 | 1<<COM3 | 1<<COM4;
 1f8:	82 b3       	in	r24, 0x12	; 18
 1fa:	8c 63       	ori	r24, 0x3C	; 60
 1fc:	82 bb       	out	0x12, r24	; 18
		//Wys³anie odpowiedniej danej.
		LEDPORT = g_DaneWyswietlacza[AktWyswietlacz];
 1fe:	90 91 02 01 	lds	r25, 0x0102
 202:	e9 2f       	mov	r30, r25
 204:	ff 27       	eor	r31, r31
 206:	df 01       	movw	r26, r30
 208:	ac 5f       	subi	r26, 0xFC	; 252
 20a:	be 4f       	sbci	r27, 0xFE	; 254
 20c:	8c 91       	ld	r24, X
 20e:	88 bb       	out	0x18, r24	; 24
		//W³¹czenie odpowiedniego wyœwietlacza.
		//Odwo³anie do pamiêci programu.
		COMPORT &= pgm_read_byte(&g_DaneCom[AktWyswietlacz]);
 210:	82 b3       	in	r24, 0x12	; 18
 212:	e0 59       	subi	r30, 0x90	; 144
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	e4 91       	lpm	r30, Z
 218:	8e 23       	and	r24, r30
 21a:	82 bb       	out	0x12, r24	; 18
		
		//Zwiêkszanie stanu zmiennej wskazuj¹cej wyœwietlacz
		++AktWyswietlacz;
 21c:	9f 5f       	subi	r25, 0xFF	; 255
 21e:	90 93 02 01 	sts	0x0102, r25
		if (AktWyswietlacz > 3) {
 222:	94 30       	cpi	r25, 0x04	; 4
 224:	48 f0       	brcs	.+18     	; 0x238 <__vector_17+0x5a>
			//Zmienna zapobiegaj¹ca niepotrzebnemu kopiowaniu
			//zmiennej g_bDelay (typ volatile!)
			uint8_t delay;
			AktWyswietlacz = 0;
 226:	10 92 02 01 	sts	0x0102, r1
			//Obs³uga opóŸnieñ
			delay = g_bDelay;
 22a:	80 91 03 01 	lds	r24, 0x0103
			if(delay > 0)
 22e:	88 23       	and	r24, r24
 230:	19 f0       	breq	.+6      	; 0x238 <__vector_17+0x5a>
			{
				--delay;
 232:	81 50       	subi	r24, 0x01	; 1
				g_bDelay = delay;
 234:	80 93 03 01 	sts	0x0103, r24
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__udivmodhi4>:
 24e:	aa 1b       	sub	r26, r26
 250:	bb 1b       	sub	r27, r27
 252:	51 e1       	ldi	r21, 0x11	; 17
 254:	07 c0       	rjmp	.+14     	; 0x264 <__udivmodhi4_ep>

00000256 <__udivmodhi4_loop>:
 256:	aa 1f       	adc	r26, r26
 258:	bb 1f       	adc	r27, r27
 25a:	a6 17       	cp	r26, r22
 25c:	b7 07       	cpc	r27, r23
 25e:	10 f0       	brcs	.+4      	; 0x264 <__udivmodhi4_ep>
 260:	a6 1b       	sub	r26, r22
 262:	b7 0b       	sbc	r27, r23

00000264 <__udivmodhi4_ep>:
 264:	88 1f       	adc	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	5a 95       	dec	r21
 26a:	a9 f7       	brne	.-22     	; 0x256 <__udivmodhi4_loop>
 26c:	80 95       	com	r24
 26e:	90 95       	com	r25
 270:	bc 01       	movw	r22, r24
 272:	cd 01       	movw	r24, r26
 274:	08 95       	ret

00000276 <_exit>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <_exit>
