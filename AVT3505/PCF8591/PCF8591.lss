
PCF8591.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011c  00000000  00000000  000008a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a6  00000000  00000000  000009c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b5  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070b  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001da  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000149  00000000  00000000  00001f42  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000070 <__c.1574>:
  70:	20 20 00                                              .

00000073 <__c.1572>:
  73:	44 61 6e 65 20 7a 20 49 30 3a 00                    Dane z I0:.

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d4 e0       	ldi	r29, 0x04	; 4
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	e6 ee       	ldi	r30, 0xE6	; 230
  92:	f3 e0       	ldi	r31, 0x03	; 3
  94:	02 c0       	rjmp	.+4      	; 0x9a <.do_copy_data_start>

00000096 <.do_copy_data_loop>:
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0

0000009a <.do_copy_data_start>:
  9a:	a0 30       	cpi	r26, 0x00	; 0
  9c:	b1 07       	cpc	r27, r17
  9e:	d9 f7       	brne	.-10     	; 0x96 <.do_copy_data_loop>

000000a0 <__do_clear_bss>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 30       	cpi	r26, 0x00	; 0
  ac:	b1 07       	cpc	r27, r17
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  b4:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <main>:
#include "i2c.h"
#include "lcd.h"

int main(void)
{
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	80 93 61 00 	sts	0x0061, r24
	//Dzielenie zegara przez 2
	CLKPR = 1<<CLKPCE;
	CLKPR = 1<<CLKPS0;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 61 00 	sts	0x0061, r24
	//Inicjacja
	PORTB = 1<<I2C_SDA | 1<<I2C_SCL;
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	88 bb       	out	0x18, r24	; 24
	PORTD = ~(1<<LCD_E | 1<<LCD_RW);
  cc:	87 ee       	ldi	r24, 0xE7	; 231
  ce:	82 bb       	out	0x12, r24	; 18
	DDRD = 1<<LCD_E | 1<<LCD_RS | 1<<LCD_RW;
  d0:	8c e1       	ldi	r24, 0x1C	; 28
  d2:	81 bb       	out	0x11, r24	; 17
	DDRB = 0x0F<<LCD_D4 | 1<<I2C_SCL;
  d4:	82 ef       	ldi	r24, 0xF2	; 242
  d6:	87 bb       	out	0x17, r24	; 23
	lcd_init();
  d8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_init>
	//Koniec inicjacji
	
	//Tekst informacyjny w górnej linii
	lcd_str_P((prog_char*)PSTR("Dane z I0:"));
  dc:	83 e7       	ldi	r24, 0x73	; 115
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_str_P>
	lcd_command(LCDC_DDA | 64);
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	0e 94 32 01 	call	0x264	; 0x264 <lcd_command>
	
	//Konfiguracja przetwornika
	i2c_start();
  ea:	0e 94 92 00 	call	0x124	; 0x124 <i2c_start>
	//Bajt adresowy, zapis
	i2c_send(0x90);
  ee:	80 e9       	ldi	r24, 0x90	; 144
  f0:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_send>
	//bajt kontrolny
	i2c_send(0x00);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_send>
	i2c_stop();
  fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
	
	//Pobieranie danych
	for(;;)
	{
		lcd_command(LCDC_DDA | 64);
  fe:	80 ec       	ldi	r24, 0xC0	; 192
 100:	0e 94 32 01 	call	0x264	; 0x264 <lcd_command>
		//Odczyt danych
		i2c_start();
 104:	0e 94 92 00 	call	0x124	; 0x124 <i2c_start>
		//Bajt adresowy, odczyt
		i2c_send(0x91);
 108:	81 e9       	ldi	r24, 0x91	; 145
 10a:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_send>
		//Pobieranie i wyœwietlenie danej
		lcd_dec(i2c_get(I2C_NACK));
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_get>
 114:	99 27       	eor	r25, r25
 116:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_dec>
		//Przys³oniêcie reszty napisu
		lcd_str_P((prog_char*)PSTR("  "));
 11a:	80 e7       	ldi	r24, 0x70	; 112
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_str_P>
 122:	eb cf       	rjmp	.-42     	; 0xfa <main+0x3e>

00000124 <i2c_start>:
	PORT(I2C_SCLPORT) &= ~(1<<I2C_SCL);
}

void i2c_start(void)
{
 124:	b8 98       	cbi	0x17, 0	; 23
 126:	c0 9a       	sbi	0x18, 0	; 24
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b0 e0       	ldi	r27, 0x00	; 0

00000130 <delayus8_loop17>:
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <delayus8_loop17>
 134:	c1 9a       	sbi	0x18, 1	; 24
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b0 e0       	ldi	r27, 0x00	; 0

0000013e <delayus8_loop34>:
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <delayus8_loop34>
 142:	c0 98       	cbi	0x18, 0	; 24
 144:	b8 9a       	sbi	0x17, 0	; 23
 146:	85 e0       	ldi	r24, 0x05	; 5
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	a0 e0       	ldi	r26, 0x00	; 0
 14c:	b0 e0       	ldi	r27, 0x00	; 0

0000014e <delayus8_loop53>:
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <delayus8_loop53>
 152:	c1 98       	cbi	0x18, 1	; 24
 154:	08 95       	ret

00000156 <i2c_send>:
	//Jeœli start bez stop
	i2c_sdaset();
	i2c_hdelay();
	i2c_sclset();
	i2c_hdelay();
	//Normalna sekwencja startu
	i2c_sdaclear();
	i2c_hdelay();
	i2c_sclclear();
}

void i2c_stop(void)
{
	i2c_sdaclear();
	i2c_hdelay();
	i2c_sclset();
	i2c_hdelay();
	i2c_sdaset();
	i2c_hdelay();
}

uint8_t i2c_send(uint8_t data)
{
 156:	98 e0       	ldi	r25, 0x08	; 8
 158:	25 e0       	ldi	r18, 0x05	; 5
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t n;
	
	for(n=8; n>0; --n)
	{
		if(data & 0x80)
 160:	87 ff       	sbrs	r24, 7
 162:	03 c0       	rjmp	.+6      	; 0x16a <i2c_send+0x14>
 164:	b8 98       	cbi	0x17, 0	; 23
 166:	c0 9a       	sbi	0x18, 0	; 24
 168:	02 c0       	rjmp	.+4      	; 0x16e <delayus8_loop105>
 16a:	c0 98       	cbi	0x18, 0	; 24
 16c:	b8 9a       	sbi	0x17, 0	; 23

0000016e <delayus8_loop105>:
 16e:	2a 95       	dec	r18
 170:	f1 f7       	brne	.-4      	; 0x16e <delayus8_loop105>
 172:	c1 9a       	sbi	0x18, 1	; 24

00000174 <delayus8_loop121>:
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <delayus8_loop121>
 178:	c1 98       	cbi	0x18, 1	; 24
 17a:	91 50       	subi	r25, 0x01	; 1
 17c:	11 f0       	breq	.+4      	; 0x182 <delayus8_loop121+0xe>
			i2c_sdaset();
		else
			i2c_sdaclear();
		data <<= 1;
 17e:	88 0f       	add	r24, r24
 180:	ef cf       	rjmp	.-34     	; 0x160 <i2c_send+0xa>
 182:	b8 98       	cbi	0x17, 0	; 23
 184:	c0 9a       	sbi	0x18, 0	; 24
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	a0 e0       	ldi	r26, 0x00	; 0
 18c:	b0 e0       	ldi	r27, 0x00	; 0

0000018e <delayus8_loop159>:
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <delayus8_loop159>
 192:	c1 9a       	sbi	0x18, 1	; 24
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b0 e0       	ldi	r27, 0x00	; 0

0000019c <delayus8_loop176>:
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <delayus8_loop176>
 1a0:	86 b3       	in	r24, 0x16	; 22
 1a2:	c1 98       	cbi	0x18, 1	; 24
 1a4:	81 70       	andi	r24, 0x01	; 1
		i2c_hdelay();
		i2c_sclset();
		i2c_hdelay();
		i2c_sclclear();
	}
	//ACK potwierdzenie transmisji
	i2c_sdaset();
	i2c_hdelay();
	i2c_sclset();
	i2c_hdelay();
	n = i2c_sdaget();
	i2c_sclclear();
	
	return n;
}
 1a6:	99 27       	eor	r25, r25
 1a8:	08 95       	ret

000001aa <i2c_stop>:
 1aa:	c0 98       	cbi	0x18, 0	; 24
 1ac:	b8 9a       	sbi	0x17, 0	; 23
 1ae:	85 e0       	ldi	r24, 0x05	; 5
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	a0 e0       	ldi	r26, 0x00	; 0
 1b4:	b0 e0       	ldi	r27, 0x00	; 0

000001b6 <delayus8_loop214>:
 1b6:	8a 95       	dec	r24
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <delayus8_loop214>
 1ba:	c1 9a       	sbi	0x18, 1	; 24
 1bc:	85 e0       	ldi	r24, 0x05	; 5
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	a0 e0       	ldi	r26, 0x00	; 0
 1c2:	b0 e0       	ldi	r27, 0x00	; 0

000001c4 <delayus8_loop231>:
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <delayus8_loop231>
 1c8:	b8 98       	cbi	0x17, 0	; 23
 1ca:	c0 9a       	sbi	0x18, 0	; 24
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	a0 e0       	ldi	r26, 0x00	; 0
 1d2:	b0 e0       	ldi	r27, 0x00	; 0

000001d4 <delayus8_loop250>:
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <delayus8_loop250>
 1d8:	08 95       	ret

000001da <i2c_get>:

uint8_t i2c_get(uint8_t ack)
{
 1da:	b8 98       	cbi	0x17, 0	; 23
 1dc:	c0 9a       	sbi	0x18, 0	; 24
 1de:	98 e0       	ldi	r25, 0x08	; 8
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	25 e0       	ldi	r18, 0x05	; 5
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0

000001ea <delayus8_loop281>:
 1ea:	2a 95       	dec	r18
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <delayus8_loop281>
 1ee:	c1 9a       	sbi	0x18, 1	; 24

000001f0 <delayus8_loop297>:
 1f0:	2a 95       	dec	r18
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <delayus8_loop297>
	uint8_t n, temp=0;
	
	i2c_sdaset();
	for(n=8; n>0; --n)
	{
		i2c_hdelay();
		i2c_sclset();
		i2c_hdelay();
		temp<<=1;
 1f4:	66 0f       	add	r22, r22
		if(i2c_sdaget())
 1f6:	b0 99       	sbic	0x16, 0	; 22
			temp++;
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	c1 98       	cbi	0x18, 1	; 24
 1fc:	91 50       	subi	r25, 0x01	; 1
 1fe:	a9 f7       	brne	.-22     	; 0x1ea <delayus8_loop281>
		i2c_sclclear();
	}
	//ACK
	if(ack == I2C_ACK)
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	19 f4       	brne	.+6      	; 0x20a <delayus8_loop297+0x1a>
 204:	c0 98       	cbi	0x18, 0	; 24
 206:	b8 9a       	sbi	0x17, 0	; 23
 208:	02 c0       	rjmp	.+4      	; 0x20e <delayus8_loop297+0x1e>
 20a:	b8 98       	cbi	0x17, 0	; 23
 20c:	c0 9a       	sbi	0x18, 0	; 24
 20e:	85 e0       	ldi	r24, 0x05	; 5
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b0 e0       	ldi	r27, 0x00	; 0

00000216 <delayus8_loop357>:
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <delayus8_loop357>
 21a:	c1 9a       	sbi	0x18, 1	; 24
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b0 e0       	ldi	r27, 0x00	; 0

00000224 <delayus8_loop374>:
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <delayus8_loop374>
 228:	c1 98       	cbi	0x18, 1	; 24
		i2c_sdaclear();
	else
		i2c_sdaset();
	i2c_hdelay();
	i2c_sclset();
	i2c_hdelay();
	i2c_sclclear();
	
	return temp;
}
 22a:	86 2f       	mov	r24, r22
 22c:	99 27       	eor	r25, r25
 22e:	08 95       	ret

00000230 <lcd_sendHalf>:
	delay250ns(); \
	PORT(LCD_EPORT) &= ~(1<<LCD_E);}

void lcd_sendHalf(uint8_t data)
{
 230:	98 b3       	in	r25, 0x18	; 24
 232:	9f 70       	andi	r25, 0x0F	; 15
 234:	82 95       	swap	r24
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	98 2b       	or	r25, r24
 23a:	98 bb       	out	0x18, r25	; 24
	data = (data & 0x0F) << LCD_D4; 
	//data |= 0xF0;
	//data &= 0x0F;
	//data <<= LCD_D4; 
	PORT(LCD_DPORT) = 
		(PORT(LCD_DPORT) & ~(0x0F<<LCD_D4)) | data;
	//PORT(LCD_DPORT) &= ~(0x0F<<LCD_D4); 
	//PORT(LCD_DPORT) |= data; 
	LCD_EPULSE();
 23c:	94 9a       	sbi	0x12, 4	; 18
 23e:	00 00       	nop
 240:	94 98       	cbi	0x12, 4	; 18
 242:	08 95       	ret

00000244 <lcd_send>:
}

void lcd_send(uint8_t data)
{
 244:	1f 93       	push	r17
 246:	18 2f       	mov	r17, r24
	// Starsza czêœæ
	lcd_sendHalf(data>>4);
 248:	82 95       	swap	r24
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	0e 94 18 01 	call	0x230	; 0x230 <lcd_sendHalf>
	// M³odsza czêœæ
	lcd_sendHalf(data);
 250:	81 2f       	mov	r24, r17
 252:	0e 94 18 01 	call	0x230	; 0x230 <lcd_sendHalf>
	delayus8(120);
 256:	88 e7       	ldi	r24, 0x78	; 120
 258:	90 e0       	ldi	r25, 0x00	; 0

0000025a <delayus8_loop30>:
 25a:	00 00       	nop
 25c:	8a 95       	dec	r24
 25e:	e9 f7       	brne	.-6      	; 0x25a <delayus8_loop30>
 260:	1f 91       	pop	r17
 262:	08 95       	ret

00000264 <lcd_command>:
}

// Funkcje interfejsu
void lcd_command(uint8_t command)
{
 264:	92 98       	cbi	0x12, 2	; 18
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
	lcd_send(command);
 266:	0e 94 22 01 	call	0x244	; 0x244 <lcd_send>
 26a:	08 95       	ret

0000026c <lcd_data>:
}

void lcd_data(uint8_t data)
{
 26c:	92 9a       	sbi	0x12, 2	; 18
	PORT(LCD_RSPORT) |= 1<<LCD_RS;
	lcd_send(data);
 26e:	0e 94 22 01 	call	0x244	; 0x244 <lcd_send>
 272:	08 95       	ret

00000274 <lcd_str_P>:
}

void lcd_cls(void)
{
	lcd_command(LCDC_CLS);
	delay100us8(48);
}

void lcd_home(void)
{
	lcd_command(LCDC_HOME);
	delay100us8(48);
}

void lcd_init(void)
{
	delay100us8(150);
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
	lcd_sendHalf(LCDC_FUNC|LCDC_FUNC8b); 
	delay100us8(41);
	lcd_sendHalf(LCDC_FUNC|LCDC_FUNC8b);
	delay100us8(2);
	lcd_sendHalf(LCDC_FUNC|LCDC_FUNC4b);
	delay100us8(2);
	// Teraz jest ju¿ 4b. Koniec korzystania z sendHalf
	lcd_command(LCDC_FUNC|LCDC_FUNC4b|LCDC_FUNC2L|LCDC_FUNC5x7);
	lcd_command(LCDC_ON);
	lcd_cls();
	lcd_command(LCDC_MODE|LCDC_MODER);
	lcd_command(LCDC_ON|LCDC_ONDISPLAY|LCDC_ONCURSOR);
}

// Koniec obs³ugi wyœwietlacza
//--------------------------------------------------

//Funkcje pisz¹ce
void lcd_str_P(prog_char* str)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	ec 01       	movw	r28, r24
 27a:	02 c0       	rjmp	.+4      	; 0x280 <lcd_str_P+0xc>
	char znak;
	while(0 != (znak=pgm_read_byte(str++)))
		lcd_data(znak);
 27c:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_data>
 280:	fe 01       	movw	r30, r28
 282:	21 96       	adiw	r28, 0x01	; 1
 284:	84 91       	lpm	r24, Z
 286:	88 23       	and	r24, r24
 288:	c9 f7       	brne	.-14     	; 0x27c <lcd_str_P+0x8>
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <lcd_str>:
}

void lcd_str(char* str)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <lcd_str+0xc>
	char znak;
	while(0 != (znak = *(str++)))
		lcd_data(znak);
 298:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_data>
 29c:	89 91       	ld	r24, Y+
 29e:	88 23       	and	r24, r24
 2a0:	d9 f7       	brne	.-10     	; 0x298 <lcd_str+0x8>
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <lcd_dec>:
}

//Wypisuje liczbê na wyœwietlaczu
void lcd_dec(int val)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	27 97       	sbiw	r28, 0x07	; 7
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
	char bufor[7];
	lcd_str(itoa(val, bufor, 10));
 2bc:	4a e0       	ldi	r20, 0x0A	; 10
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	0e 94 ad 01 	call	0x35a	; 0x35a <itoa>
 2ca:	0e 94 48 01 	call	0x290	; 0x290 <lcd_str>
 2ce:	27 96       	adiw	r28, 0x07	; 7
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <lcd_home>:
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 32 01 	call	0x264	; 0x264 <lcd_command>
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	0e 94 a3 01 	call	0x346	; 0x346 <delay100us8>
 2ec:	08 95       	ret

000002ee <lcd_cls>:
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 32 01 	call	0x264	; 0x264 <lcd_command>
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	0e 94 a3 01 	call	0x346	; 0x346 <delay100us8>
 2fa:	08 95       	ret

000002fc <lcd_init>:
 2fc:	86 e9       	ldi	r24, 0x96	; 150
 2fe:	0e 94 a3 01 	call	0x346	; 0x346 <delay100us8>
 302:	92 98       	cbi	0x12, 2	; 18
 304:	80 e3       	ldi	r24, 0x30	; 48
 306:	0e 94 18 01 	call	0x230	; 0x230 <lcd_sendHalf>
 30a:	89 e2       	ldi	r24, 0x29	; 41
 30c:	0e 94 a3 01 	call	0x346	; 0x346 <delay100us8>
 310:	80 e3       	ldi	r24, 0x30	; 48
 312:	0e 94 18 01 	call	0x230	; 0x230 <lcd_sendHalf>
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 a3 01 	call	0x346	; 0x346 <delay100us8>
 31c:	80 e2       	ldi	r24, 0x20	; 32
 31e:	0e 94 18 01 	call	0x230	; 0x230 <lcd_sendHalf>
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 a3 01 	call	0x346	; 0x346 <delay100us8>
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	0e 94 32 01 	call	0x264	; 0x264 <lcd_command>
 32e:	88 e0       	ldi	r24, 0x08	; 8
 330:	0e 94 32 01 	call	0x264	; 0x264 <lcd_command>
 334:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_cls>
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	0e 94 32 01 	call	0x264	; 0x264 <lcd_command>
 33e:	8e e0       	ldi	r24, 0x0E	; 14
 340:	0e 94 32 01 	call	0x264	; 0x264 <lcd_command>
 344:	08 95       	ret

00000346 <delay100us8>:
#include <avr/io.h>
#include "delay.h"

void delay100us8(uint8_t t)
{
 346:	24 e6       	ldi	r18, 0x64	; 100
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	04 c0       	rjmp	.+8      	; 0x354 <delayus8_loop12+0x8>

0000034c <delayus8_loop12>:
	while (t>0)
	{
		delayus8(100);
 34c:	00 00       	nop
 34e:	2a 95       	dec	r18
 350:	e9 f7       	brne	.-6      	; 0x34c <delayus8_loop12>
		--t;
 352:	81 50       	subi	r24, 0x01	; 1
 354:	88 23       	and	r24, r24
 356:	d1 f7       	brne	.-12     	; 0x34c <delayus8_loop12>
 358:	08 95       	ret

0000035a <itoa>:
 35a:	fb 01       	movw	r30, r22
 35c:	9f 01       	movw	r18, r30
 35e:	e8 94       	clt
 360:	42 30       	cpi	r20, 0x02	; 2
 362:	c4 f0       	brlt	.+48     	; 0x394 <itoa+0x3a>
 364:	45 32       	cpi	r20, 0x25	; 37
 366:	b4 f4       	brge	.+44     	; 0x394 <itoa+0x3a>
 368:	4a 30       	cpi	r20, 0x0A	; 10
 36a:	29 f4       	brne	.+10     	; 0x376 <itoa+0x1c>
 36c:	97 fb       	bst	r25, 7
 36e:	1e f4       	brtc	.+6      	; 0x376 <itoa+0x1c>
 370:	90 95       	com	r25
 372:	81 95       	neg	r24
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	64 2f       	mov	r22, r20
 378:	77 27       	eor	r23, r23
 37a:	0e 94 de 01 	call	0x3bc	; 0x3bc <__udivmodhi4>
 37e:	80 5d       	subi	r24, 0xD0	; 208
 380:	8a 33       	cpi	r24, 0x3A	; 58
 382:	0c f0       	brlt	.+2      	; 0x386 <itoa+0x2c>
 384:	89 5d       	subi	r24, 0xD9	; 217
 386:	81 93       	st	Z+, r24
 388:	cb 01       	movw	r24, r22
 38a:	00 97       	sbiw	r24, 0x00	; 0
 38c:	a1 f7       	brne	.-24     	; 0x376 <itoa+0x1c>
 38e:	16 f4       	brtc	.+4      	; 0x394 <itoa+0x3a>
 390:	5d e2       	ldi	r21, 0x2D	; 45
 392:	51 93       	st	Z+, r21
 394:	10 82       	st	Z, r1
 396:	c9 01       	movw	r24, r18
 398:	0c 94 ce 01 	jmp	0x39c	; 0x39c <strrev>

0000039c <strrev>:
 39c:	dc 01       	movw	r26, r24
 39e:	fc 01       	movw	r30, r24
 3a0:	67 2f       	mov	r22, r23
 3a2:	71 91       	ld	r23, Z+
 3a4:	77 23       	and	r23, r23
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <strrev+0x4>
 3a8:	32 97       	sbiw	r30, 0x02	; 2
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <strrev+0x18>
 3ac:	7c 91       	ld	r23, X
 3ae:	6d 93       	st	X+, r22
 3b0:	70 83       	st	Z, r23
 3b2:	62 91       	ld	r22, -Z
 3b4:	ae 17       	cp	r26, r30
 3b6:	bf 07       	cpc	r27, r31
 3b8:	c8 f3       	brcs	.-14     	; 0x3ac <strrev+0x10>
 3ba:	08 95       	ret

000003bc <__udivmodhi4>:
 3bc:	aa 1b       	sub	r26, r26
 3be:	bb 1b       	sub	r27, r27
 3c0:	51 e1       	ldi	r21, 0x11	; 17
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <__udivmodhi4_ep>

000003c4 <__udivmodhi4_loop>:
 3c4:	aa 1f       	adc	r26, r26
 3c6:	bb 1f       	adc	r27, r27
 3c8:	a6 17       	cp	r26, r22
 3ca:	b7 07       	cpc	r27, r23
 3cc:	10 f0       	brcs	.+4      	; 0x3d2 <__udivmodhi4_ep>
 3ce:	a6 1b       	sub	r26, r22
 3d0:	b7 0b       	sbc	r27, r23

000003d2 <__udivmodhi4_ep>:
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	5a 95       	dec	r21
 3d8:	a9 f7       	brne	.-22     	; 0x3c4 <__udivmodhi4_loop>
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	bc 01       	movw	r22, r24
 3e0:	cd 01       	movw	r24, r26
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <_exit>
