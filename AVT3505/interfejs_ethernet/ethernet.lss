
ethernet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000027d6  0000286a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018c  00800166  00800166  000028d0  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006d8  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000130e  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075b  00000000  00000000  000043b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001bfb  00000000  00000000  00004b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  0000670c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000448  00000000  00000000  0000696c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071c  00000000  00000000  00006db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000074d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__ctors_end>
       4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      14:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      64:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      68:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      6c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>

00000070 <content>:
      70:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      80:	0a 20 43 6f 6e 74 65 6e 74 2d 74 79 70 65 3a 20     . Content-type: 
      90:	74 65 78 74 2f 68 74 6d 6c 0d 09 0a 00              text/html....

0000009d <index1>:
      9d:	3c 48 54 4d 4c 3e 0d 0a 3c 48 45 41 44 3e 0d 0a     <HTML>..<HEAD>..
      ad:	3c 54 49 54 4c 45 3e 4d 69 6b 72 6f 73 65 72 77     <TITLE>Mikroserw
      bd:	65 72 20 4c 41 4e 3c 2f 54 49 54 4c 45 3e 0d 0a     er LAN</TITLE>..
      cd:	3c 6d 65 74 61 20 68 74 74 70 2d 65 71 75 69 76     <meta http-equiv
      dd:	3d 22 63 6f 6e 74 65 6e 74 2d 74 79 70 65 22 20     ="content-type" 
      ed:	63 6f 6e 74 65 6e 74 3d 22 54 65 78 74 2f 48 74     content="Text/Ht
      fd:	6d 6c 3b 20 63 68 61 72 73 65 74 3d 77 69 6e 64     ml; charset=wind
     10d:	6f 77 73 2d 31 32 35 30 22 3e 0d 0a 3c 2f 48 45     ows-1250">..</HE
     11d:	41 44 3e 0d 0a 3c 42 4f 44 59 3e 0d 0a 3c 2f 42     AD>..<BODY>..</B
     12d:	4f 44 59 3e 0d 0a 3c 2f 48 54 4d 4c 3e 00 00        ODY>..</HTML>..

0000013c <__ctors_end>:
     13c:	11 24       	eor	r1, r1
     13e:	1f be       	out	0x3f, r1	; 63
     140:	cf ef       	ldi	r28, 0xFF	; 255
     142:	d4 e0       	ldi	r29, 0x04	; 4
     144:	de bf       	out	0x3e, r29	; 62
     146:	cd bf       	out	0x3d, r28	; 61

00000148 <__do_copy_data>:
     148:	11 e0       	ldi	r17, 0x01	; 1
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	e6 ed       	ldi	r30, 0xD6	; 214
     150:	f7 e2       	ldi	r31, 0x27	; 39
     152:	02 c0       	rjmp	.+4      	; 0x158 <.do_copy_data_start>

00000154 <.do_copy_data_loop>:
     154:	05 90       	lpm	r0, Z+
     156:	0d 92       	st	X+, r0

00000158 <.do_copy_data_start>:
     158:	a6 36       	cpi	r26, 0x66	; 102
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <.do_copy_data_loop>

0000015e <__do_clear_bss>:
     15e:	12 e0       	ldi	r17, 0x02	; 2
     160:	a6 e6       	ldi	r26, 0x66	; 102
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a2 3f       	cpi	r26, 0xF2	; 242
     16a:	b1 07       	cpc	r27, r17
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
     172:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <_exit>

00000176 <__bad_interrupt>:
     176:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017a <main>:

//Status TCP
uint8_t Tcp_Status;

int main(void) 
{
     17a:	af 92       	push	r10
     17c:	bf 92       	push	r11
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
	
	/////////////////////////////////////////////////////////
	//Inicjacja portu szeregowego
	RS_SET_BAUD(DEF_BAUD);
     18e:	e0 e4       	ldi	r30, 0x40	; 64
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	10 82       	st	Z, r1
     194:	8f ec       	ldi	r24, 0xCF	; 207
     196:	89 b9       	out	0x09, r24	; 9
	UCSR0C = 1<<URSEL0 | 1<<UCSZ01 | 1<<UCSZ00;
     198:	86 e8       	ldi	r24, 0x86	; 134
     19a:	80 83       	st	Z, r24
	UCSR0B = 1<<RXEN0 | 1<<TXEN0;
     19c:	88 e1       	ldi	r24, 0x18	; 24
     19e:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;
     1a0:	1b b8       	out	0x0b, r1	; 11
	DDRE = 1<<PORTE1;
     1a2:	ff 24       	eor	r15, r15
     1a4:	68 94       	set
     1a6:	f1 f8       	bld	r15, 1
     1a8:	f6 b8       	out	0x06, r15	; 6
	PORTE = 1<<PORTE1;
     1aa:	07 e2       	ldi	r16, 0x27	; 39
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	d8 01       	movw	r26, r16
     1b0:	fc 92       	st	X, r15
	//Koniec inicjacji
	////////////////////////////////////////////////////////

	//inicjacja funkcji domyœlnych strumieni
	fdevopen(rs_put, rs_get);
     1b2:	89 e4       	ldi	r24, 0x49	; 73
     1b4:	95 e0       	ldi	r25, 0x05	; 5
     1b6:	63 e5       	ldi	r22, 0x53	; 83
     1b8:	75 e0       	ldi	r23, 0x05	; 5
     1ba:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <fdevopen>
	
	//inicjacja portów

	//wiadomoœæ powitalna
	printf("Witaj RTL8019as\n");
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <puts>
	printf("\r");								//zajmuje mniej pamiêci, serio
     1c6:	8d e0       	ldi	r24, 0x0D	; 13
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <putchar>
	
	RTLinit();
     1ce:	0e 94 88 02 	call	0x510	; 0x510 <RTLinit>
	
	RTLwrite(0x00, 0x00);	
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTL_DDR = 0xff;
     1da:	8f ef       	ldi	r24, 0xFF	; 255
     1dc:	8a bb       	out	0x1a, r24	; 26
	PORTE = 1<<PORTE1;
     1de:	f8 01       	movw	r30, r16
     1e0:	f0 82       	st	Z, r15
	RTL_PORT = 0x07;
     1e2:	eb e3       	ldi	r30, 0x3B	; 59
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	87 e0       	ldi	r24, 0x07	; 7
     1e8:	80 83       	st	Z, r24
	PORTE = ~(1<<PORTE1);
     1ea:	8d ef       	ldi	r24, 0xFD	; 253
     1ec:	d8 01       	movw	r26, r16
     1ee:	8c 93       	st	X, r24
	RTL_PORT = 0x33;
     1f0:	83 e3       	ldi	r24, 0x33	; 51
     1f2:	80 83       	st	Z, r24
	
	RTL_CLEAR_WRITE;
     1f4:	e2 e3       	ldi	r30, 0x32	; 50
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	8f 7b       	andi	r24, 0xBF	; 191
     1fc:	80 83       	st	Z, r24
	RTL_SET_WRITE;
     1fe:	80 81       	ld	r24, Z
     200:	80 64       	ori	r24, 0x40	; 64
     202:	80 83       	st	Z, r24
	
	seq_number=0x1000;
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e1       	ldi	r25, 0x10	; 16
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	80 93 69 01 	sts	0x0169, r24
     210:	90 93 6a 01 	sts	0x016A, r25
     214:	a0 93 6b 01 	sts	0x016B, r26
     218:	b0 93 6c 01 	sts	0x016C, r27
	//Odczytywanie rejestrów RTL8019as
				printf("\nRealtek 8019AS Register dump\n");
     21c:	80 e1       	ldi	r24, 0x10	; 16
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <puts>
				printf("\r");
     224:	8d e0       	ldi	r24, 0x0D	; 13
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <putchar>
				printf("\nREG Page0 Page1 Page2 Page3\n\n");
     22c:	8e e2       	ldi	r24, 0x2E	; 46
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <puts>
				printf("\r");
     234:	8d e0       	ldi	r24, 0x0D	; 13
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <putchar>
     23c:	c0 e0       	ldi	r28, 0x00	; 0
     23e:	d0 e0       	ldi	r29, 0x00	; 0
					
				for(uint8_t reg = 0; reg<16; reg++) {
					
					uint8_t a = 0;
					printf("%X    ", reg);
     240:	0f 2e       	mov	r0, r31
     242:	fc e4       	ldi	r31, 0x4C	; 76
     244:	ef 2e       	mov	r14, r31
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	ff 2e       	mov	r15, r31
     24a:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24c:	0f 2e       	mov	r0, r31
     24e:	f0 e4       	ldi	r31, 0x40	; 64
     250:	cf 2e       	mov	r12, r31
     252:	ff e1       	ldi	r31, 0x1F	; 31
     254:	df 2e       	mov	r13, r31
     256:	f0 2d       	mov	r31, r0
						printf("0");
						printf("%X    ", a);
						} else {
						printf("%X    ", a);
						}
				printf("\n\r");
     258:	0f 2e       	mov	r0, r31
     25a:	f3 e5       	ldi	r31, 0x53	; 83
     25c:	af 2e       	mov	r10, r31
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	bf 2e       	mov	r11, r31
     262:	f0 2d       	mov	r31, r0
	seq_number=0x1000;
	//Odczytywanie rejestrów RTL8019as
				printf("\nRealtek 8019AS Register dump\n");
				printf("\r");
				printf("\nREG Page0 Page1 Page2 Page3\n\n");
				printf("\r");
     264:	1c 2f       	mov	r17, r28
					
				for(uint8_t reg = 0; reg<16; reg++) {
					
					uint8_t a = 0;
					printf("%X    ", reg);
     266:	00 d0       	rcall	.+0      	; 0x268 <main+0xee>
     268:	00 d0       	rcall	.+0      	; 0x26a <main+0xf0>
     26a:	ed b7       	in	r30, 0x3d	; 61
     26c:	fe b7       	in	r31, 0x3e	; 62
     26e:	31 96       	adiw	r30, 0x01	; 1
     270:	f1 82       	std	Z+1, r15	; 0x01
     272:	e0 82       	st	Z, r14
     274:	d3 83       	std	Z+3, r29	; 0x03
     276:	c2 83       	std	Z+2, r28	; 0x02
     278:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
					
					RTLwrite(0x00, 0x00);
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     28c:	c6 01       	movw	r24, r12
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <main+0x114>
					_delay_ms(2);
					a = RTLread(reg);
     292:	8c 2f       	mov	r24, r28
     294:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     298:	08 2f       	mov	r16, r24
					if(a < 16) {
     29a:	80 31       	cpi	r24, 0x10	; 16
     29c:	a0 f4       	brcc	.+40     	; 0x2c6 <main+0x14c>
						printf("0");
     29e:	80 e3       	ldi	r24, 0x30	; 48
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <putchar>
						printf("%X    ", a);
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <main+0x12e>
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <main+0x130>
     2aa:	ed b7       	in	r30, 0x3d	; 61
     2ac:	fe b7       	in	r31, 0x3e	; 62
     2ae:	31 96       	adiw	r30, 0x01	; 1
     2b0:	f1 82       	std	Z+1, r15	; 0x01
     2b2:	e0 82       	st	Z, r14
     2b4:	02 83       	std	Z+2, r16	; 0x02
     2b6:	13 82       	std	Z+3, r1	; 0x03
     2b8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f c0       	rjmp	.+30     	; 0x2e4 <main+0x16a>
						} else {
						printf("%X    ", a);
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <main+0x14e>
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <main+0x150>
     2ca:	ed b7       	in	r30, 0x3d	; 61
     2cc:	fe b7       	in	r31, 0x3e	; 62
     2ce:	31 96       	adiw	r30, 0x01	; 1
     2d0:	f1 82       	std	Z+1, r15	; 0x01
     2d2:	e0 82       	st	Z, r14
     2d4:	82 83       	std	Z+2, r24	; 0x02
     2d6:	13 82       	std	Z+3, r1	; 0x03
     2d8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
						}
					
					RTLwrite(0x00, 0x40);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	60 e4       	ldi	r22, 0x40	; 64
     2e8:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     2ec:	c6 01       	movw	r24, r12
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x174>
					_delay_ms(2);
					a = RTLread(reg);
     2f2:	81 2f       	mov	r24, r17
     2f4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     2f8:	08 2f       	mov	r16, r24
					if(a < 16) {
     2fa:	80 31       	cpi	r24, 0x10	; 16
     2fc:	a0 f4       	brcc	.+40     	; 0x326 <main+0x1ac>
						printf("0");
     2fe:	80 e3       	ldi	r24, 0x30	; 48
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <putchar>
						printf("%X    ", a);
     306:	00 d0       	rcall	.+0      	; 0x308 <main+0x18e>
     308:	00 d0       	rcall	.+0      	; 0x30a <main+0x190>
     30a:	ed b7       	in	r30, 0x3d	; 61
     30c:	fe b7       	in	r31, 0x3e	; 62
     30e:	31 96       	adiw	r30, 0x01	; 1
     310:	f1 82       	std	Z+1, r15	; 0x01
     312:	e0 82       	st	Z, r14
     314:	02 83       	std	Z+2, r16	; 0x02
     316:	13 82       	std	Z+3, r1	; 0x03
     318:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f c0       	rjmp	.+30     	; 0x344 <main+0x1ca>
						} else {
						printf("%X    ", a);
     326:	00 d0       	rcall	.+0      	; 0x328 <main+0x1ae>
     328:	00 d0       	rcall	.+0      	; 0x32a <main+0x1b0>
     32a:	ed b7       	in	r30, 0x3d	; 61
     32c:	fe b7       	in	r31, 0x3e	; 62
     32e:	31 96       	adiw	r30, 0x01	; 1
     330:	f1 82       	std	Z+1, r15	; 0x01
     332:	e0 82       	st	Z, r14
     334:	82 83       	std	Z+2, r24	; 0x02
     336:	13 82       	std	Z+3, r1	; 0x03
     338:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
						}
					
					RTLwrite(0x00, 0x80);
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	60 e8       	ldi	r22, 0x80	; 128
     348:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     34c:	c6 01       	movw	r24, r12
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <main+0x1d4>
					_delay_ms(2);
					a = RTLread(reg);
     352:	81 2f       	mov	r24, r17
     354:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     358:	08 2f       	mov	r16, r24
					if(a < 16) {
     35a:	80 31       	cpi	r24, 0x10	; 16
     35c:	a0 f4       	brcc	.+40     	; 0x386 <main+0x20c>
						printf("0");
     35e:	80 e3       	ldi	r24, 0x30	; 48
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <putchar>
						printf("%X    ", a);
     366:	00 d0       	rcall	.+0      	; 0x368 <main+0x1ee>
     368:	00 d0       	rcall	.+0      	; 0x36a <main+0x1f0>
     36a:	ed b7       	in	r30, 0x3d	; 61
     36c:	fe b7       	in	r31, 0x3e	; 62
     36e:	31 96       	adiw	r30, 0x01	; 1
     370:	f1 82       	std	Z+1, r15	; 0x01
     372:	e0 82       	st	Z, r14
     374:	02 83       	std	Z+2, r16	; 0x02
     376:	13 82       	std	Z+3, r1	; 0x03
     378:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <main+0x22a>
						} else {
						printf("%X    ", a);
     386:	00 d0       	rcall	.+0      	; 0x388 <main+0x20e>
     388:	00 d0       	rcall	.+0      	; 0x38a <main+0x210>
     38a:	ed b7       	in	r30, 0x3d	; 61
     38c:	fe b7       	in	r31, 0x3e	; 62
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	f1 82       	std	Z+1, r15	; 0x01
     392:	e0 82       	st	Z, r14
     394:	82 83       	std	Z+2, r24	; 0x02
     396:	13 82       	std	Z+3, r1	; 0x03
     398:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
						}
					
					RTLwrite(0x00, 0xC0);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	60 ec       	ldi	r22, 0xC0	; 192
     3a8:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     3ac:	c6 01       	movw	r24, r12
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <main+0x234>
					_delay_ms(2);
					a = RTLread(reg);
     3b2:	81 2f       	mov	r24, r17
     3b4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     3b8:	08 2f       	mov	r16, r24
					if(a < 16) {
     3ba:	80 31       	cpi	r24, 0x10	; 16
     3bc:	a0 f4       	brcc	.+40     	; 0x3e6 <main+0x26c>
						printf("0");
     3be:	80 e3       	ldi	r24, 0x30	; 48
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <putchar>
						printf("%X    ", a);
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <main+0x24e>
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x250>
     3ca:	ed b7       	in	r30, 0x3d	; 61
     3cc:	fe b7       	in	r31, 0x3e	; 62
     3ce:	31 96       	adiw	r30, 0x01	; 1
     3d0:	f1 82       	std	Z+1, r15	; 0x01
     3d2:	e0 82       	st	Z, r14
     3d4:	02 83       	std	Z+2, r16	; 0x02
     3d6:	13 82       	std	Z+3, r1	; 0x03
     3d8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f c0       	rjmp	.+30     	; 0x404 <main+0x28a>
						} else {
						printf("%X    ", a);
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <main+0x26e>
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <main+0x270>
     3ea:	ed b7       	in	r30, 0x3d	; 61
     3ec:	fe b7       	in	r31, 0x3e	; 62
     3ee:	31 96       	adiw	r30, 0x01	; 1
     3f0:	f1 82       	std	Z+1, r15	; 0x01
     3f2:	e0 82       	st	Z, r14
     3f4:	82 83       	std	Z+2, r24	; 0x02
     3f6:	13 82       	std	Z+3, r1	; 0x03
     3f8:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
						}
				printf("\n\r");
     404:	00 d0       	rcall	.+0      	; 0x406 <main+0x28c>
     406:	ed b7       	in	r30, 0x3d	; 61
     408:	fe b7       	in	r31, 0x3e	; 62
     40a:	b2 82       	std	Z+2, r11	; 0x02
     40c:	a1 82       	std	Z+1, r10	; 0x01
     40e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <printf>
     412:	21 96       	adiw	r28, 0x01	; 1
				printf("\nRealtek 8019AS Register dump\n");
				printf("\r");
				printf("\nREG Page0 Page1 Page2 Page3\n\n");
				printf("\r");
					
				for(uint8_t reg = 0; reg<16; reg++) {
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	c0 31       	cpi	r28, 0x10	; 16
     41a:	d1 05       	cpc	r29, r1
     41c:	09 f0       	breq	.+2      	; 0x420 <main+0x2a6>
     41e:	22 cf       	rjmp	.-444    	; 0x264 <main+0xea>
	}
	Http_Check();
	*/
	return 0;
}
}
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	bf 90       	pop	r11
     436:	af 90       	pop	r10
     438:	08 95       	ret

0000043a <RTLsetup_ports>:
#include "RTL8019as.h"

//konfiguracja linii portów mikrokontrolera
void RTLsetup_ports(void) {
	
	RTL_DDR = 0xFF;
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	8a bb       	out	0x1a, r24	; 26
	RTL_PORT = 0xFF;
     43e:	8b bb       	out	0x1b, r24	; 27
	
	RTL_CONTROL_DDR |= (1<<RTL_CONTROL_READPIN);
     440:	a1 e3       	ldi	r26, 0x31	; 49
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	8c 91       	ld	r24, X
     446:	80 68       	ori	r24, 0x80	; 128
     448:	8c 93       	st	X, r24
	RTL_CONTROL_DDR |= (1<<RTL_CONTROL_WRITEPIN);
     44a:	8c 91       	ld	r24, X
     44c:	80 64       	ori	r24, 0x40	; 64
     44e:	8c 93       	st	X, r24
	RTL_CONTROL_DDR |= (1<<RTL_CONTROL_AEN);
     450:	8c 91       	ld	r24, X
     452:	80 61       	ori	r24, 0x10	; 16
     454:	8c 93       	st	X, r24
	RTL_CONTROL_PORT |= (1<<RTL_CONTROL_READPIN);
     456:	e2 e3       	ldi	r30, 0x32	; 50
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	80 68       	ori	r24, 0x80	; 128
     45e:	80 83       	st	Z, r24
	RTL_CONTROL_PORT |= (1<<RTL_CONTROL_WRITEPIN);
     460:	80 81       	ld	r24, Z
     462:	80 64       	ori	r24, 0x40	; 64
     464:	80 83       	st	Z, r24
	RTL_CONTROL_PORT |= (1<<RTL_CONTROL_AEN);
     466:	80 81       	ld	r24, Z
     468:	80 61       	ori	r24, 0x10	; 16
     46a:	80 83       	st	Z, r24
	
	RTL_RESET_DDR |= (1<<RTL_RESET_PIN);
     46c:	8c 91       	ld	r24, X
     46e:	80 62       	ori	r24, 0x20	; 32
     470:	8c 93       	st	X, r24
}
     472:	08 95       	ret

00000474 <RTLhw_reset>:
//konic konfiguracji

//Reset kontrolera sieci
void RTLhw_reset(void) {
	
	RTL_RESET_PORT |= (1<<RTL_RESET_PIN);
     474:	e2 e3       	ldi	r30, 0x32	; 50
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	80 62       	ori	r24, 0x20	; 32
     47c:	80 83       	st	Z, r24
     47e:	20 e4       	ldi	r18, 0x40	; 64
     480:	3c e9       	ldi	r19, 0x9C	; 156
     482:	c9 01       	movw	r24, r18
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <RTLhw_reset+0x10>
	_delay_ms(10);
	RTL_RESET_PORT &= ~(1<<RTL_RESET_PIN);
     488:	80 81       	ld	r24, Z
     48a:	8f 7d       	andi	r24, 0xDF	; 223
     48c:	80 83       	st	Z, r24
     48e:	c9 01       	movw	r24, r18
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <RTLhw_reset+0x1c>
	_delay_ms(10); 
}
     494:	08 95       	ret

00000496 <RTLwrite>:
//koniec funkcji resetuj¹cej kontroler

//Zapis bajtu do RTL8019as
void RTLwrite (uint8_t address, uint8_t data) {
	
	RTL_DDR = 0xff;
     496:	4a e3       	ldi	r20, 0x3A	; 58
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	9f ef       	ldi	r25, 0xFF	; 255
     49c:	fa 01       	movw	r30, r20
     49e:	90 83       	st	Z, r25
	//RTL_CONTROL_PORT = ~(1<<RTL_CONTROL_AEN);
	RTL_PORT = address;
     4a0:	ab e3       	ldi	r26, 0x3B	; 59
     4a2:	b0 e0       	ldi	r27, 0x00	; 0
     4a4:	8c 93       	st	X, r24
	PORTE = ~(1<<PORTE1);
     4a6:	27 e2       	ldi	r18, 0x27	; 39
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	8d ef       	ldi	r24, 0xFD	; 253
     4ac:	f9 01       	movw	r30, r18
     4ae:	80 83       	st	Z, r24
	RTL_PORT = data;
     4b0:	6c 93       	st	X, r22
	
	RTL_CLEAR_WRITE;
     4b2:	e2 e3       	ldi	r30, 0x32	; 50
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	8f 7b       	andi	r24, 0xBF	; 191
     4ba:	80 83       	st	Z, r24
	RTL_SET_WRITE;
     4bc:	80 81       	ld	r24, Z
     4be:	80 64       	ori	r24, 0x40	; 64
     4c0:	80 83       	st	Z, r24
	
	RTL_CONTROL_PORT = (1<<RTL_CONTROL_AEN);
     4c2:	80 e1       	ldi	r24, 0x10	; 16
     4c4:	80 83       	st	Z, r24
	PORTE = 1<<PORTE1;
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	f9 01       	movw	r30, r18
     4ca:	80 83       	st	Z, r24
	
	RTL_DDR = 0x00;
     4cc:	fa 01       	movw	r30, r20
     4ce:	10 82       	st	Z, r1
	RTL_PORT = 0xFF;
     4d0:	9c 93       	st	X, r25
}
     4d2:	08 95       	ret

000004d4 <RTLread>:

//Funkcja odczytuj¹ca jeden bajt z RTL8019as
uint8_t RTLread(uint8_t address) {
	
	uint8_t byte;
	RTL_DDR = 0xff;
     4d4:	ea e3       	ldi	r30, 0x3A	; 58
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	9f ef       	ldi	r25, 0xFF	; 255
     4da:	90 83       	st	Z, r25
	RTL_CONTROL_PORT = ~(1<<RTL_CONTROL_AEN);
     4dc:	9f ee       	ldi	r25, 0xEF	; 239
     4de:	92 bb       	out	0x12, r25	; 18
	RTL_PORT = address;
     4e0:	8b bb       	out	0x1b, r24	; 27
	PORTE = ~(1<<PORTE1);
     4e2:	8d ef       	ldi	r24, 0xFD	; 253
     4e4:	87 b9       	out	0x07, r24	; 7
	RTL_DDR = 0x00;
     4e6:	10 82       	st	Z, r1
	asm volatile("nop\n\t"::);			//Gdy czêstoœæ 8MHz wystarczy jeden nop
     4e8:	00 00       	nop
	asm volatile("nop\n\t"::);
     4ea:	00 00       	nop
	
	RTL_CLEAR_READ;
     4ec:	e2 e3       	ldi	r30, 0x32	; 50
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	8f 77       	andi	r24, 0x7F	; 127
     4f4:	80 83       	st	Z, r24
	asm volatile("nop\n\t"::);
     4f6:	00 00       	nop
	asm volatile("nop\n\t"::);
     4f8:	00 00       	nop
	
	byte = RTL_PIN;
     4fa:	89 b3       	in	r24, 0x19	; 25
	
	PORTE = 1<<PORTE1;
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	97 b9       	out	0x07, r25	; 7
	RTL_SET_READ;
     500:	e2 e3       	ldi	r30, 0x32	; 50
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	90 81       	ld	r25, Z
     506:	90 68       	ori	r25, 0x80	; 128
     508:	90 83       	st	Z, r25
	RTL_CONTROL_PORT = (1<<RTL_CONTROL_AEN);
     50a:	90 e1       	ldi	r25, 0x10	; 16
     50c:	90 83       	st	Z, r25
	
	return byte;

}
     50e:	08 95       	ret

00000510 <RTLinit>:
//koniec funkcji odczytuj¹cej

//Inicjalizacja RTL8019as
void RTLinit(void) {
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17

	
	RTLsetup_ports();
     51c:	0e 94 1d 02 	call	0x43a	; 0x43a <RTLsetup_ports>
	RTLhw_reset();
     520:	0e 94 3a 02 	call	0x474	; 0x474 <RTLhw_reset>
	RTLwrite(RSTPORT,0);
     524:	88 e1       	ldi	r24, 0x18	; 24
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     52c:	2c e2       	ldi	r18, 0x2C	; 44
     52e:	31 e0       	ldi	r19, 0x01	; 1
     530:	40 e9       	ldi	r20, 0x90	; 144
     532:	51 e0       	ldi	r21, 0x01	; 1
     534:	ca 01       	movw	r24, r20
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <RTLinit+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     53e:	d1 f7       	brne	.-12     	; 0x534 <RTLinit+0x24>
	_delay_ms(30);
	
	RTLwrite(CR, 0x41);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	61 e4       	ldi	r22, 0x41	; 65
     544:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     548:	0f 2e       	mov	r0, r31
     54a:	f0 e4       	ldi	r31, 0x40	; 64
     54c:	cf 2e       	mov	r12, r31
     54e:	ff e1       	ldi	r31, 0x1F	; 31
     550:	df 2e       	mov	r13, r31
     552:	f0 2d       	mov	r31, r0
     554:	c6 01       	movw	r24, r12
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <RTLinit+0x46>
	_delay_ms(2);
	
	RTLwrite(CURR, RXSTART_INIT);
     55a:	87 e0       	ldi	r24, 0x07	; 7
     55c:	66 e4       	ldi	r22, 0x46	; 70
     55e:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(PAR0+0, MyMac[0]);	//Zapis adresu MAC
     562:	0f 2e       	mov	r0, r31
     564:	f6 e5       	ldi	r31, 0x56	; 86
     566:	ef 2e       	mov	r14, r31
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	ff 2e       	mov	r15, r31
     56c:	f0 2d       	mov	r31, r0
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	f7 01       	movw	r30, r14
     572:	61 91       	ld	r22, Z+
     574:	8f 01       	movw	r16, r30
     576:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(PAR0+1, MyMac[1]);
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	f8 01       	movw	r30, r16
     57e:	60 81       	ld	r22, Z
     580:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(PAR0+2, MyMac[2]);
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	f7 01       	movw	r30, r14
     588:	62 81       	ldd	r22, Z+2	; 0x02
     58a:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(PAR0+3, MyMac[3]);
     58e:	84 e0       	ldi	r24, 0x04	; 4
     590:	f7 01       	movw	r30, r14
     592:	63 81       	ldd	r22, Z+3	; 0x03
     594:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(PAR0+4, MyMac[4]);
     598:	85 e0       	ldi	r24, 0x05	; 5
     59a:	f7 01       	movw	r30, r14
     59c:	64 81       	ldd	r22, Z+4	; 0x04
     59e:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(PAR0+5, MyMac[5]);
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	f7 01       	movw	r30, r14
     5a6:	65 81       	ldd	r22, Z+5	; 0x05
     5a8:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(CR,0x21);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	61 e2       	ldi	r22, 0x21	; 33
     5b0:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     5b4:	c6 01       	movw	r24, r12
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <RTLinit+0xa6>
	_delay_ms(2);
	
	RTLwrite(DCR, 0x58);
     5ba:	8e e0       	ldi	r24, 0x0E	; 14
     5bc:	68 e5       	ldi	r22, 0x58	; 88
     5be:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(RCR, 0x04);
     5c2:	8c e0       	ldi	r24, 0x0C	; 12
     5c4:	64 e0       	ldi	r22, 0x04	; 4
     5c6:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(TCR, 0x02);
     5ca:	8d e0       	ldi	r24, 0x0D	; 13
     5cc:	62 e0       	ldi	r22, 0x02	; 2
     5ce:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(RBCR0, 0x00);
     5d2:	8a e0       	ldi	r24, 0x0A	; 10
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RBCR1, 0x00);
     5da:	8b e0       	ldi	r24, 0x0B	; 11
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(TPSR, TXSTART_INIT);
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	60 e4       	ldi	r22, 0x40	; 64
     5e6:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(PSTART, RXSTART_INIT);
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	66 e4       	ldi	r22, 0x46	; 70
     5ee:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(BNRY, RXSTART_INIT);
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	66 e4       	ldi	r22, 0x46	; 70
     5f6:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(PSTOP, RXSTOP_INIT);
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	60 e6       	ldi	r22, 0x60	; 96
     5fe:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(ISR, 0xFF);
     602:	87 e0       	ldi	r24, 0x07	; 7
     604:	6f ef       	ldi	r22, 0xFF	; 255
     606:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(IMR, 0x11);
     60a:	8f e0       	ldi	r24, 0x0F	; 15
     60c:	61 e1       	ldi	r22, 0x11	; 17
     60e:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(TCR, 0x00);
     612:	8d e0       	ldi	r24, 0x0D	; 13
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(CR, 0x22);
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	62 e2       	ldi	r22, 0x22	; 34
     61e:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
}
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	08 95       	ret

00000630 <RTLsend_packet>:
//koniec pe³nej inicjalizacji kontrolera

//Wysy³anie pakietu do RTL8019as
void RTLsend_packet(void) {
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29

	uint8_t i;
	
	RTLwrite(CR, 0x22);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	62 e2       	ldi	r22, 0x22	; 34
     63a:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	while(RTLread(CR) & 0x04) {}; //czekanie a¿ mo¿na wys³aæ
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     644:	82 fd       	sbrc	r24, 2
     646:	fb cf       	rjmp	.-10     	; 0x63e <RTLsend_packet+0xe>
	
	RTLwrite(TPSR,TXSTART_INIT);
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	60 e4       	ldi	r22, 0x40	; 64
     64c:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(RSAR0, 0x00);
     650:	88 e0       	ldi	r24, 0x08	; 8
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RSAR1, TXSTART_INIT);
     658:	89 e0       	ldi	r24, 0x09	; 9
     65a:	60 e4       	ldi	r22, 0x40	; 64
     65c:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(ISR, (1<<ISR_PTX));
     660:	87 e0       	ldi	r24, 0x07	; 7
     662:	62 e0       	ldi	r22, 0x02	; 2
     664:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(RBCR0, 0xEA);
     668:	8a e0       	ldi	r24, 0x0A	; 10
     66a:	6a ee       	ldi	r22, 0xEA	; 234
     66c:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RBCR1, 0x05);
     670:	8b e0       	ldi	r24, 0x0B	; 11
     672:	65 e0       	ldi	r22, 0x05	; 5
     674:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(CR, 0x12);
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	62 e1       	ldi	r22, 0x12	; 18
     67c:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	for(i=0; i<PacketSize; i++) {
     680:	80 91 de 02 	lds	r24, 0x02DE
     684:	90 91 df 02 	lds	r25, 0x02DF
     688:	89 2b       	or	r24, r25
     68a:	c1 f0       	breq	.+48     	; 0x6bc <RTLsend_packet+0x8c>
     68c:	10 e0       	ldi	r17, 0x00	; 0
		
		RTLwrite(RDMAPORT, EthFrame[i]);	//zapis ramki do kontrolera
     68e:	c8 e7       	ldi	r28, 0x78	; 120
     690:	d1 e0       	ldi	r29, 0x01	; 1
     692:	fe 01       	movw	r30, r28
     694:	e1 0f       	add	r30, r17
     696:	f1 1d       	adc	r31, r1
     698:	80 e1       	ldi	r24, 0x10	; 16
     69a:	60 81       	ld	r22, Z
     69c:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RBCR0, 0xEA);
	RTLwrite(RBCR1, 0x05);
	
	RTLwrite(CR, 0x12);
	
	for(i=0; i<PacketSize; i++) {
     6a0:	1f 5f       	subi	r17, 0xFF	; 255
     6a2:	21 2f       	mov	r18, r17
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	80 91 de 02 	lds	r24, 0x02DE
     6aa:	90 91 df 02 	lds	r25, 0x02DF
     6ae:	28 17       	cp	r18, r24
     6b0:	39 07       	cpc	r19, r25
     6b2:	78 f3       	brcs	.-34     	; 0x692 <RTLsend_packet+0x62>
		
		RTLwrite(RDMAPORT, EthFrame[i]);	//zapis ramki do kontrolera
	}
	
	while (PacketSize<60) {
     6b4:	bc 01       	movw	r22, r24
     6b6:	8c 33       	cpi	r24, 0x3C	; 60
     6b8:	91 05       	cpc	r25, r1
     6ba:	90 f4       	brcc	.+36     	; 0x6e0 <RTLsend_packet+0xb0>
		
		RTLwrite(RDMAPORT, 0);	//Je¿eli ramka mnijsza ni¿ 60 bajtów to dope³nij zerami
     6bc:	80 e1       	ldi	r24, 0x10	; 16
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
		PacketSize++;
     6c4:	80 91 de 02 	lds	r24, 0x02DE
     6c8:	90 91 df 02 	lds	r25, 0x02DF
     6cc:	bc 01       	movw	r22, r24
     6ce:	6f 5f       	subi	r22, 0xFF	; 255
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	70 93 df 02 	sts	0x02DF, r23
     6d6:	60 93 de 02 	sts	0x02DE, r22
	for(i=0; i<PacketSize; i++) {
		
		RTLwrite(RDMAPORT, EthFrame[i]);	//zapis ramki do kontrolera
	}
	
	while (PacketSize<60) {
     6da:	6c 33       	cpi	r22, 0x3C	; 60
     6dc:	71 05       	cpc	r23, r1
     6de:	70 f3       	brcs	.-36     	; 0x6bc <RTLsend_packet+0x8c>
		
		RTLwrite(RDMAPORT, 0);	//Je¿eli ramka mnijsza ni¿ 60 bajtów to dope³nij zerami
		PacketSize++;
	}
	
	RTLwrite(TBCR0, (uint8_t)(PacketSize));	//zapisz rozmiar ramiki
     6e0:	85 e0       	ldi	r24, 0x05	; 5
     6e2:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(TBCR1, (uint8_t)((PacketSize)>>8));
     6e6:	60 91 df 02 	lds	r22, 0x02DF
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>

	RTLwrite(CR, 0x24);	//wys³anie ramki przez sieæ
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	64 e2       	ldi	r22, 0x24	; 36
     6f4:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(ISR, (1<<ISR_RDC));
     6f8:	87 e0       	ldi	r24, 0x07	; 7
     6fa:	60 e4       	ldi	r22, 0x40	; 64
     6fc:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
}// koniec funkcju wysy³aj¹cej pakiet
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	08 95       	ret

00000708 <RTLreceive_empty_check>:

//Funkcja sprawdzaj¹ca czy w buforze kontrolera jest nowy pakiet
uint8_t RTLreceive_empty_check(void) {
     708:	1f 93       	push	r17
	
	uint8_t curr;
	
	RTLwrite(CR, 0x68);
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	68 e6       	ldi	r22, 0x68	; 104
     70e:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	curr = RTLread(CURR);
     712:	87 e0       	ldi	r24, 0x07	; 7
     714:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     718:	18 2f       	mov	r17, r24
	
	RTLwrite(CR, 0x22);
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	62 e2       	ldi	r22, 0x22	; 34
     71e:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	return (curr == RTLread(BNRY)); //Je¿eli wskaŸniki równe to znaczy ¿e nie odebrano pakietu
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	18 17       	cp	r17, r24
     72c:	09 f4       	brne	.+2      	; 0x730 <RTLreceive_empty_check+0x28>
     72e:	91 e0       	ldi	r25, 0x01	; 1
}// koniec funkcji sprawdzaj¹cej bufor
     730:	89 2f       	mov	r24, r25
     732:	1f 91       	pop	r17
     734:	08 95       	ret

00000736 <RTLend_retreive>:

//Funkcja koñcz¹ca odczyt ramki z kontrolera
void RTLend_retreive(void) {
     736:	1f 93       	push	r17
	uint8_t i;
	
	RTLwrite(CR, 0x22);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	62 e2       	ldi	r22, 0x22	; 34
     73c:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     740:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i <= 20; i++) {
		if(RTLread(ISR) & 1<<6) {
     742:	87 e0       	ldi	r24, 0x07	; 7
     744:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     748:	86 fd       	sbrc	r24, 6
     74a:	03 c0       	rjmp	.+6      	; 0x752 <RTLend_retreive+0x1c>
//Funkcja koñcz¹ca odczyt ramki z kontrolera
void RTLend_retreive(void) {
	uint8_t i;
	
	RTLwrite(CR, 0x22);
	for(i=0; i <= 20; i++) {
     74c:	1f 5f       	subi	r17, 0xFF	; 255
     74e:	15 31       	cpi	r17, 0x15	; 21
     750:	c1 f7       	brne	.-16     	; 0x742 <RTLend_retreive+0xc>
		if(RTLread(ISR) & 1<<6) {
			break;
		}
	}
	RTLwrite(ISR, 1<<6);
     752:	87 e0       	ldi	r24, 0x07	; 7
     754:	60 e4       	ldi	r22, 0x40	; 64
     756:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
		
	RTLwrite(BNRY, nextPacketPtr);
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	60 91 74 01 	lds	r22, 0x0174
     760:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
}// koniec funkcji koncz¹cej odczyt
     764:	1f 91       	pop	r17
     766:	08 95       	ret

00000768 <RTLreceive_packet>:

//Funkcja odczytuj¹ca ramkê z kontrolera sieci
uint8_t RTLreceive_packet(void) {
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
	
	uint8_t i;
	
	if(RTLreceive_empty_check()) return 2;
     774:	0e 94 84 03 	call	0x708	; 0x708 <RTLreceive_empty_check>
     778:	88 23       	and	r24, r24
     77a:	11 f0       	breq	.+4      	; 0x780 <RTLreceive_packet+0x18>
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	31 c1       	rjmp	.+610    	; 0x9e2 <RTLreceive_packet+0x27a>
	
	RTLwrite(CR, 0x22);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	62 e2       	ldi	r22, 0x22	; 34
     784:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	currentPacketPtr = RTLread(BNRY);
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     78e:	80 93 76 01 	sts	0x0176, r24
     792:	10 92 77 01 	sts	0x0177, r1
	currentRetreiveAddress = (currentPacketPtr<<8) + 4;
     796:	38 2f       	mov	r19, r24
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	2c 5f       	subi	r18, 0xFC	; 252
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	30 93 dd 02 	sts	0x02DD, r19
     7a2:	20 93 dc 02 	sts	0x02DC, r18
	
	RTLwrite(ISR, (1<<ISR_PRX));
     7a6:	87 e0       	ldi	r24, 0x07	; 7
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	if ((currentPacketPtr >= RXSTOP_INIT) || (currentPacketPtr < RXSTART_INIT)) {
     7ae:	80 91 76 01 	lds	r24, 0x0176
     7b2:	90 91 77 01 	lds	r25, 0x0177
     7b6:	86 54       	subi	r24, 0x46	; 70
     7b8:	90 40       	sbci	r25, 0x00	; 0
     7ba:	4a 97       	sbiw	r24, 0x1a	; 26
     7bc:	90 f0       	brcs	.+36     	; 0x7e2 <RTLreceive_packet+0x7a>
		
		RTLwrite(BNRY, RXSTART_INIT);
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	66 e4       	ldi	r22, 0x46	; 70
     7c2:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
		RTLwrite(CR, 0x62);
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	62 e6       	ldi	r22, 0x62	; 98
     7ca:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
		RTLwrite(CURR, RXSTART_INIT);
     7ce:	87 e0       	ldi	r24, 0x07	; 7
     7d0:	66 e4       	ldi	r22, 0x46	; 70
     7d2:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
		RTLwrite(CR, 0x22);
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	62 e2       	ldi	r22, 0x22	; 34
     7da:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	00 c1       	rjmp	.+512    	; 0x9e2 <RTLreceive_packet+0x27a>
		return 3;
	}
	
	RTLwrite(RBCR0, 4+ETHERNET_HEADER_LENGTH);
     7e2:	8a e0       	ldi	r24, 0x0A	; 10
     7e4:	62 e1       	ldi	r22, 0x12	; 18
     7e6:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RBCR1, 0);
     7ea:	8b e0       	ldi	r24, 0x0B	; 11
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RSAR0, 0);
     7f2:	88 e0       	ldi	r24, 0x08	; 8
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RSAR1, currentPacketPtr);
     7fa:	89 e0       	ldi	r24, 0x09	; 9
     7fc:	60 91 76 01 	lds	r22, 0x0176
     800:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
		RTLwrite(CR, 0x0A);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	6a e0       	ldi	r22, 0x0A	; 10
     808:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
		
		RTLread(RDMAPORT);
     80c:	80 e1       	ldi	r24, 0x10	; 16
     80e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
		nextPacketPtr = RTLread(RDMAPORT);
     812:	80 e1       	ldi	r24, 0x10	; 16
     814:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	90 93 75 01 	sts	0x0175, r25
     81e:	80 93 74 01 	sts	0x0174, r24
		
		if((nextPacketPtr >= RXSTOP_INIT) || (nextPacketPtr < RXSTART_INIT)) return 4;
     822:	86 54       	subi	r24, 0x46	; 70
     824:	90 40       	sbci	r25, 0x00	; 0
     826:	4a 97       	sbiw	r24, 0x1a	; 26
     828:	10 f0       	brcs	.+4      	; 0x82e <RTLreceive_packet+0xc6>
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	da c0       	rjmp	.+436    	; 0x9e2 <RTLreceive_packet+0x27a>
		
		PacketSize = RTLread(RDMAPORT);
     82e:	80 e1       	ldi	r24, 0x10	; 16
     830:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     834:	80 93 de 02 	sts	0x02DE, r24
     838:	10 92 df 02 	sts	0x02DF, r1
		PacketSize |= (uint8_t)RTLread(RDMAPORT);
     83c:	80 e1       	ldi	r24, 0x10	; 16
     83e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	20 91 de 02 	lds	r18, 0x02DE
     848:	30 91 df 02 	lds	r19, 0x02DF
     84c:	82 2b       	or	r24, r18
     84e:	93 2b       	or	r25, r19
     850:	90 93 df 02 	sts	0x02DF, r25
     854:	80 93 de 02 	sts	0x02DE, r24
		
		if(PacketSize > 4) {
     858:	85 30       	cpi	r24, 0x05	; 5
     85a:	91 05       	cpc	r25, r1
     85c:	48 f0       	brcs	.+18     	; 0x870 <RTLreceive_packet+0x108>
			PacketSize -= 4;
     85e:	04 97       	sbiw	r24, 0x04	; 4
     860:	90 93 df 02 	sts	0x02DF, r25
     864:	80 93 de 02 	sts	0x02DE, r24
		} else {
			RTLend_retreive();
			return 5;
		}
		
		if(PacketSize > 1514) {
     868:	8b 5e       	subi	r24, 0xEB	; 235
     86a:	95 40       	sbci	r25, 0x05	; 5
     86c:	28 f4       	brcc	.+10     	; 0x878 <RTLreceive_packet+0x110>
     86e:	08 c0       	rjmp	.+16     	; 0x880 <RTLreceive_packet+0x118>
		PacketSize |= (uint8_t)RTLread(RDMAPORT);
		
		if(PacketSize > 4) {
			PacketSize -= 4;
		} else {
			RTLend_retreive();
     870:	0e 94 9b 03 	call	0x736	; 0x736 <RTLend_retreive>
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	b5 c0       	rjmp	.+362    	; 0x9e2 <RTLreceive_packet+0x27a>
			return 5;
		}
		
		if(PacketSize > 1514) {
			RTLend_retreive();
     878:	0e 94 9b 03 	call	0x736	; 0x736 <RTLend_retreive>
     87c:	86 e0       	ldi	r24, 0x06	; 6
     87e:	b1 c0       	rjmp	.+354    	; 0x9e2 <RTLreceive_packet+0x27a>
			return 6;
		}
		
		EthFrame[EthDestMac+0]=RTLread(RDMAPORT);
     880:	80 e1       	ldi	r24, 0x10	; 16
     882:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     886:	0f 2e       	mov	r0, r31
     888:	f8 e7       	ldi	r31, 0x78	; 120
     88a:	ef 2e       	mov	r14, r31
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	ff 2e       	mov	r15, r31
     890:	f0 2d       	mov	r31, r0
     892:	f7 01       	movw	r30, r14
     894:	81 93       	st	Z+, r24
     896:	8f 01       	movw	r16, r30
		EthFrame[EthDestMac+1]=RTLread(RDMAPORT);
     898:	80 e1       	ldi	r24, 0x10	; 16
     89a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     89e:	f8 01       	movw	r30, r16
     8a0:	80 83       	st	Z, r24
		EthFrame[EthDestMac+2]=RTLread(RDMAPORT);
     8a2:	80 e1       	ldi	r24, 0x10	; 16
     8a4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8a8:	f7 01       	movw	r30, r14
     8aa:	82 83       	std	Z+2, r24	; 0x02
		EthFrame[EthDestMac+3]=RTLread(RDMAPORT);
     8ac:	80 e1       	ldi	r24, 0x10	; 16
     8ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8b2:	f7 01       	movw	r30, r14
     8b4:	83 83       	std	Z+3, r24	; 0x03
		EthFrame[EthDestMac+4]=RTLread(RDMAPORT);
     8b6:	80 e1       	ldi	r24, 0x10	; 16
     8b8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8bc:	f7 01       	movw	r30, r14
     8be:	84 83       	std	Z+4, r24	; 0x04
		EthFrame[EthDestMac+5]=RTLread(RDMAPORT);
     8c0:	80 e1       	ldi	r24, 0x10	; 16
     8c2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8c6:	f7 01       	movw	r30, r14
     8c8:	85 83       	std	Z+5, r24	; 0x05
		
		EthFrame[EthSourceMac+0]=RTLread(RDMAPORT);
     8ca:	80 e1       	ldi	r24, 0x10	; 16
     8cc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8d0:	f7 01       	movw	r30, r14
     8d2:	86 83       	std	Z+6, r24	; 0x06
		EthFrame[EthSourceMac+1]=RTLread(RDMAPORT);
     8d4:	80 e1       	ldi	r24, 0x10	; 16
     8d6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8da:	f7 01       	movw	r30, r14
     8dc:	87 83       	std	Z+7, r24	; 0x07
		EthFrame[EthSourceMac+2]=RTLread(RDMAPORT);
     8de:	80 e1       	ldi	r24, 0x10	; 16
     8e0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8e4:	f7 01       	movw	r30, r14
     8e6:	80 87       	std	Z+8, r24	; 0x08
		EthFrame[EthSourceMac+3]=RTLread(RDMAPORT);
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8ee:	f7 01       	movw	r30, r14
     8f0:	81 87       	std	Z+9, r24	; 0x09
		EthFrame[EthSourceMac+4]=RTLread(RDMAPORT);
     8f2:	80 e1       	ldi	r24, 0x10	; 16
     8f4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     8f8:	f7 01       	movw	r30, r14
     8fa:	82 87       	std	Z+10, r24	; 0x0a
		EthFrame[EthSourceMac+5]=RTLread(RDMAPORT);
     8fc:	80 e1       	ldi	r24, 0x10	; 16
     8fe:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     902:	f7 01       	movw	r30, r14
     904:	83 87       	std	Z+11, r24	; 0x0b
		
		EthFrame[EthTypeLen+0]=RTLread(RDMAPORT);
     906:	80 e1       	ldi	r24, 0x10	; 16
     908:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     90c:	f7 01       	movw	r30, r14
     90e:	84 87       	std	Z+12, r24	; 0x0c
		EthFrame[EthTypeLen+1]=RTLread(RDMAPORT);
     910:	80 e1       	ldi	r24, 0x10	; 16
     912:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     916:	f7 01       	movw	r30, r14
     918:	85 87       	std	Z+13, r24	; 0x0d
		
		currentRetreiveAddress += 6+6+2;
     91a:	80 91 dc 02 	lds	r24, 0x02DC
     91e:	90 91 dd 02 	lds	r25, 0x02DD
     922:	0e 96       	adiw	r24, 0x0e	; 14
     924:	90 93 dd 02 	sts	0x02DD, r25
     928:	80 93 dc 02 	sts	0x02DC, r24
		
	RTLwrite(CR, 0x22);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	62 e2       	ldi	r22, 0x22	; 34
     930:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
     934:	00 e0       	ldi	r16, 0x00	; 0
	for(i=0; i <= 20; i++) 
		if(RTLread(ISR) & 1<<6) 
     936:	87 e0       	ldi	r24, 0x07	; 7
     938:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     93c:	86 fd       	sbrc	r24, 6
     93e:	03 c0       	rjmp	.+6      	; 0x946 <RTLreceive_packet+0x1de>
		EthFrame[EthTypeLen+1]=RTLread(RDMAPORT);
		
		currentRetreiveAddress += 6+6+2;
		
	RTLwrite(CR, 0x22);
	for(i=0; i <= 20; i++) 
     940:	0f 5f       	subi	r16, 0xFF	; 255
     942:	05 31       	cpi	r16, 0x15	; 21
     944:	c1 f7       	brne	.-16     	; 0x936 <RTLreceive_packet+0x1ce>
		if(RTLread(ISR) & 1<<6) 
			break;
	RTLwrite(ISR, 1<<6);
     946:	87 e0       	ldi	r24, 0x07	; 7
     948:	60 e4       	ldi	r22, 0x40	; 64
     94a:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
		
	RTLwrite(RBCR0, (uint8_t)PacketSize);
     94e:	8a e0       	ldi	r24, 0x0A	; 10
     950:	60 91 de 02 	lds	r22, 0x02DE
     954:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RBCR1, (uint8_t)(PacketSize>>8));
     958:	60 91 df 02 	lds	r22, 0x02DF
     95c:	8b e0       	ldi	r24, 0x0B	; 11
     95e:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RSAR0, (uint8_t)currentRetreiveAddress);
     962:	88 e0       	ldi	r24, 0x08	; 8
     964:	60 91 dc 02 	lds	r22, 0x02DC
     968:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	RTLwrite(RSAR1, (uint8_t)(currentRetreiveAddress>>8));
     96c:	60 91 dd 02 	lds	r22, 0x02DD
     970:	89 e0       	ldi	r24, 0x09	; 9
     972:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
	RTLwrite(CR, 0x0A);
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	6a e0       	ldi	r22, 0x0A	; 10
     97a:	0e 94 4b 02 	call	0x496	; 0x496 <RTLwrite>
	
		for(i=0; i < PacketSize; i++) 
     97e:	20 91 de 02 	lds	r18, 0x02DE
     982:	30 91 df 02 	lds	r19, 0x02DF
     986:	21 15       	cp	r18, r1
     988:	31 05       	cpc	r19, r1
     98a:	a1 f0       	breq	.+40     	; 0x9b4 <RTLreceive_packet+0x24c>
     98c:	00 e0       	ldi	r16, 0x00	; 0
			EthFrame[14+i] = RTLread(RDMAPORT);
     98e:	c8 e7       	ldi	r28, 0x78	; 120
     990:	d1 e0       	ldi	r29, 0x01	; 1
     992:	80 e1       	ldi	r24, 0x10	; 16
     994:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <RTLread>
     998:	fe 01       	movw	r30, r28
     99a:	e0 0f       	add	r30, r16
     99c:	f1 1d       	adc	r31, r1
     99e:	86 87       	std	Z+14, r24	; 0x0e
	RTLwrite(RSAR0, (uint8_t)currentRetreiveAddress);
	RTLwrite(RSAR1, (uint8_t)(currentRetreiveAddress>>8));
	
	RTLwrite(CR, 0x0A);
	
		for(i=0; i < PacketSize; i++) 
     9a0:	0f 5f       	subi	r16, 0xFF	; 255
     9a2:	20 91 de 02 	lds	r18, 0x02DE
     9a6:	30 91 df 02 	lds	r19, 0x02DF
     9aa:	80 2f       	mov	r24, r16
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	82 17       	cp	r24, r18
     9b0:	93 07       	cpc	r25, r19
     9b2:	78 f3       	brcs	.-34     	; 0x992 <RTLreceive_packet+0x22a>
			EthFrame[14+i] = RTLread(RDMAPORT);
			
		currentRetreiveAddress += PacketSize;
     9b4:	80 91 dc 02 	lds	r24, 0x02DC
     9b8:	90 91 dd 02 	lds	r25, 0x02DD
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	90 93 dd 02 	sts	0x02DD, r25
     9c4:	80 93 dc 02 	sts	0x02DC, r24
		if( currentRetreiveAddress >= 0x6000) 
     9c8:	f0 e6       	ldi	r31, 0x60	; 96
     9ca:	80 30       	cpi	r24, 0x00	; 0
     9cc:	9f 07       	cpc	r25, r31
     9ce:	30 f0       	brcs	.+12     	; 0x9dc <RTLreceive_packet+0x274>
			currentRetreiveAddress = currentRetreiveAddress - (0x6000-0x4600);	
     9d0:	80 50       	subi	r24, 0x00	; 0
     9d2:	9a 41       	sbci	r25, 0x1A	; 26
     9d4:	90 93 dd 02 	sts	0x02DD, r25
     9d8:	80 93 dc 02 	sts	0x02DC, r24
	
	RTLend_retreive();		
     9dc:	0e 94 9b 03 	call	0x736	; 0x736 <RTLend_retreive>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
}// koniec funkcji odczytuj¹cej ramkê
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	08 95       	ret

000009f0 <PacketCheck>:

//Funkcja sprawdzaj¹ca czy odebrana ramka to ARP
uint8_t PacketCheck(void) {

	if(EthFrame[EthTypeLen+0]==0x08 && EthFrame[EthTypeLen+1]==0x06) {
     9f0:	80 91 84 01 	lds	r24, 0x0184
     9f4:	88 30       	cpi	r24, 0x08	; 8
     9f6:	51 f4       	brne	.+20     	; 0xa0c <PacketCheck+0x1c>
     9f8:	80 91 85 01 	lds	r24, 0x0185
     9fc:	86 30       	cpi	r24, 0x06	; 6
     9fe:	11 f4       	brne	.+4      	; 0xa04 <PacketCheck+0x14>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	08 95       	ret
		return 1; //wiadomoœæ ARP
	}
	
	if(EthFrame[EthTypeLen+0]==0x08 && EthFrame[EthTypeLen+1]==0x00) {
     a04:	88 23       	and	r24, r24
     a06:	11 f4       	brne	.+4      	; 0xa0c <PacketCheck+0x1c>
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	08 95       	ret
     a0c:	80 e0       	ldi	r24, 0x00	; 0
		return 2; //pakiet IP
	}
	
	return 0;
}// koniec funkcji sprawdzj¹cej odebran¹ ramkê
     a0e:	08 95       	ret

00000a10 <MakeEthHeader>:


//Funkcja tworz¹c nag³ówek ramki Ethernet
void MakeEthHeader(uint8_t dest0, uint8_t dest1, uint8_t dest2, uint8_t dest3, uint8_t dest4, uint8_t dest5, uint8_t type0, uint8_t type1)
{
     a10:	af 92       	push	r10
     a12:	cf 92       	push	r12
     a14:	ef 92       	push	r14
     a16:	0f 93       	push	r16
	PacketSize=0;
	
	EthFrame[EthDestMac+0]=dest0;
     a18:	a8 e7       	ldi	r26, 0x78	; 120
     a1a:	b1 e0       	ldi	r27, 0x01	; 1
     a1c:	fd 01       	movw	r30, r26
     a1e:	81 93       	st	Z+, r24
	EthFrame[EthDestMac+1]=dest1;
     a20:	60 83       	st	Z, r22
	EthFrame[EthDestMac+2]=dest2;
     a22:	12 96       	adiw	r26, 0x02	; 2
     a24:	4c 93       	st	X, r20
     a26:	12 97       	sbiw	r26, 0x02	; 2
	EthFrame[EthDestMac+3]=dest3;
     a28:	13 96       	adiw	r26, 0x03	; 3
     a2a:	2c 93       	st	X, r18
     a2c:	13 97       	sbiw	r26, 0x03	; 3
	EthFrame[EthDestMac+4]=dest4;
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	0c 93       	st	X, r16
     a32:	14 97       	sbiw	r26, 0x04	; 4
	EthFrame[EthDestMac+5]=dest5;
     a34:	15 96       	adiw	r26, 0x05	; 5
     a36:	ec 92       	st	X, r14
     a38:	15 97       	sbiw	r26, 0x05	; 5
	
	EthFrame[EthSourceMac+0]=MyMac[0];
     a3a:	86 e5       	ldi	r24, 0x56	; 86
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	fc 01       	movw	r30, r24
     a40:	21 91       	ld	r18, Z+
     a42:	16 96       	adiw	r26, 0x06	; 6
     a44:	2c 93       	st	X, r18
     a46:	16 97       	sbiw	r26, 0x06	; 6
	EthFrame[EthSourceMac+1]=MyMac[1];
     a48:	20 81       	ld	r18, Z
     a4a:	17 96       	adiw	r26, 0x07	; 7
     a4c:	2c 93       	st	X, r18
     a4e:	17 97       	sbiw	r26, 0x07	; 7
	EthFrame[EthSourceMac+2]=MyMac[2];
     a50:	fc 01       	movw	r30, r24
     a52:	22 81       	ldd	r18, Z+2	; 0x02
     a54:	18 96       	adiw	r26, 0x08	; 8
     a56:	2c 93       	st	X, r18
     a58:	18 97       	sbiw	r26, 0x08	; 8
	EthFrame[EthSourceMac+3]=MyMac[3];
     a5a:	23 81       	ldd	r18, Z+3	; 0x03
     a5c:	19 96       	adiw	r26, 0x09	; 9
     a5e:	2c 93       	st	X, r18
     a60:	19 97       	sbiw	r26, 0x09	; 9
	EthFrame[EthSourceMac+4]=MyMac[4];
     a62:	24 81       	ldd	r18, Z+4	; 0x04
     a64:	1a 96       	adiw	r26, 0x0a	; 10
     a66:	2c 93       	st	X, r18
     a68:	1a 97       	sbiw	r26, 0x0a	; 10
	EthFrame[EthSourceMac+5]=MyMac[5];
     a6a:	85 81       	ldd	r24, Z+5	; 0x05
     a6c:	1b 96       	adiw	r26, 0x0b	; 11
     a6e:	8c 93       	st	X, r24
     a70:	1b 97       	sbiw	r26, 0x0b	; 11
	
	EthFrame[EthTypeLen+0]=type0;
     a72:	1c 96       	adiw	r26, 0x0c	; 12
     a74:	cc 92       	st	X, r12
     a76:	1c 97       	sbiw	r26, 0x0c	; 12
	EthFrame[EthTypeLen+1]=type1;
     a78:	1d 96       	adiw	r26, 0x0d	; 13
     a7a:	ac 92       	st	X, r10
	
	PacketSize=PacketSize+14;
     a7c:	8e e0       	ldi	r24, 0x0E	; 14
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	90 93 df 02 	sts	0x02DF, r25
     a84:	80 93 de 02 	sts	0x02DE, r24

}//Koniec funkcji tworz¹cej nag³ówek
     a88:	0f 91       	pop	r16
     a8a:	ef 90       	pop	r14
     a8c:	cf 90       	pop	r12
     a8e:	af 90       	pop	r10
     a90:	08 95       	ret

00000a92 <rs_put>:
#include <avr/io.h>
#include "rs.h"

int rs_put(char znak)
{
     a92:	98 2f       	mov	r25, r24
	//Oczekiwanie a¿ bufor nadajnika jest pusty
	while(!(1<<UDRE0 & UCSR0A)) {}
     a94:	eb e2       	ldi	r30, 0x2B	; 43
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	85 ff       	sbrs	r24, 5
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <rs_put+0x6>
	UDR0 = znak;
     a9e:	9c b9       	out	0x0c, r25	; 12
	return 0;
}
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	08 95       	ret

00000aa6 <rs_get>:

int rs_get(void)
{
	char znak;
	//Oczekiwanie na pojawienie siê danej
	while(!(1<<RXC0 & UCSR0A)) {}
     aa6:	eb e2       	ldi	r30, 0x2B	; 43
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	88 23       	and	r24, r24
     aae:	ec f7       	brge	.-6      	; 0xaaa <rs_get+0x4>
	znak = UDR0;
     ab0:	8c b1       	in	r24, 0x0c	; 12
	return znak;
}
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	08 95       	ret

00000ab6 <ArpCheck>:

}//Koniec funkcji tworz¹cej zapytanie ARP

//Funkcja obs³uguj¹ca wiadomoœæ ARP
uint8_t ArpCheck(void)
{
     ab6:	5f 92       	push	r5
     ab8:	6f 92       	push	r6
     aba:	7f 92       	push	r7
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
	/*//Przypisanie adresu IP do mikroserwera
	ServIp[0]=EthFrame[ArpDestIp1]; ServIp[1]=EthFrame[ArpDestIp2];
	ServIp[2]=EthFrame[ArpDestIp3]; ServIp[3]=EthFrame[ArpDestIp4];*/
	
	//Przypisanie adresu MAC
	ArpReplyMac[0] = EthFrame[EthSourceMac+0];
     ad4:	4d e6       	ldi	r20, 0x6D	; 109
     ad6:	51 e0       	ldi	r21, 0x01	; 1
     ad8:	8e e7       	ldi	r24, 0x7E	; 126
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	dc 01       	movw	r26, r24
     ade:	2d 91       	ld	r18, X+
     ae0:	fa 01       	movw	r30, r20
     ae2:	21 93       	st	Z+, r18
	ArpReplyMac[1] = EthFrame[EthSourceMac+1];
     ae4:	2c 91       	ld	r18, X
     ae6:	20 83       	st	Z, r18
	ArpReplyMac[2] = EthFrame[EthSourceMac+2];
     ae8:	ec 01       	movw	r28, r24
     aea:	2a 81       	ldd	r18, Y+2	; 0x02
     aec:	fa 01       	movw	r30, r20
     aee:	22 83       	std	Z+2, r18	; 0x02
	ArpReplyMac[3] = EthFrame[EthSourceMac+3];
     af0:	2b 81       	ldd	r18, Y+3	; 0x03
     af2:	23 83       	std	Z+3, r18	; 0x03
	ArpReplyMac[4] = EthFrame[EthSourceMac+4];
     af4:	2c 81       	ldd	r18, Y+4	; 0x04
     af6:	24 83       	std	Z+4, r18	; 0x04
	ArpReplyMac[5] = EthFrame[EthSourceMac+5];
     af8:	2d 81       	ldd	r18, Y+5	; 0x05
     afa:	25 83       	std	Z+5, r18	; 0x05
	
	//Przypisanie adresy IP
	ArpReplyIp[0] = EthFrame[ArpSourceIp1];
     afc:	a0 ee       	ldi	r26, 0xE0	; 224
     afe:	b2 e0       	ldi	r27, 0x02	; 2
     b00:	2e 89       	ldd	r18, Y+22	; 0x16
     b02:	fd 01       	movw	r30, r26
     b04:	21 93       	st	Z+, r18
	ArpReplyIp[1] = EthFrame[ArpSourceIp2];
     b06:	2f 89       	ldd	r18, Y+23	; 0x17
     b08:	20 83       	st	Z, r18
	ArpReplyIp[2] = EthFrame[ArpSourceIp3];
     b0a:	28 8d       	ldd	r18, Y+24	; 0x18
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	2c 93       	st	X, r18
     b10:	12 97       	sbiw	r26, 0x02	; 2
	ArpReplyIp[3] = EthFrame[ArpSourceIp4];
     b12:	29 8d       	ldd	r18, Y+25	; 0x19
     b14:	13 96       	adiw	r26, 0x03	; 3
     b16:	2c 93       	st	X, r18
		
	if(EthFrame[ArpMediumType0]==0x00 && EthFrame[ArpMediumType1]==0x01
     b18:	88 85       	ldd	r24, Y+8	; 0x08
     b1a:	88 23       	and	r24, r24
     b1c:	09 f0       	breq	.+2      	; 0xb20 <ArpCheck+0x6a>
     b1e:	55 c1       	rjmp	.+682    	; 0xdca <ArpCheck+0x314>
     b20:	80 91 87 01 	lds	r24, 0x0187
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	09 f0       	breq	.+2      	; 0xb2a <ArpCheck+0x74>
     b28:	50 c1       	rjmp	.+672    	; 0xdca <ArpCheck+0x314>
     b2a:	80 91 88 01 	lds	r24, 0x0188
     b2e:	88 30       	cpi	r24, 0x08	; 8
     b30:	09 f0       	breq	.+2      	; 0xb34 <ArpCheck+0x7e>
     b32:	4b c1       	rjmp	.+662    	; 0xdca <ArpCheck+0x314>
     b34:	80 91 89 01 	lds	r24, 0x0189
     b38:	88 23       	and	r24, r24
     b3a:	09 f0       	breq	.+2      	; 0xb3e <ArpCheck+0x88>
     b3c:	e6 c0       	rjmp	.+460    	; 0xd0a <ArpCheck+0x254>
     b3e:	80 91 8a 01 	lds	r24, 0x018A
     b42:	86 30       	cpi	r24, 0x06	; 6
     b44:	09 f0       	breq	.+2      	; 0xb48 <ArpCheck+0x92>
     b46:	e1 c0       	rjmp	.+450    	; 0xd0a <ArpCheck+0x254>
     b48:	80 91 8b 01 	lds	r24, 0x018B
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	09 f0       	breq	.+2      	; 0xb52 <ArpCheck+0x9c>
     b50:	dc c0       	rjmp	.+440    	; 0xd0a <ArpCheck+0x254>
     b52:	80 91 8c 01 	lds	r24, 0x018C
     b56:	88 23       	and	r24, r24
     b58:	09 f0       	breq	.+2      	; 0xb5c <ArpCheck+0xa6>
     b5a:	d7 c0       	rjmp	.+430    	; 0xd0a <ArpCheck+0x254>
     b5c:	80 91 8d 01 	lds	r24, 0x018D
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f0       	breq	.+2      	; 0xb66 <ArpCheck+0xb0>
     b64:	d2 c0       	rjmp	.+420    	; 0xd0a <ArpCheck+0x254>
     b66:	90 91 9e 01 	lds	r25, 0x019E
     b6a:	80 91 5c 01 	lds	r24, 0x015C
     b6e:	98 17       	cp	r25, r24
     b70:	09 f0       	breq	.+2      	; 0xb74 <ArpCheck+0xbe>
     b72:	cb c0       	rjmp	.+406    	; 0xd0a <ArpCheck+0x254>
     b74:	90 91 9f 01 	lds	r25, 0x019F
     b78:	80 91 5d 01 	lds	r24, 0x015D
     b7c:	98 17       	cp	r25, r24
     b7e:	09 f0       	breq	.+2      	; 0xb82 <ArpCheck+0xcc>
     b80:	c4 c0       	rjmp	.+392    	; 0xd0a <ArpCheck+0x254>
     b82:	90 91 a0 01 	lds	r25, 0x01A0
     b86:	80 91 5e 01 	lds	r24, 0x015E
     b8a:	98 17       	cp	r25, r24
     b8c:	09 f0       	breq	.+2      	; 0xb90 <ArpCheck+0xda>
     b8e:	bd c0       	rjmp	.+378    	; 0xd0a <ArpCheck+0x254>
     b90:	90 91 a1 01 	lds	r25, 0x01A1
     b94:	80 91 5f 01 	lds	r24, 0x015F
     b98:	98 17       	cp	r25, r24
     b9a:	09 f0       	breq	.+2      	; 0xb9e <ArpCheck+0xe8>
     b9c:	b6 c0       	rjmp	.+364    	; 0xd0a <ArpCheck+0x254>
		&& EthFrame[ArpHardLen]==0x06 && EthFrame[ArpLogicLen]==0x04 
		&& EthFrame[ArpOpType0]==0x00 && EthFrame[ArpOpType1]==0x01
		&& EthFrame[ArpDestIp1]==ServIp[0] && EthFrame[ArpDestIp2]==ServIp[1]
		&& EthFrame[ArpDestIp3]==ServIp[2] && EthFrame[ArpDestIp4]==ServIp[3])
	{
		EthFrame[EthDestMac+0]=EthFrame[EthSourceMac+0];
     b9e:	a8 e7       	ldi	r26, 0x78	; 120
     ba0:	b1 e0       	ldi	r27, 0x01	; 1
     ba2:	9d 01       	movw	r18, r26
     ba4:	2a 5f       	subi	r18, 0xFA	; 250
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
     ba8:	e9 01       	movw	r28, r18
     baa:	a8 80       	ld	r10, Y
     bac:	fd 01       	movw	r30, r26
     bae:	a1 92       	st	Z+, r10
		EthFrame[EthDestMac+1]=EthFrame[EthSourceMac+1];
     bb0:	ad 01       	movw	r20, r26
     bb2:	49 5f       	subi	r20, 0xF9	; 249
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	ea 01       	movw	r28, r20
     bb8:	98 80       	ld	r9, Y
     bba:	90 82       	st	Z, r9
		EthFrame[EthDestMac+2]=EthFrame[EthSourceMac+2];
     bbc:	bd 01       	movw	r22, r26
     bbe:	68 5f       	subi	r22, 0xF8	; 248
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	fb 01       	movw	r30, r22
     bc4:	80 80       	ld	r8, Z
     bc6:	12 96       	adiw	r26, 0x02	; 2
     bc8:	8c 92       	st	X, r8
     bca:	12 97       	sbiw	r26, 0x02	; 2
		EthFrame[EthDestMac+3]=EthFrame[EthSourceMac+3];
     bcc:	8d 01       	movw	r16, r26
     bce:	07 5f       	subi	r16, 0xF7	; 247
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	e8 01       	movw	r28, r16
     bd4:	78 80       	ld	r7, Y
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	7c 92       	st	X, r7
     bda:	13 97       	sbiw	r26, 0x03	; 3
		EthFrame[EthDestMac+4]=EthFrame[EthSourceMac+4];
     bdc:	0f 2e       	mov	r0, r31
     bde:	fa e0       	ldi	r31, 0x0A	; 10
     be0:	ef 2e       	mov	r14, r31
     be2:	ff 24       	eor	r15, r15
     be4:	f0 2d       	mov	r31, r0
     be6:	ea 0e       	add	r14, r26
     be8:	fb 1e       	adc	r15, r27
     bea:	f7 01       	movw	r30, r14
     bec:	60 80       	ld	r6, Z
     bee:	14 96       	adiw	r26, 0x04	; 4
     bf0:	6c 92       	st	X, r6
     bf2:	14 97       	sbiw	r26, 0x04	; 4
		EthFrame[EthDestMac+5]=EthFrame[EthSourceMac+5];
     bf4:	0f 2e       	mov	r0, r31
     bf6:	fb e0       	ldi	r31, 0x0B	; 11
     bf8:	cf 2e       	mov	r12, r31
     bfa:	dd 24       	eor	r13, r13
     bfc:	f0 2d       	mov	r31, r0
     bfe:	ca 0e       	add	r12, r26
     c00:	db 1e       	adc	r13, r27
     c02:	e6 01       	movw	r28, r12
     c04:	58 80       	ld	r5, Y
     c06:	15 96       	adiw	r26, 0x05	; 5
     c08:	5c 92       	st	X, r5
     c0a:	15 97       	sbiw	r26, 0x05	; 5
		
		EthFrame[EthSourceMac+0]=MyMac[0];
     c0c:	86 e5       	ldi	r24, 0x56	; 86
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	fc 01       	movw	r30, r24
     c12:	b1 90       	ld	r11, Z+
     c14:	e9 01       	movw	r28, r18
     c16:	b8 82       	st	Y, r11
		EthFrame[EthSourceMac+1]=MyMac[1];
     c18:	20 81       	ld	r18, Z
     c1a:	fa 01       	movw	r30, r20
     c1c:	20 83       	st	Z, r18
		EthFrame[EthSourceMac+2]=MyMac[2];
     c1e:	ec 01       	movw	r28, r24
     c20:	3a 81       	ldd	r19, Y+2	; 0x02
     c22:	fb 01       	movw	r30, r22
     c24:	30 83       	st	Z, r19
		EthFrame[EthSourceMac+3]=MyMac[3];
     c26:	4b 81       	ldd	r20, Y+3	; 0x03
     c28:	e8 01       	movw	r28, r16
     c2a:	48 83       	st	Y, r20
		EthFrame[EthSourceMac+4]=MyMac[4];
     c2c:	fc 01       	movw	r30, r24
     c2e:	54 81       	ldd	r21, Z+4	; 0x04
     c30:	e7 01       	movw	r28, r14
     c32:	58 83       	st	Y, r21
		EthFrame[EthSourceMac+5]=MyMac[5];
     c34:	95 81       	ldd	r25, Z+5	; 0x05
     c36:	f6 01       	movw	r30, r12
     c38:	90 83       	st	Z, r25
		
		EthFrame[ArpOpType0]=0x00;
     c3a:	54 96       	adiw	r26, 0x14	; 20
     c3c:	1c 92       	st	X, r1
     c3e:	54 97       	sbiw	r26, 0x14	; 20
		EthFrame[ArpOpType1]=0x02;
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	55 96       	adiw	r26, 0x15	; 21
     c44:	8c 93       	st	X, r24
     c46:	55 97       	sbiw	r26, 0x15	; 21
		
		EthFrame[ArpSourceMac0]=MyMac[0];
     c48:	56 96       	adiw	r26, 0x16	; 22
     c4a:	bc 92       	st	X, r11
     c4c:	56 97       	sbiw	r26, 0x16	; 22
		EthFrame[ArpSourceMac1]=MyMac[1];
     c4e:	57 96       	adiw	r26, 0x17	; 23
     c50:	2c 93       	st	X, r18
     c52:	57 97       	sbiw	r26, 0x17	; 23
		EthFrame[ArpSourceMac2]=MyMac[2];
     c54:	58 96       	adiw	r26, 0x18	; 24
     c56:	3c 93       	st	X, r19
     c58:	58 97       	sbiw	r26, 0x18	; 24
		EthFrame[ArpSourceMac3]=MyMac[3];
     c5a:	59 96       	adiw	r26, 0x19	; 25
     c5c:	4c 93       	st	X, r20
     c5e:	59 97       	sbiw	r26, 0x19	; 25
		EthFrame[ArpSourceMac4]=MyMac[4];
     c60:	5a 96       	adiw	r26, 0x1a	; 26
     c62:	5c 93       	st	X, r21
     c64:	5a 97       	sbiw	r26, 0x1a	; 26
		EthFrame[ArpSourceMac5]=MyMac[5];
     c66:	5b 96       	adiw	r26, 0x1b	; 27
     c68:	9c 93       	st	X, r25
     c6a:	5b 97       	sbiw	r26, 0x1b	; 27
		
		EthFrame[ArpDestIp1]=EthFrame[ArpSourceIp1];
     c6c:	ad 01       	movw	r20, r26
     c6e:	44 5e       	subi	r20, 0xE4	; 228
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	ea 01       	movw	r28, r20
     c74:	88 81       	ld	r24, Y
     c76:	96 96       	adiw	r26, 0x26	; 38
     c78:	8c 93       	st	X, r24
     c7a:	96 97       	sbiw	r26, 0x26	; 38
		EthFrame[ArpDestIp2]=EthFrame[ArpSourceIp2];
     c7c:	bd 01       	movw	r22, r26
     c7e:	63 5e       	subi	r22, 0xE3	; 227
     c80:	7f 4f       	sbci	r23, 0xFF	; 255
     c82:	fb 01       	movw	r30, r22
     c84:	80 81       	ld	r24, Z
     c86:	97 96       	adiw	r26, 0x27	; 39
     c88:	8c 93       	st	X, r24
     c8a:	97 97       	sbiw	r26, 0x27	; 39
		EthFrame[ArpDestIp3]=EthFrame[ArpSourceIp3];
     c8c:	8d 01       	movw	r16, r26
     c8e:	02 5e       	subi	r16, 0xE2	; 226
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	e8 01       	movw	r28, r16
     c94:	88 81       	ld	r24, Y
     c96:	98 96       	adiw	r26, 0x28	; 40
     c98:	8c 93       	st	X, r24
     c9a:	98 97       	sbiw	r26, 0x28	; 40
		EthFrame[ArpDestIp4]=EthFrame[ArpSourceIp4];
     c9c:	0f 2e       	mov	r0, r31
     c9e:	ff e1       	ldi	r31, 0x1F	; 31
     ca0:	ef 2e       	mov	r14, r31
     ca2:	ff 24       	eor	r15, r15
     ca4:	f0 2d       	mov	r31, r0
     ca6:	ea 0e       	add	r14, r26
     ca8:	fb 1e       	adc	r15, r27
     caa:	f7 01       	movw	r30, r14
     cac:	80 81       	ld	r24, Z
     cae:	99 96       	adiw	r26, 0x29	; 41
     cb0:	8c 93       	st	X, r24
     cb2:	99 97       	sbiw	r26, 0x29	; 41
		
		EthFrame[ArpSourceIp1]=ServIp[0];
     cb4:	8c e5       	ldi	r24, 0x5C	; 92
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	fc 01       	movw	r30, r24
     cba:	21 91       	ld	r18, Z+
     cbc:	ea 01       	movw	r28, r20
     cbe:	28 83       	st	Y, r18
		EthFrame[ArpSourceIp2]=ServIp[1];
     cc0:	20 81       	ld	r18, Z
     cc2:	fb 01       	movw	r30, r22
     cc4:	20 83       	st	Z, r18
		EthFrame[ArpSourceIp3]=ServIp[2];
     cc6:	ec 01       	movw	r28, r24
     cc8:	2a 81       	ldd	r18, Y+2	; 0x02
     cca:	f8 01       	movw	r30, r16
     ccc:	20 83       	st	Z, r18
		EthFrame[ArpSourceIp4]=ServIp[3];
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	e7 01       	movw	r28, r14
     cd2:	88 83       	st	Y, r24
		
		EthFrame[ArpDestMac0]=EthFrame[EthDestMac+0];
     cd4:	90 96       	adiw	r26, 0x20	; 32
     cd6:	ac 92       	st	X, r10
     cd8:	90 97       	sbiw	r26, 0x20	; 32
		EthFrame[ArpDestMac1]=EthFrame[EthDestMac+1];
     cda:	91 96       	adiw	r26, 0x21	; 33
     cdc:	9c 92       	st	X, r9
     cde:	91 97       	sbiw	r26, 0x21	; 33
		EthFrame[ArpDestMac2]=EthFrame[EthDestMac+2];
     ce0:	92 96       	adiw	r26, 0x22	; 34
     ce2:	8c 92       	st	X, r8
     ce4:	92 97       	sbiw	r26, 0x22	; 34
		EthFrame[ArpDestMac3]=EthFrame[EthDestMac+3];
     ce6:	93 96       	adiw	r26, 0x23	; 35
     ce8:	7c 92       	st	X, r7
     cea:	93 97       	sbiw	r26, 0x23	; 35
		EthFrame[ArpDestMac4]=EthFrame[EthDestMac+4];
     cec:	94 96       	adiw	r26, 0x24	; 36
     cee:	6c 92       	st	X, r6
     cf0:	94 97       	sbiw	r26, 0x24	; 36
		EthFrame[ArpDestMac5]=EthFrame[EthDestMac+5];
     cf2:	95 96       	adiw	r26, 0x25	; 37
     cf4:	5c 92       	st	X, r5
		
		PacketSize=14+28;
     cf6:	8a e2       	ldi	r24, 0x2A	; 42
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	90 93 df 02 	sts	0x02DF, r25
     cfe:	80 93 de 02 	sts	0x02DE, r24
		RTLsend_packet();
     d02:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	61 c0       	rjmp	.+194    	; 0xdcc <ArpCheck+0x316>
		return 2; //Poprawny ARP
	}
	
	if(EthFrame[ArpMediumType0]==0x00 && EthFrame[ArpMediumType1]==0x01
     d0a:	80 91 89 01 	lds	r24, 0x0189
     d0e:	88 23       	and	r24, r24
     d10:	09 f0       	breq	.+2      	; 0xd14 <ArpCheck+0x25e>
     d12:	5b c0       	rjmp	.+182    	; 0xdca <ArpCheck+0x314>
     d14:	80 91 8a 01 	lds	r24, 0x018A
     d18:	86 30       	cpi	r24, 0x06	; 6
     d1a:	09 f0       	breq	.+2      	; 0xd1e <ArpCheck+0x268>
     d1c:	56 c0       	rjmp	.+172    	; 0xdca <ArpCheck+0x314>
     d1e:	80 91 8b 01 	lds	r24, 0x018B
     d22:	84 30       	cpi	r24, 0x04	; 4
     d24:	09 f0       	breq	.+2      	; 0xd28 <ArpCheck+0x272>
     d26:	51 c0       	rjmp	.+162    	; 0xdca <ArpCheck+0x314>
     d28:	80 91 8c 01 	lds	r24, 0x018C
     d2c:	88 23       	and	r24, r24
     d2e:	09 f0       	breq	.+2      	; 0xd32 <ArpCheck+0x27c>
     d30:	4c c0       	rjmp	.+152    	; 0xdca <ArpCheck+0x314>
     d32:	80 91 8d 01 	lds	r24, 0x018D
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	09 f0       	breq	.+2      	; 0xd3c <ArpCheck+0x286>
     d3a:	47 c0       	rjmp	.+142    	; 0xdca <ArpCheck+0x314>
     d3c:	90 91 9e 01 	lds	r25, 0x019E
     d40:	80 91 5c 01 	lds	r24, 0x015C
     d44:	98 17       	cp	r25, r24
     d46:	09 f0       	breq	.+2      	; 0xd4a <ArpCheck+0x294>
     d48:	40 c0       	rjmp	.+128    	; 0xdca <ArpCheck+0x314>
     d4a:	90 91 9f 01 	lds	r25, 0x019F
     d4e:	80 91 5d 01 	lds	r24, 0x015D
     d52:	98 17       	cp	r25, r24
     d54:	d1 f5       	brne	.+116    	; 0xdca <ArpCheck+0x314>
     d56:	90 91 a0 01 	lds	r25, 0x01A0
     d5a:	80 91 5e 01 	lds	r24, 0x015E
     d5e:	98 17       	cp	r25, r24
     d60:	a1 f5       	brne	.+104    	; 0xdca <ArpCheck+0x314>
     d62:	90 91 a1 01 	lds	r25, 0x01A1
     d66:	80 91 5f 01 	lds	r24, 0x015F
     d6a:	98 17       	cp	r25, r24
     d6c:	71 f5       	brne	.+92     	; 0xdca <ArpCheck+0x314>
		&& EthFrame[ArpHardLen]==0x06 && EthFrame[ArpLogicLen]==0x04 
		&& EthFrame[ArpOpType0]==0x00 && EthFrame[ArpOpType1]==0x02
		&& EthFrame[ArpDestIp1]==ServIp[0] && EthFrame[ArpDestIp2]==ServIp[1]
		&& EthFrame[ArpDestIp3]==ServIp[2] && EthFrame[ArpDestIp4]==ServIp[3])
	{
		ArpReplyMac[0]=EthFrame[EthSourceMac+0];
     d6e:	4d e6       	ldi	r20, 0x6D	; 109
     d70:	51 e0       	ldi	r21, 0x01	; 1
     d72:	8e e7       	ldi	r24, 0x7E	; 126
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	dc 01       	movw	r26, r24
     d78:	2d 91       	ld	r18, X+
     d7a:	fa 01       	movw	r30, r20
     d7c:	21 93       	st	Z+, r18
		ArpReplyMac[1]=EthFrame[EthSourceMac+1];
     d7e:	2c 91       	ld	r18, X
     d80:	20 83       	st	Z, r18
		ArpReplyMac[2]=EthFrame[EthSourceMac+2];
     d82:	fc 01       	movw	r30, r24
     d84:	22 81       	ldd	r18, Z+2	; 0x02
     d86:	ea 01       	movw	r28, r20
     d88:	2a 83       	std	Y+2, r18	; 0x02
		ArpReplyMac[3]=EthFrame[EthSourceMac+3];
     d8a:	23 81       	ldd	r18, Z+3	; 0x03
     d8c:	2b 83       	std	Y+3, r18	; 0x03
		ArpReplyMac[4]=EthFrame[EthSourceMac+4];
     d8e:	24 81       	ldd	r18, Z+4	; 0x04
     d90:	2c 83       	std	Y+4, r18	; 0x04
		ArpReplyMac[5]=EthFrame[EthSourceMac+5];
     d92:	25 81       	ldd	r18, Z+5	; 0x05
     d94:	2d 83       	std	Y+5, r18	; 0x05
		
		ArpReplyIp[0]=EthFrame[ArpSourceIp1];
     d96:	a0 ee       	ldi	r26, 0xE0	; 224
     d98:	b2 e0       	ldi	r27, 0x02	; 2
     d9a:	26 89       	ldd	r18, Z+22	; 0x16
     d9c:	fd 01       	movw	r30, r26
     d9e:	21 93       	st	Z+, r18
		ArpReplyIp[1]=EthFrame[ArpSourceIp2];
     da0:	ec 01       	movw	r28, r24
     da2:	2f 89       	ldd	r18, Y+23	; 0x17
     da4:	20 83       	st	Z, r18
		ArpReplyIp[2]=EthFrame[ArpSourceIp3];
     da6:	28 8d       	ldd	r18, Y+24	; 0x18
     da8:	12 96       	adiw	r26, 0x02	; 2
     daa:	2c 93       	st	X, r18
     dac:	12 97       	sbiw	r26, 0x02	; 2
		ArpReplyIp[3]=EthFrame[ArpSourceIp4];
     dae:	89 8d       	ldd	r24, Y+25	; 0x19
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	8c 93       	st	X, r24
		
		ArpReply=1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 93 73 01 	sts	0x0173, r24
		ArpCount=60;
     dba:	8c e3       	ldi	r24, 0x3C	; 60
     dbc:	80 93 67 01 	sts	0x0167, r24
		pingTimeout=100;
     dc0:	84 e6       	ldi	r24, 0x64	; 100
     dc2:	80 93 db 02 	sts	0x02DB, r24
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <ArpCheck+0x316>
     dca:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 1; //Niepoprawny ARP
}
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	bf 90       	pop	r11
     dde:	af 90       	pop	r10
     de0:	9f 90       	pop	r9
     de2:	8f 90       	pop	r8
     de4:	7f 90       	pop	r7
     de6:	6f 90       	pop	r6
     de8:	5f 90       	pop	r5
     dea:	08 95       	ret

00000dec <MakeArpRequest>:
#include "arp_protocol.h"
#include "RTL8019as.h"

//Funkcja tworz¹ca zapytanie ARP
void MakeArpRequest(uint8_t destrIp1, uint8_t destrIp2, uint8_t destrIp3, uint8_t destrIp4)
{
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	18 2f       	mov	r17, r24
     dfe:	f6 2e       	mov	r15, r22
     e00:	d4 2e       	mov	r13, r20
     e02:	b2 2e       	mov	r11, r18
	MakeEthHeader(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x06);
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	6f ef       	ldi	r22, 0xFF	; 255
     e08:	4f ef       	ldi	r20, 0xFF	; 255
     e0a:	2f ef       	ldi	r18, 0xFF	; 255
     e0c:	0f ef       	ldi	r16, 0xFF	; 255
     e0e:	ee 24       	eor	r14, r14
     e10:	ea 94       	dec	r14
     e12:	cc 24       	eor	r12, r12
     e14:	68 94       	set
     e16:	c3 f8       	bld	r12, 3
     e18:	0f 2e       	mov	r0, r31
     e1a:	f6 e0       	ldi	r31, 0x06	; 6
     e1c:	af 2e       	mov	r10, r31
     e1e:	f0 2d       	mov	r31, r0
     e20:	0e 94 08 05 	call	0xa10	; 0xa10 <MakeEthHeader>
	
	EthFrame[ArpMediumType0]=0x00;
     e24:	a6 e8       	ldi	r26, 0x86	; 134
     e26:	b1 e0       	ldi	r27, 0x01	; 1
     e28:	fd 01       	movw	r30, r26
     e2a:	11 92       	st	Z+, r1
	EthFrame[ArpMediumType1]=0x01;
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	90 83       	st	Z, r25
	
	EthFrame[ArpProtocolType0]=0x08;
     e30:	88 e0       	ldi	r24, 0x08	; 8
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	8c 93       	st	X, r24
     e36:	12 97       	sbiw	r26, 0x02	; 2
	EthFrame[ArpProtocolType1]=0x00;
     e38:	13 96       	adiw	r26, 0x03	; 3
     e3a:	1c 92       	st	X, r1
     e3c:	13 97       	sbiw	r26, 0x03	; 3
	
	EthFrame[ArpHardLen]=0x06;
     e3e:	86 e0       	ldi	r24, 0x06	; 6
     e40:	14 96       	adiw	r26, 0x04	; 4
     e42:	8c 93       	st	X, r24
     e44:	14 97       	sbiw	r26, 0x04	; 4
	
	EthFrame[ArpLogicLen]=0x04;
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	15 96       	adiw	r26, 0x05	; 5
     e4a:	8c 93       	st	X, r24
     e4c:	15 97       	sbiw	r26, 0x05	; 5
	
	EthFrame[ArpOpType0]=0x00;
     e4e:	16 96       	adiw	r26, 0x06	; 6
     e50:	1c 92       	st	X, r1
     e52:	16 97       	sbiw	r26, 0x06	; 6
	EthFrame[ArpOpType1]=0x01;
     e54:	17 96       	adiw	r26, 0x07	; 7
     e56:	9c 93       	st	X, r25
     e58:	17 97       	sbiw	r26, 0x07	; 7
	
	EthFrame[ArpSourceMac0]=MyMac[0];
     e5a:	86 e5       	ldi	r24, 0x56	; 86
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	fc 01       	movw	r30, r24
     e60:	21 91       	ld	r18, Z+
     e62:	18 96       	adiw	r26, 0x08	; 8
     e64:	2c 93       	st	X, r18
     e66:	18 97       	sbiw	r26, 0x08	; 8
	EthFrame[ArpSourceMac1]=MyMac[1];
     e68:	20 81       	ld	r18, Z
     e6a:	19 96       	adiw	r26, 0x09	; 9
     e6c:	2c 93       	st	X, r18
     e6e:	19 97       	sbiw	r26, 0x09	; 9
	EthFrame[ArpSourceMac2]=MyMac[2];
     e70:	fc 01       	movw	r30, r24
     e72:	22 81       	ldd	r18, Z+2	; 0x02
     e74:	1a 96       	adiw	r26, 0x0a	; 10
     e76:	2c 93       	st	X, r18
     e78:	1a 97       	sbiw	r26, 0x0a	; 10
	EthFrame[ArpSourceMac3]=MyMac[3];
     e7a:	23 81       	ldd	r18, Z+3	; 0x03
     e7c:	1b 96       	adiw	r26, 0x0b	; 11
     e7e:	2c 93       	st	X, r18
     e80:	1b 97       	sbiw	r26, 0x0b	; 11
	EthFrame[ArpSourceMac4]=MyMac[4];
     e82:	24 81       	ldd	r18, Z+4	; 0x04
     e84:	1c 96       	adiw	r26, 0x0c	; 12
     e86:	2c 93       	st	X, r18
     e88:	1c 97       	sbiw	r26, 0x0c	; 12
	EthFrame[ArpSourceMac5]=MyMac[5];
     e8a:	85 81       	ldd	r24, Z+5	; 0x05
     e8c:	1d 96       	adiw	r26, 0x0d	; 13
     e8e:	8c 93       	st	X, r24
     e90:	1d 97       	sbiw	r26, 0x0d	; 13
	
	EthFrame[ArpSourceIp1]=ServIp[0];
     e92:	8c e5       	ldi	r24, 0x5C	; 92
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	fc 01       	movw	r30, r24
     e98:	21 91       	ld	r18, Z+
     e9a:	1e 96       	adiw	r26, 0x0e	; 14
     e9c:	2c 93       	st	X, r18
     e9e:	1e 97       	sbiw	r26, 0x0e	; 14
	EthFrame[ArpSourceIp2]=ServIp[1];
     ea0:	20 81       	ld	r18, Z
     ea2:	1f 96       	adiw	r26, 0x0f	; 15
     ea4:	2c 93       	st	X, r18
     ea6:	1f 97       	sbiw	r26, 0x0f	; 15
	EthFrame[ArpSourceIp3]=ServIp[2];
     ea8:	fc 01       	movw	r30, r24
     eaa:	22 81       	ldd	r18, Z+2	; 0x02
     eac:	50 96       	adiw	r26, 0x10	; 16
     eae:	2c 93       	st	X, r18
     eb0:	50 97       	sbiw	r26, 0x10	; 16
	EthFrame[ArpSourceIp4]=ServIp[3];
     eb2:	83 81       	ldd	r24, Z+3	; 0x03
     eb4:	51 96       	adiw	r26, 0x11	; 17
     eb6:	8c 93       	st	X, r24
     eb8:	51 97       	sbiw	r26, 0x11	; 17
	
	EthFrame[ArpDestMac0]=0x00;
     eba:	52 96       	adiw	r26, 0x12	; 18
     ebc:	1c 92       	st	X, r1
     ebe:	52 97       	sbiw	r26, 0x12	; 18
	EthFrame[ArpDestMac1]=0x00;
     ec0:	53 96       	adiw	r26, 0x13	; 19
     ec2:	1c 92       	st	X, r1
     ec4:	53 97       	sbiw	r26, 0x13	; 19
	EthFrame[ArpDestMac2]=0x00;
     ec6:	54 96       	adiw	r26, 0x14	; 20
     ec8:	1c 92       	st	X, r1
     eca:	54 97       	sbiw	r26, 0x14	; 20
	EthFrame[ArpDestMac3]=0x00;
     ecc:	55 96       	adiw	r26, 0x15	; 21
     ece:	1c 92       	st	X, r1
     ed0:	55 97       	sbiw	r26, 0x15	; 21
	EthFrame[ArpDestMac4]=0x00;
     ed2:	56 96       	adiw	r26, 0x16	; 22
     ed4:	1c 92       	st	X, r1
     ed6:	56 97       	sbiw	r26, 0x16	; 22
	EthFrame[ArpDestMac5]=0x00;
     ed8:	57 96       	adiw	r26, 0x17	; 23
     eda:	1c 92       	st	X, r1
     edc:	57 97       	sbiw	r26, 0x17	; 23
	
	EthFrame[ArpDestIp1]=destrIp1;
     ede:	58 96       	adiw	r26, 0x18	; 24
     ee0:	1c 93       	st	X, r17
     ee2:	58 97       	sbiw	r26, 0x18	; 24
	EthFrame[ArpDestIp2]=destrIp2;
     ee4:	59 96       	adiw	r26, 0x19	; 25
     ee6:	fc 92       	st	X, r15
     ee8:	59 97       	sbiw	r26, 0x19	; 25
	EthFrame[ArpDestIp3]=destrIp3;
     eea:	5a 96       	adiw	r26, 0x1a	; 26
     eec:	dc 92       	st	X, r13
     eee:	5a 97       	sbiw	r26, 0x1a	; 26
	EthFrame[ArpDestIp4]=destrIp4;
     ef0:	5b 96       	adiw	r26, 0x1b	; 27
     ef2:	bc 92       	st	X, r11
	
	PacketSize=PacketSize+28;
     ef4:	80 91 de 02 	lds	r24, 0x02DE
     ef8:	90 91 df 02 	lds	r25, 0x02DF
     efc:	4c 96       	adiw	r24, 0x1c	; 28
     efe:	90 93 df 02 	sts	0x02DF, r25
     f02:	80 93 de 02 	sts	0x02DE, r24

}//Koniec funkcji tworz¹cej zapytanie ARP
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	bf 90       	pop	r11
     f14:	af 90       	pop	r10
     f16:	08 95       	ret

00000f18 <IpCheck>:
#include "RTL8019as.h"

//Funkcja sprawdzaj¹ca datagram IP (ICMP czy TCP)
uint8_t IpCheck(void)
{
	if(EthFrame[IpProtocol]==0x01) return 3; 	//Je¿eli ICMP
     f18:	80 91 8f 01 	lds	r24, 0x018F
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	11 f4       	brne	.+4      	; 0xf24 <IpCheck+0xc>
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	08 95       	ret
	if(EthFrame[IpProtocol]==0x06) return 4; 	//Je¿eli TCP
     f24:	86 30       	cpi	r24, 0x06	; 6
     f26:	11 f0       	breq	.+4      	; 0xf2c <IpCheck+0x14>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	08 95       	ret
     f2c:	84 e0       	ldi	r24, 0x04	; 4
	
	return 0;
}//koniec funkcji sprawdzaj¹cej 
     f2e:	08 95       	ret

00000f30 <IpCheckSumCalc>:

//Funkcja obliczj¹ca sumê kontroln¹
uint16_t IpCheckSumCalc(void)
{
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
	EthFrame[IpChecksum0]=0x00;
     f38:	80 e9       	ldi	r24, 0x90	; 144
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	fc 01       	movw	r30, r24
     f3e:	11 92       	st	Z+, r1
	EthFrame[IpChecksum1]=0x00;
     f40:	10 82       	st	Z, r1
     f42:	fc 01       	movw	r30, r24
     f44:	3a 97       	sbiw	r30, 0x0a	; 10
     f46:	ee 24       	eor	r14, r14
     f48:	ff 24       	eor	r15, r15
     f4a:	87 01       	movw	r16, r14
	
	unsigned int a;
	unsigned int i;
	unsigned long sum=0;
	
	for(i=0; i<20; i=i+2)
     f4c:	4a e9       	ldi	r20, 0x9A	; 154
     f4e:	51 e0       	ldi	r21, 0x01	; 1
	{
		a=((EthFrame[EthData+i]<<8)&0xFF00)+(EthFrame[EthData+i+1]&0xFF);
		sum=sum+(unsigned long)a;
     f50:	30 81       	ld	r19, Z
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	b9 01       	movw	r22, r18
     f58:	68 0f       	add	r22, r24
     f5a:	71 1d       	adc	r23, r1
     f5c:	cb 01       	movw	r24, r22
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 0e       	add	r14, r24
     f64:	f9 1e       	adc	r15, r25
     f66:	0a 1f       	adc	r16, r26
     f68:	1b 1f       	adc	r17, r27
     f6a:	32 96       	adiw	r30, 0x02	; 2
	
	unsigned int a;
	unsigned int i;
	unsigned long sum=0;
	
	for(i=0; i<20; i=i+2)
     f6c:	e4 17       	cp	r30, r20
     f6e:	f5 07       	cpc	r31, r21
     f70:	79 f7       	brne	.-34     	; 0xf50 <IpCheckSumCalc+0x20>
	{
		a=((EthFrame[EthData+i]<<8)&0xFF00)+(EthFrame[EthData+i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	while(sum>>16)
     f72:	98 01       	movw	r18, r16
     f74:	44 27       	eor	r20, r20
     f76:	55 27       	eor	r21, r21
     f78:	21 15       	cp	r18, r1
     f7a:	31 05       	cpc	r19, r1
     f7c:	41 05       	cpc	r20, r1
     f7e:	51 05       	cpc	r21, r1
     f80:	91 f0       	breq	.+36     	; 0xfa6 <IpCheckSumCalc+0x76>
	{
		sum=(sum&0xFFFF)+(sum>>16);
     f82:	d8 01       	movw	r26, r16
     f84:	c7 01       	movw	r24, r14
     f86:	a0 70       	andi	r26, 0x00	; 0
     f88:	b0 70       	andi	r27, 0x00	; 0
     f8a:	7c 01       	movw	r14, r24
     f8c:	8d 01       	movw	r16, r26
     f8e:	e2 0e       	add	r14, r18
     f90:	f3 1e       	adc	r15, r19
     f92:	04 1f       	adc	r16, r20
     f94:	15 1f       	adc	r17, r21
	{
		a=((EthFrame[EthData+i]<<8)&0xFF00)+(EthFrame[EthData+i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	while(sum>>16)
     f96:	98 01       	movw	r18, r16
     f98:	44 27       	eor	r20, r20
     f9a:	55 27       	eor	r21, r21
     f9c:	21 15       	cp	r18, r1
     f9e:	31 05       	cpc	r19, r1
     fa0:	41 05       	cpc	r20, r1
     fa2:	51 05       	cpc	r21, r1
     fa4:	71 f7       	brne	.-36     	; 0xf82 <IpCheckSumCalc+0x52>
     fa6:	a8 01       	movw	r20, r16
     fa8:	97 01       	movw	r18, r14
     faa:	20 95       	com	r18
     fac:	30 95       	com	r19
     fae:	40 95       	com	r20
     fb0:	50 95       	com	r21
	
	sum=~sum;
	
	return ((unsigned int)sum);

}//Koniec funkcji obliczaj¹cej sumê kontroln¹ nag³ówka ramki IP
     fb2:	82 2f       	mov	r24, r18
     fb4:	93 2f       	mov	r25, r19
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	08 95       	ret

00000fc0 <MakeIpHeader>:

//Funkcja tworz¹ca nag³ówek datagramu IP
void MakeIpHeader(uint8_t protocol, uint16_t data_lenght) //data_lenght d³ugoœæ danych, liczona w bajtach 
{
     fc0:	8f 92       	push	r8
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	cf 92       	push	r12
     fc8:	ef 92       	push	r14
     fca:	ff 92       	push	r15
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	f8 2e       	mov	r15, r24
     fd6:	4b 01       	movw	r8, r22
	MakeEthHeader(ArpReplyMac[0], ArpReplyMac[1], ArpReplyMac[2], ArpReplyMac[3], ArpReplyMac[4], ArpReplyMac[5], 0x08, 0x00);
     fd8:	ed e6       	ldi	r30, 0x6D	; 109
     fda:	f1 e0       	ldi	r31, 0x01	; 1
     fdc:	80 81       	ld	r24, Z
     fde:	61 81       	ldd	r22, Z+1	; 0x01
     fe0:	42 81       	ldd	r20, Z+2	; 0x02
     fe2:	23 81       	ldd	r18, Z+3	; 0x03
     fe4:	04 81       	ldd	r16, Z+4	; 0x04
     fe6:	e5 80       	ldd	r14, Z+5	; 0x05
     fe8:	cc 24       	eor	r12, r12
     fea:	68 94       	set
     fec:	c3 f8       	bld	r12, 3
     fee:	aa 24       	eor	r10, r10
     ff0:	0e 94 08 05 	call	0xa10	; 0xa10 <MakeEthHeader>
	
	EthFrame[IpVIHL] = 0x45;
     ff4:	06 e8       	ldi	r16, 0x86	; 134
     ff6:	11 e0       	ldi	r17, 0x01	; 1
     ff8:	f8 01       	movw	r30, r16
     ffa:	85 e4       	ldi	r24, 0x45	; 69
     ffc:	81 93       	st	Z+, r24
	EthFrame[IpTypeofService] = 0x00;
     ffe:	10 82       	st	Z, r1
	EthFrame[IpTotalLength0] = (uint8_t)(8>>(data_lenght+20));
    1000:	94 01       	movw	r18, r8
    1002:	2c 5e       	subi	r18, 0xEC	; 236
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	88 e0       	ldi	r24, 0x08	; 8
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <MakeIpHeader+0x50>
    100c:	95 95       	asr	r25
    100e:	87 95       	ror	r24
    1010:	2a 95       	dec	r18
    1012:	e2 f7       	brpl	.-8      	; 0x100c <MakeIpHeader+0x4c>
    1014:	e8 01       	movw	r28, r16
    1016:	8a 83       	std	Y+2, r24	; 0x02
	EthFrame[IpTotalLength1] = (uint8_t)(data_lenght+20);
    1018:	e4 e1       	ldi	r30, 0x14	; 20
    101a:	8e 0e       	add	r8, r30
    101c:	8b 82       	std	Y+3, r8	; 0x03
	EthFrame[IpIdenti0] = 0xaa;
    101e:	8a ea       	ldi	r24, 0xAA	; 170
    1020:	8c 83       	std	Y+4, r24	; 0x04
	EthFrame[IpIdenti1] = 0x00;
    1022:	1d 82       	std	Y+5, r1	; 0x05
	EthFrame[IpFlaTotalOff0] = 0x40;
    1024:	80 e4       	ldi	r24, 0x40	; 64
    1026:	8e 83       	std	Y+6, r24	; 0x06
	EthFrame[IpFlaTotalOff1] = 0x00;
    1028:	1f 82       	std	Y+7, r1	; 0x07
	EthFrame[IpTimeToLive] = 0x40;
    102a:	88 87       	std	Y+8, r24	; 0x08
	EthFrame[IpProtocol] = protocol;
    102c:	f9 86       	std	Y+9, r15	; 0x09
	
	EthFrame[IpSourceIp1] = ServIp[0];
    102e:	ac e5       	ldi	r26, 0x5C	; 92
    1030:	b1 e0       	ldi	r27, 0x01	; 1
    1032:	fd 01       	movw	r30, r26
    1034:	81 91       	ld	r24, Z+
    1036:	8c 87       	std	Y+12, r24	; 0x0c
	EthFrame[IpSourceIp2] = ServIp[1];
    1038:	80 81       	ld	r24, Z
    103a:	8d 87       	std	Y+13, r24	; 0x0d
	EthFrame[IpSourceIp3] = ServIp[2];
    103c:	12 96       	adiw	r26, 0x02	; 2
    103e:	8c 91       	ld	r24, X
    1040:	12 97       	sbiw	r26, 0x02	; 2
    1042:	8e 87       	std	Y+14, r24	; 0x0e
	EthFrame[IpSourceIp4] = ServIp[3];
    1044:	13 96       	adiw	r26, 0x03	; 3
    1046:	8c 91       	ld	r24, X
    1048:	8f 87       	std	Y+15, r24	; 0x0f
	
	EthFrame[IpDestIp1] = ArpReplyIp[0];
    104a:	a0 ee       	ldi	r26, 0xE0	; 224
    104c:	b2 e0       	ldi	r27, 0x02	; 2
    104e:	fd 01       	movw	r30, r26
    1050:	81 91       	ld	r24, Z+
    1052:	88 8b       	std	Y+16, r24	; 0x10
	EthFrame[IpDestIp2] = ArpReplyIp[1];
    1054:	80 81       	ld	r24, Z
    1056:	89 8b       	std	Y+17, r24	; 0x11
	EthFrame[IpDestIp3] = ArpReplyIp[2];
    1058:	12 96       	adiw	r26, 0x02	; 2
    105a:	8c 91       	ld	r24, X
    105c:	12 97       	sbiw	r26, 0x02	; 2
    105e:	8a 8b       	std	Y+18, r24	; 0x12
	EthFrame[IpDestIp4] = ArpReplyIp[3];
    1060:	13 96       	adiw	r26, 0x03	; 3
    1062:	8c 91       	ld	r24, X
    1064:	8b 8b       	std	Y+19, r24	; 0x13
	
	uint16_t CheckSum = IpCheckSumCalc();
    1066:	0e 94 98 07 	call	0xf30	; 0xf30 <IpCheckSumCalc>
	EthFrame[IpChecksum0] = (uint8_t)((CheckSum)>>8);
    106a:	9a 87       	std	Y+10, r25	; 0x0a
	EthFrame[IpChecksum1] = (uint8_t)(CheckSum);
    106c:	8b 87       	std	Y+11, r24	; 0x0b
	
	//PacketSize += 20;

}//Koniec funkcju tworz¹cej nag³owek IP
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	cf 90       	pop	r12
    107c:	af 90       	pop	r10
    107e:	9f 90       	pop	r9
    1080:	8f 90       	pop	r8
    1082:	08 95       	ret

00001084 <EchoReply>:
#include "RTL8019as.h"

//Funkcja odpowiadaj¹ca na ¿¹danie echa 
void EchoReply(void)
{
	if(EthFrame[ImcpType]==0x08 && EthFrame[ImcpCode]==0x00) {
    1084:	80 91 9a 01 	lds	r24, 0x019A
    1088:	88 30       	cpi	r24, 0x08	; 8
    108a:	81 f5       	brne	.+96     	; 0x10ec <EchoReply+0x68>
    108c:	80 91 9b 01 	lds	r24, 0x019B
    1090:	88 23       	and	r24, r24
    1092:	61 f5       	brne	.+88     	; 0x10ec <EchoReply+0x68>
		
		MakeIpHeader(0x01,0x12);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	62 e1       	ldi	r22, 0x12	; 18
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
		
		uint16_t CheckSum = (8<<EthFrame[Imcpsum0]);
    109e:	ec e9       	ldi	r30, 0x9C	; 156
    10a0:	f1 e0       	ldi	r31, 0x01	; 1
    10a2:	88 e0       	ldi	r24, 0x08	; 8
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	01 90       	ld	r0, Z+
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <EchoReply+0x2a>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <EchoReply+0x26>
		CheckSum+=EthFrame[Imcpsum1];
    10b2:	20 81       	ld	r18, Z
    10b4:	ac 01       	movw	r20, r24
    10b6:	42 0f       	add	r20, r18
    10b8:	51 1d       	adc	r21, r1
		
		EthFrame[ImcpCode]=0x01;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 9b 01 	sts	0x019B, r24
		
		if(CheckSum > 0x7FFF) {
    10c0:	55 23       	and	r21, r21
    10c2:	2c f4       	brge	.+10     	; 0x10ce <EchoReply+0x4a>
			CheckSum = (uint16_t)((CheckSum+0x8000)|0x01);
    10c4:	ca 01       	movw	r24, r20
    10c6:	80 50       	subi	r24, 0x00	; 0
    10c8:	90 48       	sbci	r25, 0x80	; 128
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <EchoReply+0x50>
		} else {
			CheckSum = CheckSum+0x8000;
    10ce:	ca 01       	movw	r24, r20
    10d0:	80 50       	subi	r24, 0x00	; 0
    10d2:	90 48       	sbci	r25, 0x80	; 128
		}
		
		EthFrame[Imcpsum0]=(uint8_t)((CheckSum)>>8);
    10d4:	ec e9       	ldi	r30, 0x9C	; 156
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	91 93       	st	Z+, r25
		EthFrame[Imcpsum1]=(uint8_t)(CheckSum);
    10da:	80 83       	st	Z, r24
		
		PacketSize = 14+20+12;
    10dc:	8e e2       	ldi	r24, 0x2E	; 46
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	90 93 df 02 	sts	0x02DF, r25
    10e4:	80 93 de 02 	sts	0x02DE, r24
		RTLsend_packet();
    10e8:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
    10ec:	08 95       	ret

000010ee <TcpCheckSumCalc>:
#include "RTL8019as.h"


//Funkcja obliczj¹ca sumê kontroln¹
uint16_t TcpCheckSumCalc(uint16_t dane)
{
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	2c 97       	sbiw	r28, 0x0c	; 12
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
		
	EthFrame[TcpCheckSum0]=0x00;
    110a:	ea ea       	ldi	r30, 0xAA	; 170
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	11 92       	st	Z+, r1
	EthFrame[TcpCheckSum1]=0x00;
    1110:	10 82       	st	Z, r1
	
	//Sumowanie pseudo-nag³ówka Ip
	uint8_t Data[12];
	
	Data[0] = ServIp[0];
    1112:	ac e5       	ldi	r26, 0x5C	; 92
    1114:	b1 e0       	ldi	r27, 0x01	; 1
    1116:	fd 01       	movw	r30, r26
    1118:	21 91       	ld	r18, Z+
    111a:	29 83       	std	Y+1, r18	; 0x01
	Data[1] = ServIp[1];
    111c:	20 81       	ld	r18, Z
    111e:	2a 83       	std	Y+2, r18	; 0x02
	Data[2] = ServIp[2];
    1120:	12 96       	adiw	r26, 0x02	; 2
    1122:	2c 91       	ld	r18, X
    1124:	12 97       	sbiw	r26, 0x02	; 2
    1126:	2b 83       	std	Y+3, r18	; 0x03
	Data[3] = ServIp[3];
    1128:	13 96       	adiw	r26, 0x03	; 3
    112a:	2c 91       	ld	r18, X
    112c:	2c 83       	std	Y+4, r18	; 0x04
	
	Data[4] = ArpReplyIp[0];
    112e:	a0 ee       	ldi	r26, 0xE0	; 224
    1130:	b2 e0       	ldi	r27, 0x02	; 2
    1132:	fd 01       	movw	r30, r26
    1134:	21 91       	ld	r18, Z+
    1136:	2d 83       	std	Y+5, r18	; 0x05
	Data[5] = ArpReplyIp[1];
    1138:	20 81       	ld	r18, Z
    113a:	2e 83       	std	Y+6, r18	; 0x06
	Data[6] = ArpReplyIp[2];
    113c:	12 96       	adiw	r26, 0x02	; 2
    113e:	2c 91       	ld	r18, X
    1140:	12 97       	sbiw	r26, 0x02	; 2
    1142:	2f 83       	std	Y+7, r18	; 0x07
	Data[7] = ArpReplyIp[3];
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	2c 91       	ld	r18, X
    1148:	28 87       	std	Y+8, r18	; 0x08
	
	Data[8] = 0x00;
    114a:	19 86       	std	Y+9, r1	; 0x09
	Data[9] = 0x06;
    114c:	26 e0       	ldi	r18, 0x06	; 6
    114e:	2a 87       	std	Y+10, r18	; 0x0a
	
	Data[10] = (uint8_t)((20+dane)>>8);
    1150:	9c 01       	movw	r18, r24
    1152:	2c 5e       	subi	r18, 0xEC	; 236
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	3b 87       	std	Y+11, r19	; 0x0b
	Data[11] = (uint8_t)(20+dane);
    1158:	8c 5e       	subi	r24, 0xEC	; 236
    115a:	8c 87       	std	Y+12, r24	; 0x0c
    115c:	fe 01       	movw	r30, r28
    115e:	31 96       	adiw	r30, 0x01	; 1
    1160:	ee 24       	eor	r14, r14
    1162:	ff 24       	eor	r15, r15
    1164:	87 01       	movw	r16, r14
	
	unsigned int a;
	unsigned int i;
	unsigned long sum=0;
	
	for(i=0; i<12; i=i+2)
    1166:	ae 01       	movw	r20, r28
    1168:	43 5f       	subi	r20, 0xF3	; 243
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		a=((Data[i]<<8)&0xFF00)+(Data[i+1]&0xFF);
		sum=sum+(unsigned long)a;
    116c:	30 81       	ld	r19, Z
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	81 81       	ldd	r24, Z+1	; 0x01
    1172:	b9 01       	movw	r22, r18
    1174:	68 0f       	add	r22, r24
    1176:	71 1d       	adc	r23, r1
    1178:	cb 01       	movw	r24, r22
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e8 0e       	add	r14, r24
    1180:	f9 1e       	adc	r15, r25
    1182:	0a 1f       	adc	r16, r26
    1184:	1b 1f       	adc	r17, r27
    1186:	32 96       	adiw	r30, 0x02	; 2
	
	unsigned int a;
	unsigned int i;
	unsigned long sum=0;
	
	for(i=0; i<12; i=i+2)
    1188:	e4 17       	cp	r30, r20
    118a:	f5 07       	cpc	r31, r21
    118c:	79 f7       	brne	.-34     	; 0x116c <TcpCheckSumCalc+0x7e>
    118e:	ea e9       	ldi	r30, 0x9A	; 154
    1190:	f1 e0       	ldi	r31, 0x01	; 1
	{
		a=((Data[i]<<8)&0xFF00)+(Data[i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	for(i=0; i<20; i=i+2)
    1192:	2e ea       	ldi	r18, 0xAE	; 174
    1194:	31 e0       	ldi	r19, 0x01	; 1
	{
		a=((EthFrame[EthData+20+i]<<8)&0xFF00)+(EthFrame[EthData+20+i+1]&0xFF);
		sum=sum+(unsigned long)a;
    1196:	70 81       	ld	r23, Z
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	81 81       	ldd	r24, Z+1	; 0x01
    119c:	ab 01       	movw	r20, r22
    119e:	48 0f       	add	r20, r24
    11a0:	51 1d       	adc	r21, r1
    11a2:	ca 01       	movw	r24, r20
    11a4:	a0 e0       	ldi	r26, 0x00	; 0
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e8 0e       	add	r14, r24
    11aa:	f9 1e       	adc	r15, r25
    11ac:	0a 1f       	adc	r16, r26
    11ae:	1b 1f       	adc	r17, r27
    11b0:	32 96       	adiw	r30, 0x02	; 2
	{
		a=((Data[i]<<8)&0xFF00)+(Data[i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	for(i=0; i<20; i=i+2)
    11b2:	e2 17       	cp	r30, r18
    11b4:	f3 07       	cpc	r31, r19
    11b6:	79 f7       	brne	.-34     	; 0x1196 <TcpCheckSumCalc+0xa8>
	{
		a=((EthFrame[EthData+20+i]<<8)&0xFF00)+(EthFrame[EthData+20+i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	while(sum>>16)
    11b8:	98 01       	movw	r18, r16
    11ba:	44 27       	eor	r20, r20
    11bc:	55 27       	eor	r21, r21
    11be:	21 15       	cp	r18, r1
    11c0:	31 05       	cpc	r19, r1
    11c2:	41 05       	cpc	r20, r1
    11c4:	51 05       	cpc	r21, r1
    11c6:	91 f0       	breq	.+36     	; 0x11ec <TcpCheckSumCalc+0xfe>
	{
		sum=(sum&0xFFFF)+(sum>>16);
    11c8:	d8 01       	movw	r26, r16
    11ca:	c7 01       	movw	r24, r14
    11cc:	a0 70       	andi	r26, 0x00	; 0
    11ce:	b0 70       	andi	r27, 0x00	; 0
    11d0:	7c 01       	movw	r14, r24
    11d2:	8d 01       	movw	r16, r26
    11d4:	e2 0e       	add	r14, r18
    11d6:	f3 1e       	adc	r15, r19
    11d8:	04 1f       	adc	r16, r20
    11da:	15 1f       	adc	r17, r21
	{
		a=((EthFrame[EthData+20+i]<<8)&0xFF00)+(EthFrame[EthData+20+i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	while(sum>>16)
    11dc:	98 01       	movw	r18, r16
    11de:	44 27       	eor	r20, r20
    11e0:	55 27       	eor	r21, r21
    11e2:	21 15       	cp	r18, r1
    11e4:	31 05       	cpc	r19, r1
    11e6:	41 05       	cpc	r20, r1
    11e8:	51 05       	cpc	r21, r1
    11ea:	71 f7       	brne	.-36     	; 0x11c8 <TcpCheckSumCalc+0xda>
    11ec:	a8 01       	movw	r20, r16
    11ee:	97 01       	movw	r18, r14
    11f0:	20 95       	com	r18
    11f2:	30 95       	com	r19
    11f4:	40 95       	com	r20
    11f6:	50 95       	com	r21
	}
	
	sum=~sum;
	return ((unsigned int)sum);
	
}//Koniec funkcji obliczaj¹cej sumê kontroln¹
    11f8:	82 2f       	mov	r24, r18
    11fa:	93 2f       	mov	r25, r19
    11fc:	2c 96       	adiw	r28, 0x0c	; 12
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	08 95       	ret

00001216 <Tcp_Receive>:
	}
	}
}

//Funkcja sprawdzaj¹ca czy s¹ nowe dane TCP z konkretnego portu
uint8_t Tcp_Receive(uint16_t port) {
    1216:	28 2f       	mov	r18, r24

	if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    1218:	80 91 9c 01 	lds	r24, 0x019C
    121c:	89 17       	cp	r24, r25
    121e:	51 f4       	brne	.+20     	; 0x1234 <Tcp_Receive+0x1e>
    1220:	80 91 9d 01 	lds	r24, 0x019D
    1224:	82 17       	cp	r24, r18
    1226:	31 f4       	brne	.+12     	; 0x1234 <Tcp_Receive+0x1e>
    1228:	80 91 a7 01 	lds	r24, 0x01A7
    122c:	88 31       	cpi	r24, 0x18	; 24
    122e:	11 f4       	brne	.+4      	; 0x1234 <Tcp_Receive+0x1e>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	08 95       	ret
    1234:	82 e0       	ldi	r24, 0x02	; 2
		&& EthFrame[ControlBits] == (PSH+ACK) /*&& Tcp_Status == Established*/) {
		return 1; //Odebrano nowe dane
	}
	return 2; //B³¹d odbierania danych
}
    1236:	08 95       	ret

00001238 <Tcp_Send_Data>:
		RTLsend_packet();
		return receive_data;
}

//Funkcja wysy³aj¹ca dane TCP na konkretny port
void Tcp_Send_Data(uint16_t destport, uint16_t data_lenght) {	
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	c8 2e       	mov	r12, r24
    1246:	d9 2e       	mov	r13, r25
    1248:	7b 01       	movw	r14, r22
	
	MakeIpHeader(0x06,0x14+data_lenght);
    124a:	6c 5e       	subi	r22, 0xEC	; 236
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	86 e0       	ldi	r24, 0x06	; 6
    1250:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
	
	EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1254:	90 91 e4 02 	lds	r25, 0x02E4
    1258:	80 91 e5 02 	lds	r24, 0x02E5
    125c:	0c e9       	ldi	r16, 0x9C	; 156
    125e:	11 e0       	ldi	r17, 0x01	; 1
    1260:	f8 01       	movw	r30, r16
    1262:	81 93       	st	Z+, r24
	EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1264:	90 83       	st	Z, r25
	
	EthFrame[SourcePort0] = (uint8_t)(destport>>8);
    1266:	d0 92 9a 01 	sts	0x019A, r13
	EthFrame[SourcePort1] = (uint8_t)(destport);
    126a:	c0 92 9b 01 	sts	0x019B, r12
	
	EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    126e:	20 91 69 01 	lds	r18, 0x0169
    1272:	30 91 6a 01 	lds	r19, 0x016A
    1276:	40 91 6b 01 	lds	r20, 0x016B
    127a:	50 91 6c 01 	lds	r21, 0x016C
    127e:	85 2f       	mov	r24, r21
    1280:	99 27       	eor	r25, r25
    1282:	aa 27       	eor	r26, r26
    1284:	bb 27       	eor	r27, r27
    1286:	f8 01       	movw	r30, r16
    1288:	82 83       	std	Z+2, r24	; 0x02
	EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    128a:	ca 01       	movw	r24, r20
    128c:	aa 27       	eor	r26, r26
    128e:	bb 27       	eor	r27, r27
    1290:	83 83       	std	Z+3, r24	; 0x03
	EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1292:	bb 27       	eor	r27, r27
    1294:	a5 2f       	mov	r26, r21
    1296:	94 2f       	mov	r25, r20
    1298:	83 2f       	mov	r24, r19
    129a:	84 83       	std	Z+4, r24	; 0x04
	EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    129c:	25 83       	std	Z+5, r18	; 0x05
	seq_number+=data_lenght;
    129e:	c7 01       	movw	r24, r14
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	82 0f       	add	r24, r18
    12a6:	93 1f       	adc	r25, r19
    12a8:	a4 1f       	adc	r26, r20
    12aa:	b5 1f       	adc	r27, r21
    12ac:	80 93 69 01 	sts	0x0169, r24
    12b0:	90 93 6a 01 	sts	0x016A, r25
    12b4:	a0 93 6b 01 	sts	0x016B, r26
    12b8:	b0 93 6c 01 	sts	0x016C, r27
	
	EthFrame[AckNumber0] = (uint8_t)(ack_number>>24); //Numer potwierdzenia ACK
    12bc:	20 91 d6 02 	lds	r18, 0x02D6
    12c0:	30 91 d7 02 	lds	r19, 0x02D7
    12c4:	40 91 d8 02 	lds	r20, 0x02D8
    12c8:	50 91 d9 02 	lds	r21, 0x02D9
    12cc:	85 2f       	mov	r24, r21
    12ce:	99 27       	eor	r25, r25
    12d0:	aa 27       	eor	r26, r26
    12d2:	bb 27       	eor	r27, r27
    12d4:	86 83       	std	Z+6, r24	; 0x06
	EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    12d6:	ca 01       	movw	r24, r20
    12d8:	aa 27       	eor	r26, r26
    12da:	bb 27       	eor	r27, r27
    12dc:	87 83       	std	Z+7, r24	; 0x07
	EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    12de:	bb 27       	eor	r27, r27
    12e0:	a5 2f       	mov	r26, r21
    12e2:	94 2f       	mov	r25, r20
    12e4:	83 2f       	mov	r24, r19
    12e6:	80 87       	std	Z+8, r24	; 0x08
	EthFrame[AckNumber3] = (uint8_t)(ack_number);
    12e8:	21 87       	std	Z+9, r18	; 0x09
	
	EthFrame[DataOffset] = 0x50;
    12ea:	80 e5       	ldi	r24, 0x50	; 80
    12ec:	82 87       	std	Z+10, r24	; 0x0a
	EthFrame[ControlBits] = (PSH|ACK);
    12ee:	88 e1       	ldi	r24, 0x18	; 24
    12f0:	83 87       	std	Z+11, r24	; 0x0b
	EthFrame[WindowSize] = 0xff;
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	85 87       	std	Z+13, r24	; 0x0d
		
	uint16_t CheckSum = TcpCheckSumCalc(data_lenght);
    12f6:	c7 01       	movw	r24, r14
    12f8:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
	EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    12fc:	f8 01       	movw	r30, r16
    12fe:	96 87       	std	Z+14, r25	; 0x0e
	EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1300:	87 87       	std	Z+15, r24	; 0x0f
		
	EthFrame[DataPointer0] = 0x00;
    1302:	10 8a       	std	Z+16, r1	; 0x10
	EthFrame[DataPointer1] = 0x00;
    1304:	11 8a       	std	Z+17, r1	; 0x11
		
	//Wysy³anie do RTL8019as
	PacketSize = 14+20+20+data_lenght;
    1306:	86 e3       	ldi	r24, 0x36	; 54
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	e8 0e       	add	r14, r24
    130c:	f9 1e       	adc	r15, r25
    130e:	f0 92 df 02 	sts	0x02DF, r15
    1312:	e0 92 de 02 	sts	0x02DE, r14
	RTLsend_packet();	
    1316:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
}
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	df 90       	pop	r13
    1324:	cf 90       	pop	r12
    1326:	08 95       	ret

00001328 <Tcp_Send_Ack>:
	}
	return 2; //B³¹d odbierania danych
}

//Funkcja wysy³aj¹ca potwierdzenie otrzymania danych TCP na konkretny destport
uint16_t Tcp_Send_Ack(uint16_t destport) {
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	e8 2e       	mov	r14, r24
    1336:	f9 2e       	mov	r15, r25

		uint16_t receive_data = (EthFrame[IpTotalLength0]<<8); //iloœæ odebranych bajtów danych (20-nag³ówek IP, 20-nag³ówek TCP)
    1338:	08 e8       	ldi	r16, 0x88	; 136
    133a:	11 e0       	ldi	r17, 0x01	; 1
    133c:	f8 01       	movw	r30, r16
    133e:	91 91       	ld	r25, Z+
    1340:	80 e0       	ldi	r24, 0x00	; 0
		receive_data += EthFrame[IpTotalLength1];
    1342:	e0 81       	ld	r30, Z
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	b8 97       	sbiw	r30, 0x28	; 40
		receive_data -= (0x14+0x14);
    1348:	ef 01       	movw	r28, r30
    134a:	c8 0f       	add	r28, r24
    134c:	d9 1f       	adc	r29, r25
		
		MakeIpHeader(0x06,0x14);
    134e:	86 e0       	ldi	r24, 0x06	; 6
    1350:	64 e1       	ldi	r22, 0x14	; 20
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
		
		EthFrame[DestinPort0] = EthFrame[SourcePort0];
    1358:	d8 01       	movw	r26, r16
    135a:	52 96       	adiw	r26, 0x12	; 18
    135c:	8c 91       	ld	r24, X
    135e:	f8 01       	movw	r30, r16
    1360:	84 8b       	std	Z+20, r24	; 0x14
		EthFrame[DestinPort1] = EthFrame[SourcePort1];
    1362:	98 01       	movw	r18, r16
    1364:	2d 5e       	subi	r18, 0xED	; 237
    1366:	3f 4f       	sbci	r19, 0xFF	; 255
    1368:	f9 01       	movw	r30, r18
    136a:	80 81       	ld	r24, Z
    136c:	f8 01       	movw	r30, r16
    136e:	85 8b       	std	Z+21, r24	; 0x15
		
		EthFrame[SourcePort0] = (uint8_t)(destport>>8);
    1370:	fc 92       	st	X, r15
		EthFrame[SourcePort1] = (uint8_t)(destport);
    1372:	f9 01       	movw	r30, r18
    1374:	e0 82       	st	Z, r14
		
		ack_number+=receive_data;
    1376:	ce 01       	movw	r24, r28
    1378:	a0 e0       	ldi	r26, 0x00	; 0
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	20 91 d6 02 	lds	r18, 0x02D6
    1380:	30 91 d7 02 	lds	r19, 0x02D7
    1384:	40 91 d8 02 	lds	r20, 0x02D8
    1388:	50 91 d9 02 	lds	r21, 0x02D9
    138c:	82 0f       	add	r24, r18
    138e:	93 1f       	adc	r25, r19
    1390:	a4 1f       	adc	r26, r20
    1392:	b5 1f       	adc	r27, r21
    1394:	80 93 d6 02 	sts	0x02D6, r24
    1398:	90 93 d7 02 	sts	0x02D7, r25
    139c:	a0 93 d8 02 	sts	0x02D8, r26
    13a0:	b0 93 d9 02 	sts	0x02D9, r27
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    13a4:	2b 2f       	mov	r18, r27
    13a6:	33 27       	eor	r19, r19
    13a8:	44 27       	eor	r20, r20
    13aa:	55 27       	eor	r21, r21
    13ac:	f8 01       	movw	r30, r16
    13ae:	22 8f       	std	Z+26, r18	; 0x1a
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    13b0:	9d 01       	movw	r18, r26
    13b2:	44 27       	eor	r20, r20
    13b4:	55 27       	eor	r21, r21
    13b6:	23 8f       	std	Z+27, r18	; 0x1b
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    13b8:	29 2f       	mov	r18, r25
    13ba:	3a 2f       	mov	r19, r26
    13bc:	4b 2f       	mov	r20, r27
    13be:	55 27       	eor	r21, r21
    13c0:	24 8f       	std	Z+28, r18	; 0x1c
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    13c2:	85 8f       	std	Z+29, r24	; 0x1d
		
		EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    13c4:	20 91 69 01 	lds	r18, 0x0169
    13c8:	30 91 6a 01 	lds	r19, 0x016A
    13cc:	40 91 6b 01 	lds	r20, 0x016B
    13d0:	50 91 6c 01 	lds	r21, 0x016C
    13d4:	85 2f       	mov	r24, r21
    13d6:	99 27       	eor	r25, r25
    13d8:	aa 27       	eor	r26, r26
    13da:	bb 27       	eor	r27, r27
    13dc:	86 8b       	std	Z+22, r24	; 0x16
		EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    13de:	ca 01       	movw	r24, r20
    13e0:	aa 27       	eor	r26, r26
    13e2:	bb 27       	eor	r27, r27
    13e4:	87 8b       	std	Z+23, r24	; 0x17
		EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    13e6:	bb 27       	eor	r27, r27
    13e8:	a5 2f       	mov	r26, r21
    13ea:	94 2f       	mov	r25, r20
    13ec:	83 2f       	mov	r24, r19
    13ee:	80 8f       	std	Z+24, r24	; 0x18
		EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    13f0:	21 8f       	std	Z+25, r18	; 0x19
		
		EthFrame[DataOffset] = 0x50;
    13f2:	80 e5       	ldi	r24, 0x50	; 80
    13f4:	86 8f       	std	Z+30, r24	; 0x1e
		EthFrame[ControlBits] = ACK;
    13f6:	80 e1       	ldi	r24, 0x10	; 16
    13f8:	87 8f       	std	Z+31, r24	; 0x1f
		EthFrame[WindowSize] = 0xff;
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	81 a3       	std	Z+33, r24	; 0x21
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1406:	f8 01       	movw	r30, r16
    1408:	92 a3       	std	Z+34, r25	; 0x22
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    140a:	83 a3       	std	Z+35, r24	; 0x23
		
		EthFrame[DataPointer0] = 0x00;
    140c:	14 a2       	std	Z+36, r1	; 0x24
		EthFrame[DataPointer1] = 0x00;
    140e:	15 a2       	std	Z+37, r1	; 0x25
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1410:	86 e3       	ldi	r24, 0x36	; 54
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	90 93 df 02 	sts	0x02DF, r25
    1418:	80 93 de 02 	sts	0x02DE, r24
		RTLsend_packet();
    141c:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
		return receive_data;
}
    1420:	8c 2f       	mov	r24, r28
    1422:	9d 2f       	mov	r25, r29
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	08 95       	ret

00001432 <Tcp_Fin_Active>:
		}
	}
}

//Aktywne zakoñczenie wirtualnego po³¹czenia TCP
void Tcp_Fin_Active(uint16_t port) {
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	e8 2e       	mov	r14, r24
    1444:	09 2f       	mov	r16, r25

	if(Tcp_Status == Established) {
    1446:	80 91 66 01 	lds	r24, 0x0166
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	09 f0       	breq	.+2      	; 0x1450 <Tcp_Fin_Active+0x1e>
    144e:	ca c1       	rjmp	.+916    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
	//Wysy³anie Fin
	Tcp_Status = FinWait1;
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	80 93 66 01 	sts	0x0166, r24
		
	MakeIpHeader(0x06,0x14);
    1456:	86 e0       	ldi	r24, 0x06	; 6
    1458:	64 e1       	ldi	r22, 0x14	; 20
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
			
	EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1460:	d0 2e       	mov	r13, r16
    1462:	0a e9       	ldi	r16, 0x9A	; 154
    1464:	11 e0       	ldi	r17, 0x01	; 1
    1466:	f8 01       	movw	r30, r16
    1468:	d1 92       	st	Z+, r13
	EthFrame[SourcePort1] = (uint8_t)(port);
    146a:	ce 2c       	mov	r12, r14
    146c:	e0 82       	st	Z, r14
		
	EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    146e:	80 91 e5 02 	lds	r24, 0x02E5
    1472:	f8 01       	movw	r30, r16
    1474:	82 83       	std	Z+2, r24	; 0x02
	EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1476:	80 91 e4 02 	lds	r24, 0x02E4
    147a:	83 83       	std	Z+3, r24	; 0x03
		
	EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    147c:	80 91 69 01 	lds	r24, 0x0169
    1480:	90 91 6a 01 	lds	r25, 0x016A
    1484:	a0 91 6b 01 	lds	r26, 0x016B
    1488:	b0 91 6c 01 	lds	r27, 0x016C
    148c:	2b 2f       	mov	r18, r27
    148e:	33 27       	eor	r19, r19
    1490:	44 27       	eor	r20, r20
    1492:	55 27       	eor	r21, r21
    1494:	24 83       	std	Z+4, r18	; 0x04
	EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    1496:	9d 01       	movw	r18, r26
    1498:	44 27       	eor	r20, r20
    149a:	55 27       	eor	r21, r21
    149c:	25 83       	std	Z+5, r18	; 0x05
	EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    149e:	89 2f       	mov	r24, r25
    14a0:	9a 2f       	mov	r25, r26
    14a2:	ab 2f       	mov	r26, r27
    14a4:	bb 27       	eor	r27, r27
    14a6:	86 83       	std	Z+6, r24	; 0x06
	EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    14a8:	80 91 69 01 	lds	r24, 0x0169
    14ac:	87 83       	std	Z+7, r24	; 0x07
		
	EthFrame[DataOffset] = 0x50;
    14ae:	80 e5       	ldi	r24, 0x50	; 80
    14b0:	84 87       	std	Z+12, r24	; 0x0c
	EthFrame[ControlBits] = FIN;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	85 87       	std	Z+13, r24	; 0x0d
	EthFrame[WindowSize] = 0xff;
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	87 87       	std	Z+15, r24	; 0x0f
		
	uint16_t CheckSum = TcpCheckSumCalc(0x00);
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
	EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    14c2:	f8 01       	movw	r30, r16
    14c4:	90 8b       	std	Z+16, r25	; 0x10
	EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    14c6:	81 8b       	std	Z+17, r24	; 0x11
		
	EthFrame[DataPointer0] = 0x00;
    14c8:	12 8a       	std	Z+18, r1	; 0x12
	EthFrame[DataPointer1] = 0x00;
    14ca:	13 8a       	std	Z+19, r1	; 0x13
		
	//Wysy³anie do RTL8019as
	PacketSize = 14+20+20;
    14cc:	86 e3       	ldi	r24, 0x36	; 54
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	90 93 df 02 	sts	0x02DF, r25
    14d4:	80 93 de 02 	sts	0x02DE, r24
	RTLsend_packet();
    14d8:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
	
	
	Tcp_Status = TimeWait;	
    14dc:	87 e0       	ldi	r24, 0x07	; 7
    14de:	80 93 66 01 	sts	0x0166, r24
	//Czekanie na segment TCP z potwierdzeniem
	while(RTLreceive_packet()!=0x01) {}
    14e2:	0e 94 b4 03 	call	0x768	; 0x768 <RTLreceive_packet>
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	e1 f7       	brne	.-8      	; 0x14e2 <Tcp_Fin_Active+0xb0>
	
	//Otrzymanie FIN i ACK	
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    14ea:	20 91 e4 02 	lds	r18, 0x02E4
    14ee:	90 91 e5 02 	lds	r25, 0x02E5
    14f2:	80 91 9c 01 	lds	r24, 0x019C
    14f6:	89 17       	cp	r24, r25
    14f8:	09 f0       	breq	.+2      	; 0x14fc <Tcp_Fin_Active+0xca>
    14fa:	74 c1       	rjmp	.+744    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
    14fc:	80 91 9d 01 	lds	r24, 0x019D
    1500:	82 17       	cp	r24, r18
    1502:	09 f0       	breq	.+2      	; 0x1506 <Tcp_Fin_Active+0xd4>
    1504:	6c c1       	rjmp	.+728    	; 0x17de <Tcp_Fin_Active+0x3ac>
    1506:	80 91 9a 01 	lds	r24, 0x019A
    150a:	d8 16       	cp	r13, r24
    150c:	09 f0       	breq	.+2      	; 0x1510 <Tcp_Fin_Active+0xde>
    150e:	67 c1       	rjmp	.+718    	; 0x17de <Tcp_Fin_Active+0x3ac>
    1510:	80 91 9b 01 	lds	r24, 0x019B
    1514:	c8 16       	cp	r12, r24
    1516:	09 f0       	breq	.+2      	; 0x151a <Tcp_Fin_Active+0xe8>
    1518:	62 c1       	rjmp	.+708    	; 0x17de <Tcp_Fin_Active+0x3ac>
    151a:	80 91 a7 01 	lds	r24, 0x01A7
    151e:	81 31       	cpi	r24, 0x11	; 17
    1520:	09 f0       	breq	.+2      	; 0x1524 <Tcp_Fin_Active+0xf2>
    1522:	5d c1       	rjmp	.+698    	; 0x17de <Tcp_Fin_Active+0x3ac>
    1524:	80 91 66 01 	lds	r24, 0x0166
    1528:	87 30       	cpi	r24, 0x07	; 7
    152a:	09 f0       	breq	.+2      	; 0x152e <Tcp_Fin_Active+0xfc>
    152c:	58 c1       	rjmp	.+688    	; 0x17de <Tcp_Fin_Active+0x3ac>
    152e:	20 91 a5 01 	lds	r18, 0x01A5
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	80 91 69 01 	lds	r24, 0x0169
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	28 17       	cp	r18, r24
    153e:	39 07       	cpc	r19, r25
    1540:	09 f0       	breq	.+2      	; 0x1544 <Tcp_Fin_Active+0x112>
    1542:	4d c1       	rjmp	.+666    	; 0x17de <Tcp_Fin_Active+0x3ac>
		&& EthFrame[SourcePort0] == (uint8_t)(port>>8) && EthFrame[SourcePort1] == (uint8_t)(port)
		&& EthFrame[ControlBits] == (FIN|ACK) && Tcp_Status == TimeWait
		&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) {
		
		//Przepisz ack_number
		ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
    1544:	0e e9       	ldi	r16, 0x9E	; 158
    1546:	11 e0       	ldi	r17, 0x01	; 1
    1548:	f8 01       	movw	r30, r16
    154a:	81 91       	ld	r24, Z+
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e0       	ldi	r26, 0x00	; 0
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	b8 2f       	mov	r27, r24
    1554:	aa 27       	eor	r26, r26
    1556:	99 27       	eor	r25, r25
    1558:	88 27       	eor	r24, r24
		ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
    155a:	20 81       	ld	r18, Z
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	a9 01       	movw	r20, r18
    1564:	33 27       	eor	r19, r19
    1566:	22 27       	eor	r18, r18
    1568:	28 0f       	add	r18, r24
    156a:	39 1f       	adc	r19, r25
    156c:	4a 1f       	adc	r20, r26
    156e:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
    1570:	f8 01       	movw	r30, r16
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	ba 2f       	mov	r27, r26
    157c:	a9 2f       	mov	r26, r25
    157e:	98 2f       	mov	r25, r24
    1580:	88 27       	eor	r24, r24
    1582:	28 0f       	add	r18, r24
    1584:	39 1f       	adc	r19, r25
    1586:	4a 1f       	adc	r20, r26
    1588:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber3];
    158a:	83 81       	ldd	r24, Z+3	; 0x03
    158c:	28 0f       	add	r18, r24
    158e:	31 1d       	adc	r19, r1
    1590:	41 1d       	adc	r20, r1
    1592:	51 1d       	adc	r21, r1
		
		//Wysy³anie potwierdzenia ACK
		Tcp_Status = Closing;
    1594:	86 e0       	ldi	r24, 0x06	; 6
    1596:	80 93 66 01 	sts	0x0166, r24
		ack_number+=0x01;
    159a:	2f 5f       	subi	r18, 0xFF	; 255
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	4f 4f       	sbci	r20, 0xFF	; 255
    15a0:	5f 4f       	sbci	r21, 0xFF	; 255
    15a2:	20 93 d6 02 	sts	0x02D6, r18
    15a6:	30 93 d7 02 	sts	0x02D7, r19
    15aa:	40 93 d8 02 	sts	0x02D8, r20
    15ae:	50 93 d9 02 	sts	0x02D9, r21
		
		MakeIpHeader(0x06,0x14);
    15b2:	64 e1       	ldi	r22, 0x14	; 20
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    15ba:	d0 92 9a 01 	sts	0x019A, r13
		EthFrame[SourcePort1] = (uint8_t)(port);
    15be:	c0 92 9b 01 	sts	0x019B, r12
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    15c2:	0f 2e       	mov	r0, r31
    15c4:	fe ef       	ldi	r31, 0xFE	; 254
    15c6:	ef 2e       	mov	r14, r31
    15c8:	ff ef       	ldi	r31, 0xFF	; 255
    15ca:	ff 2e       	mov	r15, r31
    15cc:	f0 2d       	mov	r31, r0
    15ce:	e0 0e       	add	r14, r16
    15d0:	f1 1e       	adc	r15, r17
    15d2:	80 91 e5 02 	lds	r24, 0x02E5
    15d6:	f7 01       	movw	r30, r14
    15d8:	80 83       	st	Z, r24
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    15da:	80 91 e4 02 	lds	r24, 0x02E4
    15de:	80 93 9d 01 	sts	0x019D, r24
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    15e2:	80 91 d6 02 	lds	r24, 0x02D6
    15e6:	90 91 d7 02 	lds	r25, 0x02D7
    15ea:	a0 91 d8 02 	lds	r26, 0x02D8
    15ee:	b0 91 d9 02 	lds	r27, 0x02D9
    15f2:	2b 2f       	mov	r18, r27
    15f4:	33 27       	eor	r19, r19
    15f6:	44 27       	eor	r20, r20
    15f8:	55 27       	eor	r21, r21
    15fa:	f8 01       	movw	r30, r16
    15fc:	24 83       	std	Z+4, r18	; 0x04
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    15fe:	9d 01       	movw	r18, r26
    1600:	44 27       	eor	r20, r20
    1602:	55 27       	eor	r21, r21
    1604:	25 83       	std	Z+5, r18	; 0x05
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    1606:	89 2f       	mov	r24, r25
    1608:	9a 2f       	mov	r25, r26
    160a:	ab 2f       	mov	r26, r27
    160c:	bb 27       	eor	r27, r27
    160e:	86 83       	std	Z+6, r24	; 0x06
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    1610:	80 91 d6 02 	lds	r24, 0x02D6
    1614:	87 83       	std	Z+7, r24	; 0x07
				
		EthFrame[DataOffset] = 0x50;
    1616:	80 e5       	ldi	r24, 0x50	; 80
    1618:	80 87       	std	Z+8, r24	; 0x08
		EthFrame[ControlBits] = ACK;
    161a:	80 e1       	ldi	r24, 0x10	; 16
    161c:	81 87       	std	Z+9, r24	; 0x09
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	83 87       	std	Z+11, r24	; 0x0b
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    162a:	f8 01       	movw	r30, r16
    162c:	94 87       	std	Z+12, r25	; 0x0c
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    162e:	85 87       	std	Z+13, r24	; 0x0d
		
		EthFrame[DataPointer0] = 0x00;
    1630:	16 86       	std	Z+14, r1	; 0x0e
		EthFrame[DataPointer1] = 0x00;
    1632:	17 86       	std	Z+15, r1	; 0x0f
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1634:	86 e3       	ldi	r24, 0x36	; 54
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	90 93 df 02 	sts	0x02DF, r25
    163c:	80 93 de 02 	sts	0x02DE, r24
		RTLsend_packet();
    1640:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
		
		//Zakoñczono po³¹czenie
		Tcp_Status = Closed;
    1644:	10 92 66 01 	sts	0x0166, r1
	}
	
	//Otrzymanie ACK
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    1648:	20 91 e4 02 	lds	r18, 0x02E4
    164c:	90 91 e5 02 	lds	r25, 0x02E5
    1650:	f7 01       	movw	r30, r14
    1652:	80 81       	ld	r24, Z
    1654:	89 17       	cp	r24, r25
    1656:	09 f0       	breq	.+2      	; 0x165a <Tcp_Fin_Active+0x228>
    1658:	c5 c0       	rjmp	.+394    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
    165a:	80 91 9d 01 	lds	r24, 0x019D
    165e:	82 17       	cp	r24, r18
    1660:	09 f0       	breq	.+2      	; 0x1664 <Tcp_Fin_Active+0x232>
    1662:	c0 c0       	rjmp	.+384    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
    1664:	80 91 9a 01 	lds	r24, 0x019A
    1668:	d8 16       	cp	r13, r24
    166a:	09 f0       	breq	.+2      	; 0x166e <Tcp_Fin_Active+0x23c>
    166c:	bb c0       	rjmp	.+374    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
    166e:	80 91 9b 01 	lds	r24, 0x019B
    1672:	c8 16       	cp	r12, r24
    1674:	09 f0       	breq	.+2      	; 0x1678 <Tcp_Fin_Active+0x246>
    1676:	b6 c0       	rjmp	.+364    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
    1678:	80 91 a7 01 	lds	r24, 0x01A7
    167c:	80 31       	cpi	r24, 0x10	; 16
    167e:	09 f0       	breq	.+2      	; 0x1682 <Tcp_Fin_Active+0x250>
    1680:	b1 c0       	rjmp	.+354    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
    1682:	80 91 66 01 	lds	r24, 0x0166
    1686:	87 30       	cpi	r24, 0x07	; 7
    1688:	09 f0       	breq	.+2      	; 0x168c <Tcp_Fin_Active+0x25a>
    168a:	ac c0       	rjmp	.+344    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
    168c:	20 91 a5 01 	lds	r18, 0x01A5
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	80 91 69 01 	lds	r24, 0x0169
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	28 17       	cp	r18, r24
    169c:	39 07       	cpc	r19, r25
    169e:	09 f0       	breq	.+2      	; 0x16a2 <Tcp_Fin_Active+0x270>
    16a0:	a1 c0       	rjmp	.+322    	; 0x17e4 <Tcp_Fin_Active+0x3b2>
		&& EthFrame[SourcePort0] == (uint8_t)(port>>8) && EthFrame[SourcePort1] == (uint8_t)(port)
		&& EthFrame[ControlBits] == ACK && Tcp_Status == TimeWait
		&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) {
		
		//Wysy³anie potwierdzenia ACK
		Tcp_Status = FinWait2;
    16a2:	85 e0       	ldi	r24, 0x05	; 5
    16a4:	80 93 66 01 	sts	0x0166, r24
		
		while(EthFrame[ControlBits] == (FIN|ACK) && Tcp_Status == TimeWait
    16a8:	c7 ea       	ldi	r28, 0xA7	; 167
    16aa:	d1 e0       	ldi	r29, 0x01	; 1
    16ac:	05 ea       	ldi	r16, 0xA5	; 165
    16ae:	11 e0       	ldi	r17, 0x01	; 1
    16b0:	0f 2e       	mov	r0, r31
    16b2:	f9 e6       	ldi	r31, 0x69	; 105
    16b4:	ef 2e       	mov	r14, r31
    16b6:	f1 e0       	ldi	r31, 0x01	; 1
    16b8:	ff 2e       	mov	r15, r31
    16ba:	f0 2d       	mov	r31, r0
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <Tcp_Fin_Active+0x294>
		&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) 
		{
			//Czekanie na segment TCP z potwierdzeniem
			while(RTLreceive_packet()!=0x01) {}
    16be:	0e 94 b4 03 	call	0x768	; 0x768 <RTLreceive_packet>
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	e1 f7       	brne	.-8      	; 0x16be <Tcp_Fin_Active+0x28c>
		&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) {
		
		//Wysy³anie potwierdzenia ACK
		Tcp_Status = FinWait2;
		
		while(EthFrame[ControlBits] == (FIN|ACK) && Tcp_Status == TimeWait
    16c6:	88 81       	ld	r24, Y
    16c8:	81 31       	cpi	r24, 0x11	; 17
    16ca:	71 f4       	brne	.+28     	; 0x16e8 <Tcp_Fin_Active+0x2b6>
    16cc:	80 91 66 01 	lds	r24, 0x0166
    16d0:	87 30       	cpi	r24, 0x07	; 7
    16d2:	51 f4       	brne	.+20     	; 0x16e8 <Tcp_Fin_Active+0x2b6>
    16d4:	f8 01       	movw	r30, r16
    16d6:	20 81       	ld	r18, Z
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	f7 01       	movw	r30, r14
    16dc:	80 81       	ld	r24, Z
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	28 17       	cp	r18, r24
    16e4:	39 07       	cpc	r19, r25
    16e6:	59 f3       	breq	.-42     	; 0x16be <Tcp_Fin_Active+0x28c>
			//Czekanie na segment TCP z potwierdzeniem
			while(RTLreceive_packet()!=0x01) {}
		}
		
		//Przepisz ack_number
		ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
    16e8:	0e e9       	ldi	r16, 0x9E	; 158
    16ea:	11 e0       	ldi	r17, 0x01	; 1
    16ec:	f8 01       	movw	r30, r16
    16ee:	81 91       	ld	r24, Z+
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e0       	ldi	r26, 0x00	; 0
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	b8 2f       	mov	r27, r24
    16f8:	aa 27       	eor	r26, r26
    16fa:	99 27       	eor	r25, r25
    16fc:	88 27       	eor	r24, r24
		ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
    16fe:	20 81       	ld	r18, Z
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	a9 01       	movw	r20, r18
    1708:	33 27       	eor	r19, r19
    170a:	22 27       	eor	r18, r18
    170c:	28 0f       	add	r18, r24
    170e:	39 1f       	adc	r19, r25
    1710:	4a 1f       	adc	r20, r26
    1712:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
    1714:	f8 01       	movw	r30, r16
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a0 e0       	ldi	r26, 0x00	; 0
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ba 2f       	mov	r27, r26
    1720:	a9 2f       	mov	r26, r25
    1722:	98 2f       	mov	r25, r24
    1724:	88 27       	eor	r24, r24
    1726:	28 0f       	add	r18, r24
    1728:	39 1f       	adc	r19, r25
    172a:	4a 1f       	adc	r20, r26
    172c:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber3];
    172e:	83 81       	ldd	r24, Z+3	; 0x03
    1730:	28 0f       	add	r18, r24
    1732:	31 1d       	adc	r19, r1
    1734:	41 1d       	adc	r20, r1
    1736:	51 1d       	adc	r21, r1
		
		//Wysy³anie potwierdzenia ACK
		Tcp_Status = Closing;
    1738:	86 e0       	ldi	r24, 0x06	; 6
    173a:	80 93 66 01 	sts	0x0166, r24
		ack_number+=0x01;
    173e:	2f 5f       	subi	r18, 0xFF	; 255
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	4f 4f       	sbci	r20, 0xFF	; 255
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	20 93 d6 02 	sts	0x02D6, r18
    174a:	30 93 d7 02 	sts	0x02D7, r19
    174e:	40 93 d8 02 	sts	0x02D8, r20
    1752:	50 93 d9 02 	sts	0x02D9, r21
		
		MakeIpHeader(0x06,0x14);
    1756:	64 e1       	ldi	r22, 0x14	; 20
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    175e:	d0 92 9a 01 	sts	0x019A, r13
		EthFrame[SourcePort1] = (uint8_t)(port);
    1762:	c0 92 9b 01 	sts	0x019B, r12
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1766:	80 91 e5 02 	lds	r24, 0x02E5
    176a:	80 93 9c 01 	sts	0x019C, r24
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    176e:	80 91 e4 02 	lds	r24, 0x02E4
    1772:	80 93 9d 01 	sts	0x019D, r24
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    1776:	80 91 d6 02 	lds	r24, 0x02D6
    177a:	90 91 d7 02 	lds	r25, 0x02D7
    177e:	a0 91 d8 02 	lds	r26, 0x02D8
    1782:	b0 91 d9 02 	lds	r27, 0x02D9
    1786:	2b 2f       	mov	r18, r27
    1788:	33 27       	eor	r19, r19
    178a:	44 27       	eor	r20, r20
    178c:	55 27       	eor	r21, r21
    178e:	f8 01       	movw	r30, r16
    1790:	24 83       	std	Z+4, r18	; 0x04
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    1792:	9d 01       	movw	r18, r26
    1794:	44 27       	eor	r20, r20
    1796:	55 27       	eor	r21, r21
    1798:	25 83       	std	Z+5, r18	; 0x05
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    179a:	89 2f       	mov	r24, r25
    179c:	9a 2f       	mov	r25, r26
    179e:	ab 2f       	mov	r26, r27
    17a0:	bb 27       	eor	r27, r27
    17a2:	86 83       	std	Z+6, r24	; 0x06
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    17a4:	80 91 d6 02 	lds	r24, 0x02D6
    17a8:	87 83       	std	Z+7, r24	; 0x07
				
		EthFrame[DataOffset] = 0x50;
    17aa:	80 e5       	ldi	r24, 0x50	; 80
    17ac:	80 87       	std	Z+8, r24	; 0x08
		EthFrame[ControlBits] = ACK;
    17ae:	80 e1       	ldi	r24, 0x10	; 16
    17b0:	81 87       	std	Z+9, r24	; 0x09
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	83 87       	std	Z+11, r24	; 0x0b
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    17be:	f8 01       	movw	r30, r16
    17c0:	94 87       	std	Z+12, r25	; 0x0c
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    17c2:	85 87       	std	Z+13, r24	; 0x0d
		
		EthFrame[DataPointer0] = 0x00;
    17c4:	16 86       	std	Z+14, r1	; 0x0e
		EthFrame[DataPointer1] = 0x00;
    17c6:	17 86       	std	Z+15, r1	; 0x0f
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    17c8:	86 e3       	ldi	r24, 0x36	; 54
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	90 93 df 02 	sts	0x02DF, r25
    17d0:	80 93 de 02 	sts	0x02DE, r24
		RTLsend_packet();
    17d4:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
		
		//Zakoñczono po³¹czenie
		Tcp_Status = Closed;
    17d8:	10 92 66 01 	sts	0x0166, r1
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <Tcp_Fin_Active+0x3b2>
		//Zakoñczono po³¹czenie
		Tcp_Status = Closed;
	}
	
	//Otrzymanie ACK
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    17de:	20 91 e4 02 	lds	r18, 0x02E4
    17e2:	3b cf       	rjmp	.-394    	; 0x165a <Tcp_Fin_Active+0x228>
		
		//Zakoñczono po³¹czenie
		Tcp_Status = Closed;
	}
	}
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	08 95       	ret

000017f6 <Tcp_Fin_Pasive>:
		Tcp_Status = Established;
	}	
}

//Pasywne zakoñczenie wirtualnego po³¹czenia TCP
void Tcp_Fin_Pasive(uint16_t port) {
    17f6:	af 92       	push	r10
    17f8:	bf 92       	push	r11
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29

	if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    180a:	b0 90 9c 01 	lds	r11, 0x019C
    180e:	b9 16       	cp	r11, r25
    1810:	09 f0       	breq	.+2      	; 0x1814 <Tcp_Fin_Pasive+0x1e>
    1812:	a2 c0       	rjmp	.+324    	; 0x1958 <Tcp_Fin_Pasive+0x162>
    1814:	a0 90 9d 01 	lds	r10, 0x019D
    1818:	a8 16       	cp	r10, r24
    181a:	09 f0       	breq	.+2      	; 0x181e <Tcp_Fin_Pasive+0x28>
    181c:	9d c0       	rjmp	.+314    	; 0x1958 <Tcp_Fin_Pasive+0x162>
    181e:	80 91 a7 01 	lds	r24, 0x01A7
    1822:	81 31       	cpi	r24, 0x11	; 17
    1824:	09 f0       	breq	.+2      	; 0x1828 <Tcp_Fin_Pasive+0x32>
    1826:	98 c0       	rjmp	.+304    	; 0x1958 <Tcp_Fin_Pasive+0x162>
		&& EthFrame[ControlBits] == (FIN|ACK)) {
		Tcp_Status = CloseWait;
    1828:	88 e0       	ldi	r24, 0x08	; 8
    182a:	80 93 66 01 	sts	0x0166, r24

		MakeIpHeader(0x06,0x14);
    182e:	86 e0       	ldi	r24, 0x06	; 6
    1830:	64 e1       	ldi	r22, 0x14	; 20
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1838:	0a e9       	ldi	r16, 0x9A	; 154
    183a:	11 e0       	ldi	r17, 0x01	; 1
    183c:	f8 01       	movw	r30, r16
    183e:	b1 92       	st	Z+, r11
		EthFrame[SourcePort1] = (uint8_t)(port);
    1840:	a0 82       	st	Z, r10
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1842:	90 91 e4 02 	lds	r25, 0x02E4
    1846:	80 91 e5 02 	lds	r24, 0x02E5
    184a:	d8 01       	movw	r26, r16
    184c:	12 96       	adiw	r26, 0x02	; 2
    184e:	8c 93       	st	X, r24
    1850:	12 97       	sbiw	r26, 0x02	; 2
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1852:	13 96       	adiw	r26, 0x03	; 3
    1854:	9c 93       	st	X, r25
    1856:	13 97       	sbiw	r26, 0x03	; 3
		
		EthFrame[AckNumber0] = EthFrame[SeqNumber0];
    1858:	cc 24       	eor	r12, r12
    185a:	dd 24       	eor	r13, r13
    185c:	68 94       	set
    185e:	c2 f8       	bld	r12, 2
    1860:	c0 0e       	add	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	e6 01       	movw	r28, r12
    1866:	88 81       	ld	r24, Y
    1868:	18 96       	adiw	r26, 0x08	; 8
    186a:	8c 93       	st	X, r24
    186c:	18 97       	sbiw	r26, 0x08	; 8
		EthFrame[AckNumber1] = EthFrame[SeqNumber1];
    186e:	0f 2e       	mov	r0, r31
    1870:	f5 e0       	ldi	r31, 0x05	; 5
    1872:	ef 2e       	mov	r14, r31
    1874:	ff 24       	eor	r15, r15
    1876:	f0 2d       	mov	r31, r0
    1878:	e0 0e       	add	r14, r16
    187a:	f1 1e       	adc	r15, r17
    187c:	f7 01       	movw	r30, r14
    187e:	80 81       	ld	r24, Z
    1880:	19 96       	adiw	r26, 0x09	; 9
    1882:	8c 93       	st	X, r24
		EthFrame[AckNumber2] = EthFrame[SeqNumber2];
    1884:	b8 01       	movw	r22, r16
    1886:	6a 5f       	subi	r22, 0xFA	; 250
    1888:	7f 4f       	sbci	r23, 0xFF	; 255
    188a:	db 01       	movw	r26, r22
    188c:	8c 91       	ld	r24, X
    188e:	e8 01       	movw	r28, r16
    1890:	8a 87       	std	Y+10, r24	; 0x0a
		EthFrame[AckNumber3] = (EthFrame[SeqNumber3] + 1);
    1892:	f8 01       	movw	r30, r16
    1894:	37 96       	adiw	r30, 0x07	; 7
    1896:	80 81       	ld	r24, Z
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	d8 01       	movw	r26, r16
    189c:	1b 96       	adiw	r26, 0x0b	; 11
    189e:	8c 93       	st	X, r24
		
		EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    18a0:	20 91 69 01 	lds	r18, 0x0169
    18a4:	30 91 6a 01 	lds	r19, 0x016A
    18a8:	40 91 6b 01 	lds	r20, 0x016B
    18ac:	50 91 6c 01 	lds	r21, 0x016C
    18b0:	85 2f       	mov	r24, r21
    18b2:	99 27       	eor	r25, r25
    18b4:	aa 27       	eor	r26, r26
    18b6:	bb 27       	eor	r27, r27
    18b8:	e6 01       	movw	r28, r12
    18ba:	88 83       	st	Y, r24
		EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    18bc:	ca 01       	movw	r24, r20
    18be:	aa 27       	eor	r26, r26
    18c0:	bb 27       	eor	r27, r27
    18c2:	e7 01       	movw	r28, r14
    18c4:	88 83       	st	Y, r24
		EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    18c6:	bb 27       	eor	r27, r27
    18c8:	a5 2f       	mov	r26, r21
    18ca:	94 2f       	mov	r25, r20
    18cc:	83 2f       	mov	r24, r19
    18ce:	eb 01       	movw	r28, r22
    18d0:	88 83       	st	Y, r24
		EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    18d2:	20 83       	st	Z, r18
		
		EthFrame[DataOffset] = 0x50;
    18d4:	80 e5       	ldi	r24, 0x50	; 80
    18d6:	f8 01       	movw	r30, r16
    18d8:	84 87       	std	Z+12, r24	; 0x0c
		EthFrame[ControlBits] = (FIN+ACK);
    18da:	81 e1       	ldi	r24, 0x11	; 17
    18dc:	85 87       	std	Z+13, r24	; 0x0d
		EthFrame[WindowSize] = 0xff;
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	87 87       	std	Z+15, r24	; 0x0f
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    18ea:	d8 01       	movw	r26, r16
    18ec:	50 96       	adiw	r26, 0x10	; 16
    18ee:	9c 93       	st	X, r25
    18f0:	50 97       	sbiw	r26, 0x10	; 16
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    18f2:	51 96       	adiw	r26, 0x11	; 17
    18f4:	8c 93       	st	X, r24
    18f6:	51 97       	sbiw	r26, 0x11	; 17
		
		EthFrame[DataPointer0] = 0x00;
    18f8:	52 96       	adiw	r26, 0x12	; 18
    18fa:	1c 92       	st	X, r1
    18fc:	52 97       	sbiw	r26, 0x12	; 18
		EthFrame[DataPointer1] = 0x00;
    18fe:	53 96       	adiw	r26, 0x13	; 19
    1900:	1c 92       	st	X, r1
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1902:	86 e3       	ldi	r24, 0x36	; 54
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	90 93 df 02 	sts	0x02DF, r25
    190a:	80 93 de 02 	sts	0x02DE, r24
		RTLsend_packet();
    190e:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
		
		Tcp_Status = LastAck;
    1912:	89 e0       	ldi	r24, 0x09	; 9
    1914:	80 93 66 01 	sts	0x0166, r24
		//Czekanie na segment TCP z potwierdzeniem
		while(RTLreceive_packet()!=0x01) {}
    1918:	0e 94 b4 03 	call	0x768	; 0x768 <RTLreceive_packet>
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	e1 f7       	brne	.-8      	; 0x1918 <Tcp_Fin_Pasive+0x122>
		
		next_send_data=0;
    1920:	10 92 da 02 	sts	0x02DA, r1
		next_ack=0;
    1924:	10 92 68 01 	sts	0x0168, r1

		if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    1928:	80 91 9c 01 	lds	r24, 0x019C
    192c:	b8 16       	cp	r11, r24
    192e:	a1 f4       	brne	.+40     	; 0x1958 <Tcp_Fin_Pasive+0x162>
    1930:	80 91 9d 01 	lds	r24, 0x019D
    1934:	a8 16       	cp	r10, r24
    1936:	81 f4       	brne	.+32     	; 0x1958 <Tcp_Fin_Pasive+0x162>
    1938:	80 91 a7 01 	lds	r24, 0x01A7
    193c:	80 31       	cpi	r24, 0x10	; 16
    193e:	61 f4       	brne	.+24     	; 0x1958 <Tcp_Fin_Pasive+0x162>
    1940:	20 91 a5 01 	lds	r18, 0x01A5
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	80 91 a1 01 	lds	r24, 0x01A1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	28 17       	cp	r18, r24
    1950:	39 07       	cpc	r19, r25
    1952:	11 f4       	brne	.+4      	; 0x1958 <Tcp_Fin_Pasive+0x162>
			&& EthFrame[ControlBits] == ACK && EthFrame[AckNumber3] == (EthFrame[SeqNumber3]+0x01)) {
			//Zakoñczono po³¹czenie
			Tcp_Status = Closed;
    1954:	10 92 66 01 	sts	0x0166, r1
		}
	}
}
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	bf 90       	pop	r11
    196a:	af 90       	pop	r10
    196c:	08 95       	ret

0000196e <Tcp_Open_Active>:
		
	}
}

//Aktywne otwarcie po³¹czenia TCP
void Tcp_Open_Active(uint16_t port) {
    196e:	7f 92       	push	r7
    1970:	8f 92       	push	r8
    1972:	9f 92       	push	r9
    1974:	af 92       	push	r10
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	f8 2e       	mov	r15, r24
    1986:	19 2f       	mov	r17, r25
	
	//Wysy³anie flagi Syn
	Tcp_Status = SendSyn;
    1988:	ee 24       	eor	r14, r14
    198a:	68 94       	set
    198c:	e1 f8       	bld	r14, 1
    198e:	e0 92 66 01 	sts	0x0166, r14

	MakeIpHeader(0x06,0x14);
    1992:	86 e0       	ldi	r24, 0x06	; 6
    1994:	64 e1       	ldi	r22, 0x14	; 20
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
		
	EthFrame[SourcePort0] = (uint8_t)(port>>8);
    199c:	81 2e       	mov	r8, r17
    199e:	0a e9       	ldi	r16, 0x9A	; 154
    19a0:	11 e0       	ldi	r17, 0x01	; 1
    19a2:	f8 01       	movw	r30, r16
    19a4:	81 92       	st	Z+, r8
	EthFrame[SourcePort1] = (uint8_t)(port);
    19a6:	7f 2c       	mov	r7, r15
    19a8:	f0 82       	st	Z, r15
		
	EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    19aa:	90 91 e4 02 	lds	r25, 0x02E4
    19ae:	80 91 e5 02 	lds	r24, 0x02E5
    19b2:	f8 01       	movw	r30, r16
    19b4:	82 83       	std	Z+2, r24	; 0x02
	EthFrame[DestinPort1] = (uint8_t)(dest_port);
    19b6:	93 83       	std	Z+3, r25	; 0x03
		
	EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    19b8:	20 91 69 01 	lds	r18, 0x0169
    19bc:	30 91 6a 01 	lds	r19, 0x016A
    19c0:	40 91 6b 01 	lds	r20, 0x016B
    19c4:	50 91 6c 01 	lds	r21, 0x016C
    19c8:	85 2f       	mov	r24, r21
    19ca:	99 27       	eor	r25, r25
    19cc:	aa 27       	eor	r26, r26
    19ce:	bb 27       	eor	r27, r27
    19d0:	84 83       	std	Z+4, r24	; 0x04
	EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    19d2:	ca 01       	movw	r24, r20
    19d4:	aa 27       	eor	r26, r26
    19d6:	bb 27       	eor	r27, r27
    19d8:	85 83       	std	Z+5, r24	; 0x05
	EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    19da:	bb 27       	eor	r27, r27
    19dc:	a5 2f       	mov	r26, r21
    19de:	94 2f       	mov	r25, r20
    19e0:	83 2f       	mov	r24, r19
    19e2:	86 83       	std	Z+6, r24	; 0x06
	EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    19e4:	27 83       	std	Z+7, r18	; 0x07
		
	EthFrame[DataOffset] = 0x50;
    19e6:	80 e5       	ldi	r24, 0x50	; 80
    19e8:	84 87       	std	Z+12, r24	; 0x0c
	EthFrame[ControlBits] = SYN;
    19ea:	e5 86       	std	Z+13, r14	; 0x0d
	//EthFrame[14] = 0x00;
	EthFrame[WindowSize] = 0xff;
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	87 87       	std	Z+15, r24	; 0x0f
		
	uint16_t CheckSum = TcpCheckSumCalc(0x00);
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
	EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    19f8:	f8 01       	movw	r30, r16
    19fa:	90 8b       	std	Z+16, r25	; 0x10
	EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    19fc:	81 8b       	std	Z+17, r24	; 0x11
		
	EthFrame[DataPointer0] = 0x00;
    19fe:	12 8a       	std	Z+18, r1	; 0x12
	EthFrame[DataPointer1] = 0x00;
    1a00:	13 8a       	std	Z+19, r1	; 0x13
		
	//Wysy³anie do RTL8019as
	PacketSize = 14+20+20;
    1a02:	86 e3       	ldi	r24, 0x36	; 54
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	90 93 df 02 	sts	0x02DF, r25
    1a0a:	80 93 de 02 	sts	0x02DE, r24
	RTLsend_packet();
    1a0e:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
		
	//Czekanie na segment TCP z potwierdzeniem
	while((uint8_t)RTLreceive_packet()!=0x01) {}
    1a12:	0e 94 b4 03 	call	0x768	; 0x768 <RTLreceive_packet>
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <Tcp_Open_Active+0xa4>
		
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    1a1a:	20 91 e4 02 	lds	r18, 0x02E4
    1a1e:	90 91 e5 02 	lds	r25, 0x02E5
    1a22:	80 91 9c 01 	lds	r24, 0x019C
    1a26:	89 17       	cp	r24, r25
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <Tcp_Open_Active+0xbe>
    1a2a:	dd c0       	rjmp	.+442    	; 0x1be6 <Tcp_Open_Active+0x278>
    1a2c:	80 91 9d 01 	lds	r24, 0x019D
    1a30:	82 17       	cp	r24, r18
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <Tcp_Open_Active+0xc8>
    1a34:	d8 c0       	rjmp	.+432    	; 0x1be6 <Tcp_Open_Active+0x278>
    1a36:	80 91 9a 01 	lds	r24, 0x019A
    1a3a:	88 16       	cp	r8, r24
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <Tcp_Open_Active+0xd2>
    1a3e:	d3 c0       	rjmp	.+422    	; 0x1be6 <Tcp_Open_Active+0x278>
    1a40:	80 91 9b 01 	lds	r24, 0x019B
    1a44:	78 16       	cp	r7, r24
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <Tcp_Open_Active+0xdc>
    1a48:	ce c0       	rjmp	.+412    	; 0x1be6 <Tcp_Open_Active+0x278>
    1a4a:	80 91 a7 01 	lds	r24, 0x01A7
    1a4e:	82 31       	cpi	r24, 0x12	; 18
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <Tcp_Open_Active+0xe6>
    1a52:	c9 c0       	rjmp	.+402    	; 0x1be6 <Tcp_Open_Active+0x278>
    1a54:	80 91 66 01 	lds	r24, 0x0166
    1a58:	82 30       	cpi	r24, 0x02	; 2
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <Tcp_Open_Active+0xf0>
    1a5c:	c4 c0       	rjmp	.+392    	; 0x1be6 <Tcp_Open_Active+0x278>
    1a5e:	20 91 a5 01 	lds	r18, 0x01A5
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	80 91 69 01 	lds	r24, 0x0169
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	28 17       	cp	r18, r24
    1a6e:	39 07       	cpc	r19, r25
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <Tcp_Open_Active+0x106>
    1a72:	b9 c0       	rjmp	.+370    	; 0x1be6 <Tcp_Open_Active+0x278>
			
		//Przepisz ack_number
		ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
		ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
		ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
		ack_number += (uint32_t)EthFrame[SeqNumber3];
    1a74:	0e e9       	ldi	r16, 0x9E	; 158
    1a76:	11 e0       	ldi	r17, 0x01	; 1
    1a78:	f8 01       	movw	r30, r16
    1a7a:	21 91       	ld	r18, Z+
    1a7c:	7f 01       	movw	r14, r30
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	52 2f       	mov	r21, r18
    1a86:	44 27       	eor	r20, r20
    1a88:	33 27       	eor	r19, r19
    1a8a:	22 27       	eor	r18, r18
    1a8c:	80 81       	ld	r24, Z
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	dc 01       	movw	r26, r24
    1a96:	99 27       	eor	r25, r25
    1a98:	88 27       	eor	r24, r24
    1a9a:	28 0f       	add	r18, r24
    1a9c:	39 1f       	adc	r19, r25
    1a9e:	4a 1f       	adc	r20, r26
    1aa0:	5b 1f       	adc	r21, r27
    1aa2:	0f 2e       	mov	r0, r31
    1aa4:	f3 e0       	ldi	r31, 0x03	; 3
    1aa6:	af 2e       	mov	r10, r31
    1aa8:	bb 24       	eor	r11, r11
    1aaa:	f0 2d       	mov	r31, r0
    1aac:	a0 0e       	add	r10, r16
    1aae:	b1 1e       	adc	r11, r17
    1ab0:	f5 01       	movw	r30, r10
    1ab2:	80 81       	ld	r24, Z
    1ab4:	28 0f       	add	r18, r24
    1ab6:	31 1d       	adc	r19, r1
    1ab8:	41 1d       	adc	r20, r1
    1aba:	51 1d       	adc	r21, r1
    1abc:	cc 24       	eor	r12, r12
    1abe:	dd 24       	eor	r13, r13
    1ac0:	68 94       	set
    1ac2:	c1 f8       	bld	r12, 1
    1ac4:	c0 0e       	add	r12, r16
    1ac6:	d1 1e       	adc	r13, r17
    1ac8:	f6 01       	movw	r30, r12
    1aca:	80 81       	ld	r24, Z
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a0 e0       	ldi	r26, 0x00	; 0
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ba 2f       	mov	r27, r26
    1ad4:	a9 2f       	mov	r26, r25
    1ad6:	98 2f       	mov	r25, r24
    1ad8:	88 27       	eor	r24, r24
    1ada:	28 0f       	add	r18, r24
    1adc:	39 1f       	adc	r19, r25
    1ade:	4a 1f       	adc	r20, r26
    1ae0:	5b 1f       	adc	r21, r27
		
		//Wysy³anie potwierdzenia
		Tcp_Status = Established;
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	f3 e0       	ldi	r31, 0x03	; 3
    1ae6:	9f 2e       	mov	r9, r31
    1ae8:	f0 2d       	mov	r31, r0
    1aea:	90 92 66 01 	sts	0x0166, r9
		seq_number+=0x01;
    1aee:	80 91 69 01 	lds	r24, 0x0169
    1af2:	90 91 6a 01 	lds	r25, 0x016A
    1af6:	a0 91 6b 01 	lds	r26, 0x016B
    1afa:	b0 91 6c 01 	lds	r27, 0x016C
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	a1 1d       	adc	r26, r1
    1b02:	b1 1d       	adc	r27, r1
    1b04:	80 93 69 01 	sts	0x0169, r24
    1b08:	90 93 6a 01 	sts	0x016A, r25
    1b0c:	a0 93 6b 01 	sts	0x016B, r26
    1b10:	b0 93 6c 01 	sts	0x016C, r27
		ack_number+=0x01;
    1b14:	2f 5f       	subi	r18, 0xFF	; 255
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	4f 4f       	sbci	r20, 0xFF	; 255
    1b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1c:	20 93 d6 02 	sts	0x02D6, r18
    1b20:	30 93 d7 02 	sts	0x02D7, r19
    1b24:	40 93 d8 02 	sts	0x02D8, r20
    1b28:	50 93 d9 02 	sts	0x02D9, r21
		
		MakeIpHeader(0x06,0x14);
    1b2c:	86 e0       	ldi	r24, 0x06	; 6
    1b2e:	64 e1       	ldi	r22, 0x14	; 20
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1b36:	80 92 9a 01 	sts	0x019A, r8
		EthFrame[SourcePort1] = (uint8_t)(port);
    1b3a:	70 92 9b 01 	sts	0x019B, r7
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1b3e:	90 91 e4 02 	lds	r25, 0x02E4
    1b42:	80 91 e5 02 	lds	r24, 0x02E5
    1b46:	80 93 9c 01 	sts	0x019C, r24
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1b4a:	90 93 9d 01 	sts	0x019D, r25
		
		EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1b4e:	20 91 69 01 	lds	r18, 0x0169
    1b52:	30 91 6a 01 	lds	r19, 0x016A
    1b56:	40 91 6b 01 	lds	r20, 0x016B
    1b5a:	50 91 6c 01 	lds	r21, 0x016C
    1b5e:	85 2f       	mov	r24, r21
    1b60:	99 27       	eor	r25, r25
    1b62:	aa 27       	eor	r26, r26
    1b64:	bb 27       	eor	r27, r27
    1b66:	f8 01       	movw	r30, r16
    1b68:	80 83       	st	Z, r24
		EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    1b6a:	ca 01       	movw	r24, r20
    1b6c:	aa 27       	eor	r26, r26
    1b6e:	bb 27       	eor	r27, r27
    1b70:	f7 01       	movw	r30, r14
    1b72:	80 83       	st	Z, r24
		EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1b74:	bb 27       	eor	r27, r27
    1b76:	a5 2f       	mov	r26, r21
    1b78:	94 2f       	mov	r25, r20
    1b7a:	83 2f       	mov	r24, r19
    1b7c:	f6 01       	movw	r30, r12
    1b7e:	80 83       	st	Z, r24
		EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    1b80:	f5 01       	movw	r30, r10
    1b82:	20 83       	st	Z, r18
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    1b84:	20 91 d6 02 	lds	r18, 0x02D6
    1b88:	30 91 d7 02 	lds	r19, 0x02D7
    1b8c:	40 91 d8 02 	lds	r20, 0x02D8
    1b90:	50 91 d9 02 	lds	r21, 0x02D9
    1b94:	85 2f       	mov	r24, r21
    1b96:	99 27       	eor	r25, r25
    1b98:	aa 27       	eor	r26, r26
    1b9a:	bb 27       	eor	r27, r27
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	84 83       	std	Z+4, r24	; 0x04
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    1ba0:	ca 01       	movw	r24, r20
    1ba2:	aa 27       	eor	r26, r26
    1ba4:	bb 27       	eor	r27, r27
    1ba6:	85 83       	std	Z+5, r24	; 0x05
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    1ba8:	bb 27       	eor	r27, r27
    1baa:	a5 2f       	mov	r26, r21
    1bac:	94 2f       	mov	r25, r20
    1bae:	83 2f       	mov	r24, r19
    1bb0:	86 83       	std	Z+6, r24	; 0x06
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    1bb2:	27 83       	std	Z+7, r18	; 0x07
				
		EthFrame[DataOffset] = 0x50;
    1bb4:	80 e5       	ldi	r24, 0x50	; 80
    1bb6:	80 87       	std	Z+8, r24	; 0x08
		EthFrame[ControlBits] = ACK;
    1bb8:	80 e1       	ldi	r24, 0x10	; 16
    1bba:	81 87       	std	Z+9, r24	; 0x09
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	83 87       	std	Z+11, r24	; 0x0b
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1bc8:	f8 01       	movw	r30, r16
    1bca:	94 87       	std	Z+12, r25	; 0x0c
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1bcc:	85 87       	std	Z+13, r24	; 0x0d
		
		EthFrame[DataPointer0] = 0x00;
    1bce:	16 86       	std	Z+14, r1	; 0x0e
		EthFrame[DataPointer1] = 0x00;
    1bd0:	17 86       	std	Z+15, r1	; 0x0f
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1bd2:	86 e3       	ldi	r24, 0x36	; 54
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	90 93 df 02 	sts	0x02DF, r25
    1bda:	80 93 de 02 	sts	0x02DE, r24
		RTLsend_packet();
    1bde:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
		
		//Ustanowiono po³¹czenie
		Tcp_Status = Established;
    1be2:	90 92 66 01 	sts	0x0166, r9
	}	
}
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	df 90       	pop	r13
    1bf0:	cf 90       	pop	r12
    1bf2:	bf 90       	pop	r11
    1bf4:	af 90       	pop	r10
    1bf6:	9f 90       	pop	r9
    1bf8:	8f 90       	pop	r8
    1bfa:	7f 90       	pop	r7
    1bfc:	08 95       	ret

00001bfe <Tcp_Open_Pasive>:
	return ((unsigned int)sum);
	
}//Koniec funkcji obliczaj¹cej sumê kontroln¹

//Oczekiwanie na pakiet TCP na konkretnym porcie (serwer w stanie LISTEN)
void Tcp_Open_Pasive(uint16_t port) {
    1bfe:	8f 92       	push	r8
    1c00:	9f 92       	push	r9
    1c02:	af 92       	push	r10
    1c04:	bf 92       	push	r11
    1c06:	cf 92       	push	r12
    1c08:	df 92       	push	r13
    1c0a:	ef 92       	push	r14
    1c0c:	ff 92       	push	r15
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
	if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    1c16:	b0 90 9c 01 	lds	r11, 0x019C
    1c1a:	b9 16       	cp	r11, r25
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <Tcp_Open_Pasive+0x22>
    1c1e:	06 c1       	rjmp	.+524    	; 0x1e2c <Tcp_Open_Pasive+0x22e>
    1c20:	a0 90 9d 01 	lds	r10, 0x019D
    1c24:	a8 16       	cp	r10, r24
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <Tcp_Open_Pasive+0x2c>
    1c28:	01 c1       	rjmp	.+514    	; 0x1e2c <Tcp_Open_Pasive+0x22e>
    1c2a:	80 91 a7 01 	lds	r24, 0x01A7
    1c2e:	82 30       	cpi	r24, 0x02	; 2
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <Tcp_Open_Pasive+0x36>
    1c32:	fc c0       	rjmp	.+504    	; 0x1e2c <Tcp_Open_Pasive+0x22e>
		&& EthFrame[ControlBits] == SYN) {
		//Odebrano flagê Syn
		Tcp_Status = SynReceived;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 66 01 	sts	0x0166, r24
		
		dest_port = (EthFrame[SourcePort0]<<8);
		dest_port += EthFrame[SourcePort1];
    1c3a:	0a e9       	ldi	r16, 0x9A	; 154
    1c3c:	11 e0       	ldi	r17, 0x01	; 1
    1c3e:	d8 01       	movw	r26, r16
    1c40:	9d 91       	ld	r25, X+
    1c42:	7d 01       	movw	r14, r26
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	2c 91       	ld	r18, X
    1c48:	82 0f       	add	r24, r18
    1c4a:	91 1d       	adc	r25, r1
    1c4c:	90 93 e5 02 	sts	0x02E5, r25
    1c50:	80 93 e4 02 	sts	0x02E4, r24

		MakeIpHeader(0x06,0x14);
    1c54:	86 e0       	ldi	r24, 0x06	; 6
    1c56:	64 e1       	ldi	r22, 0x14	; 20
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1c5e:	e8 01       	movw	r28, r16
    1c60:	b8 82       	st	Y, r11
		EthFrame[SourcePort1] = (uint8_t)(port);
    1c62:	f7 01       	movw	r30, r14
    1c64:	a0 82       	st	Z, r10
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1c66:	90 91 e4 02 	lds	r25, 0x02E4
    1c6a:	80 91 e5 02 	lds	r24, 0x02E5
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1c70:	9b 83       	std	Y+3, r25	; 0x03
		
		EthFrame[AckNumber0] = EthFrame[SeqNumber0];
    1c72:	cc 24       	eor	r12, r12
    1c74:	dd 24       	eor	r13, r13
    1c76:	68 94       	set
    1c78:	c2 f8       	bld	r12, 2
    1c7a:	c0 0e       	add	r12, r16
    1c7c:	d1 1e       	adc	r13, r17
    1c7e:	d6 01       	movw	r26, r12
    1c80:	8c 91       	ld	r24, X
    1c82:	88 87       	std	Y+8, r24	; 0x08
		EthFrame[AckNumber1] = EthFrame[SeqNumber1];
    1c84:	0f 2e       	mov	r0, r31
    1c86:	f5 e0       	ldi	r31, 0x05	; 5
    1c88:	ef 2e       	mov	r14, r31
    1c8a:	ff 24       	eor	r15, r15
    1c8c:	f0 2d       	mov	r31, r0
    1c8e:	e0 0e       	add	r14, r16
    1c90:	f1 1e       	adc	r15, r17
    1c92:	e7 01       	movw	r28, r14
    1c94:	88 81       	ld	r24, Y
    1c96:	f8 01       	movw	r30, r16
    1c98:	81 87       	std	Z+9, r24	; 0x09
		EthFrame[AckNumber2] = EthFrame[SeqNumber2];
    1c9a:	b8 01       	movw	r22, r16
    1c9c:	6a 5f       	subi	r22, 0xFA	; 250
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	db 01       	movw	r26, r22
    1ca2:	8c 91       	ld	r24, X
    1ca4:	82 87       	std	Z+10, r24	; 0x0a
		EthFrame[AckNumber3] = (EthFrame[SeqNumber3] + 1);
    1ca6:	37 96       	adiw	r30, 0x07	; 7
    1ca8:	80 81       	ld	r24, Z
    1caa:	8f 5f       	subi	r24, 0xFF	; 255
    1cac:	e8 01       	movw	r28, r16
    1cae:	8b 87       	std	Y+11, r24	; 0x0b
		
		EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1cb0:	20 91 69 01 	lds	r18, 0x0169
    1cb4:	30 91 6a 01 	lds	r19, 0x016A
    1cb8:	40 91 6b 01 	lds	r20, 0x016B
    1cbc:	50 91 6c 01 	lds	r21, 0x016C
    1cc0:	85 2f       	mov	r24, r21
    1cc2:	99 27       	eor	r25, r25
    1cc4:	aa 27       	eor	r26, r26
    1cc6:	bb 27       	eor	r27, r27
    1cc8:	e6 01       	movw	r28, r12
    1cca:	88 83       	st	Y, r24
		EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    1ccc:	ca 01       	movw	r24, r20
    1cce:	aa 27       	eor	r26, r26
    1cd0:	bb 27       	eor	r27, r27
    1cd2:	e7 01       	movw	r28, r14
    1cd4:	88 83       	st	Y, r24
		EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1cd6:	bb 27       	eor	r27, r27
    1cd8:	a5 2f       	mov	r26, r21
    1cda:	94 2f       	mov	r25, r20
    1cdc:	83 2f       	mov	r24, r19
    1cde:	eb 01       	movw	r28, r22
    1ce0:	88 83       	st	Y, r24
		EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    1ce2:	20 83       	st	Z, r18
		
		EthFrame[DataOffset] = 0x50;
    1ce4:	80 e5       	ldi	r24, 0x50	; 80
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	84 87       	std	Z+12, r24	; 0x0c
		EthFrame[ControlBits] = (SYN|ACK);
    1cea:	82 e1       	ldi	r24, 0x12	; 18
    1cec:	85 87       	std	Z+13, r24	; 0x0d
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	87 87       	std	Z+15, r24	; 0x0f
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 77 08 	call	0x10ee	; 0x10ee <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1cfa:	d8 01       	movw	r26, r16
    1cfc:	50 96       	adiw	r26, 0x10	; 16
    1cfe:	9c 93       	st	X, r25
    1d00:	50 97       	sbiw	r26, 0x10	; 16
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1d02:	51 96       	adiw	r26, 0x11	; 17
    1d04:	8c 93       	st	X, r24
    1d06:	51 97       	sbiw	r26, 0x11	; 17
		
		EthFrame[DataPointer0] = 0x00;
    1d08:	52 96       	adiw	r26, 0x12	; 18
    1d0a:	1c 92       	st	X, r1
    1d0c:	52 97       	sbiw	r26, 0x12	; 18
		EthFrame[DataPointer1] = 0x00;
    1d0e:	53 96       	adiw	r26, 0x13	; 19
    1d10:	1c 92       	st	X, r1
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1d12:	86 e3       	ldi	r24, 0x36	; 54
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	90 93 df 02 	sts	0x02DF, r25
    1d1a:	80 93 de 02 	sts	0x02DE, r24
		RTLsend_packet();
    1d1e:	0e 94 18 03 	call	0x630	; 0x630 <RTLsend_packet>
    1d22:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t i=0x00;
		
		for(i=0x00; i<10; i++) { //Je¿eli nie bêdzie ACK w 10 nastêpnych pakietach po³¹czenie nie zostanie ustanowione
			while((uint8_t)RTLreceive_packet()!=0x01) {}
			
			if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    1d24:	cc e9       	ldi	r28, 0x9C	; 156
    1d26:	d1 e0       	ldi	r29, 0x01	; 1
    1d28:	0f 2e       	mov	r0, r31
    1d2a:	fd e9       	ldi	r31, 0x9D	; 157
    1d2c:	ef 2e       	mov	r14, r31
    1d2e:	f1 e0       	ldi	r31, 0x01	; 1
    1d30:	ff 2e       	mov	r15, r31
    1d32:	f0 2d       	mov	r31, r0
    1d34:	0f 2e       	mov	r0, r31
    1d36:	f7 ea       	ldi	r31, 0xA7	; 167
    1d38:	cf 2e       	mov	r12, r31
    1d3a:	f1 e0       	ldi	r31, 0x01	; 1
    1d3c:	df 2e       	mov	r13, r31
    1d3e:	f0 2d       	mov	r31, r0
    1d40:	0f 2e       	mov	r0, r31
    1d42:	f5 ea       	ldi	r31, 0xA5	; 165
    1d44:	8f 2e       	mov	r8, r31
    1d46:	f1 e0       	ldi	r31, 0x01	; 1
    1d48:	9f 2e       	mov	r9, r31
    1d4a:	f0 2d       	mov	r31, r0
		
		//Czekanie na segment TCP z potwierdzeniem
		uint8_t i=0x00;
		
		for(i=0x00; i<10; i++) { //Je¿eli nie bêdzie ACK w 10 nastêpnych pakietach po³¹czenie nie zostanie ustanowione
			while((uint8_t)RTLreceive_packet()!=0x01) {}
    1d4c:	0e 94 b4 03 	call	0x768	; 0x768 <RTLreceive_packet>
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	e1 f7       	brne	.-8      	; 0x1d4c <Tcp_Open_Pasive+0x14e>
			
			if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    1d54:	88 81       	ld	r24, Y
    1d56:	b8 16       	cp	r11, r24
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <Tcp_Open_Pasive+0x15e>
    1d5a:	64 c0       	rjmp	.+200    	; 0x1e24 <Tcp_Open_Pasive+0x226>
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	80 81       	ld	r24, Z
    1d60:	a8 16       	cp	r10, r24
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <Tcp_Open_Pasive+0x168>
    1d64:	5f c0       	rjmp	.+190    	; 0x1e24 <Tcp_Open_Pasive+0x226>
    1d66:	d6 01       	movw	r26, r12
    1d68:	8c 91       	ld	r24, X
    1d6a:	80 31       	cpi	r24, 0x10	; 16
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <Tcp_Open_Pasive+0x172>
    1d6e:	5a c0       	rjmp	.+180    	; 0x1e24 <Tcp_Open_Pasive+0x226>
    1d70:	80 91 66 01 	lds	r24, 0x0166
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <Tcp_Open_Pasive+0x17c>
    1d78:	55 c0       	rjmp	.+170    	; 0x1e24 <Tcp_Open_Pasive+0x226>
    1d7a:	f4 01       	movw	r30, r8
    1d7c:	20 81       	ld	r18, Z
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	80 91 da 02 	lds	r24, 0x02DA
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	28 17       	cp	r18, r24
    1d8a:	39 07       	cpc	r19, r25
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <Tcp_Open_Pasive+0x192>
    1d8e:	4a c0       	rjmp	.+148    	; 0x1e24 <Tcp_Open_Pasive+0x226>
				
				//Przepisz ack_number
				ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
				ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
				ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
				ack_number += (uint32_t)EthFrame[SeqNumber3];
    1d90:	6e e9       	ldi	r22, 0x9E	; 158
    1d92:	71 e0       	ldi	r23, 0x01	; 1
    1d94:	fb 01       	movw	r30, r22
    1d96:	21 91       	ld	r18, Z+
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	52 2f       	mov	r21, r18
    1da0:	44 27       	eor	r20, r20
    1da2:	33 27       	eor	r19, r19
    1da4:	22 27       	eor	r18, r18
    1da6:	80 81       	ld	r24, Z
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 e0       	ldi	r26, 0x00	; 0
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	dc 01       	movw	r26, r24
    1db0:	99 27       	eor	r25, r25
    1db2:	88 27       	eor	r24, r24
    1db4:	28 0f       	add	r18, r24
    1db6:	39 1f       	adc	r19, r25
    1db8:	4a 1f       	adc	r20, r26
    1dba:	5b 1f       	adc	r21, r27
    1dbc:	db 01       	movw	r26, r22
    1dbe:	13 96       	adiw	r26, 0x03	; 3
    1dc0:	8c 91       	ld	r24, X
    1dc2:	13 97       	sbiw	r26, 0x03	; 3
    1dc4:	28 0f       	add	r18, r24
    1dc6:	31 1d       	adc	r19, r1
    1dc8:	41 1d       	adc	r20, r1
    1dca:	51 1d       	adc	r21, r1
    1dcc:	12 96       	adiw	r26, 0x02	; 2
    1dce:	8c 91       	ld	r24, X
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 e0       	ldi	r26, 0x00	; 0
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ba 2f       	mov	r27, r26
    1dd8:	a9 2f       	mov	r26, r25
    1dda:	98 2f       	mov	r25, r24
    1ddc:	88 27       	eor	r24, r24
    1dde:	28 0f       	add	r18, r24
    1de0:	39 1f       	adc	r19, r25
    1de2:	4a 1f       	adc	r20, r26
    1de4:	5b 1f       	adc	r21, r27
    1de6:	20 93 d6 02 	sts	0x02D6, r18
    1dea:	30 93 d7 02 	sts	0x02D7, r19
    1dee:	40 93 d8 02 	sts	0x02D8, r20
    1df2:	50 93 d9 02 	sts	0x02D9, r21
			
				//Ustanowiono po³¹czenie
				Tcp_Status = Established;
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	80 93 66 01 	sts	0x0166, r24
				seq_number+=0x01;
    1dfc:	80 91 69 01 	lds	r24, 0x0169
    1e00:	90 91 6a 01 	lds	r25, 0x016A
    1e04:	a0 91 6b 01 	lds	r26, 0x016B
    1e08:	b0 91 6c 01 	lds	r27, 0x016C
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	a1 1d       	adc	r26, r1
    1e10:	b1 1d       	adc	r27, r1
    1e12:	80 93 69 01 	sts	0x0169, r24
    1e16:	90 93 6a 01 	sts	0x016A, r25
    1e1a:	a0 93 6b 01 	sts	0x016B, r26
    1e1e:	b0 93 6c 01 	sts	0x016C, r27
    1e22:	04 c0       	rjmp	.+8      	; 0x1e2c <Tcp_Open_Pasive+0x22e>
		RTLsend_packet();
		
		//Czekanie na segment TCP z potwierdzeniem
		uint8_t i=0x00;
		
		for(i=0x00; i<10; i++) { //Je¿eli nie bêdzie ACK w 10 nastêpnych pakietach po³¹czenie nie zostanie ustanowione
    1e24:	0f 5f       	subi	r16, 0xFF	; 255
    1e26:	0a 30       	cpi	r16, 0x0A	; 10
    1e28:	08 f4       	brcc	.+2      	; 0x1e2c <Tcp_Open_Pasive+0x22e>
    1e2a:	90 cf       	rjmp	.-224    	; 0x1d4c <Tcp_Open_Pasive+0x14e>
				break;
			}
		}
		
	}
}
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	bf 90       	pop	r11
    1e3e:	af 90       	pop	r10
    1e40:	9f 90       	pop	r9
    1e42:	8f 90       	pop	r8
    1e44:	08 95       	ret

00001e46 <Tcp_Check>:
	//Wysy³anie do RTL8019as
	PacketSize = 14+20+20+data_lenght;
	RTLsend_packet();	
}

void Tcp_Check(uint16_t port) {
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	8c 01       	movw	r16, r24
	
	//Nas³uch na porcie
	Tcp_Open_Pasive(port);
    1e4c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <Tcp_Open_Pasive>
	//Zamkniêcie po³¹czenia na porcie 
	Tcp_Fin_Pasive(port);
    1e50:	c8 01       	movw	r24, r16
    1e52:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <Tcp_Fin_Pasive>
		Tcp_Send_Data(port,0x03);
		EthFrame[14+20+20] = 0x0d;
		EthFrame[14+20+21] = 0x0a;
		Tcp_Send_Data(port,0x02);
	}*/
}
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <Http_Check>:
#include <util/delay.h>
#include <avr/pgmspace.h>
#include "page_data.h"
#include "http_protocol.h"

void Http_Check(void) {
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
	//while(RTLreceive_packet()!=0x01) {}
	if(EthFrame[HttpData+0] == 'G' && EthFrame[HttpData+1] == 'E' && EthFrame[HttpData+2] == 'T'
    1e64:	80 91 ae 01 	lds	r24, 0x01AE
    1e68:	87 34       	cpi	r24, 0x47	; 71
    1e6a:	e9 f4       	brne	.+58     	; 0x1ea6 <Http_Check+0x4a>
    1e6c:	80 91 af 01 	lds	r24, 0x01AF
    1e70:	85 34       	cpi	r24, 0x45	; 69
    1e72:	c9 f4       	brne	.+50     	; 0x1ea6 <Http_Check+0x4a>
    1e74:	80 91 b0 01 	lds	r24, 0x01B0
    1e78:	84 35       	cpi	r24, 0x54	; 84
    1e7a:	a9 f4       	brne	.+42     	; 0x1ea6 <Http_Check+0x4a>
		/*&& Tcp_Status == Established*/) {
		Tcp_Send_Ack(0x1F90);
    1e7c:	80 e9       	ldi	r24, 0x90	; 144
    1e7e:	9f e1       	ldi	r25, 0x1F	; 31
    1e80:	0e 94 94 09 	call	0x1328	; 0x1328 <Tcp_Send_Ack>
		
		strncpy_P(&EthFrame[14+20+20],content,strlen_P(content));
    1e84:	00 e7       	ldi	r16, 0x70	; 112
    1e86:	10 e0       	ldi	r17, 0x00	; 0
    1e88:	c8 01       	movw	r24, r16
    1e8a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <strlen_P>
    1e8e:	7c 01       	movw	r14, r24
    1e90:	8e ea       	ldi	r24, 0xAE	; 174
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	b8 01       	movw	r22, r16
    1e96:	a7 01       	movw	r20, r14
    1e98:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <strncpy_P>
		Tcp_Send_Data(0x1F90, strlen_P(content));
    1e9c:	80 e9       	ldi	r24, 0x90	; 144
    1e9e:	9f e1       	ldi	r25, 0x1F	; 31
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	0e 94 1c 09 	call	0x1238	; 0x1238 <Tcp_Send_Data>
		/*strncpy_P(&EthFrame[14+20+20],index1,strlen_P(index1));
		Tcp_Send_Data(0x1F90, strlen_P(index1));*/
		
		//Tcp_Fin_Active(0x1F90);
	}
}
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
    1eae:	08 95       	ret

00001eb0 <strlen_P>:
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	05 90       	lpm	r0, Z+
    1eb4:	00 20       	and	r0, r0
    1eb6:	e9 f7       	brne	.-6      	; 0x1eb2 <strlen_P+0x2>
    1eb8:	80 95       	com	r24
    1eba:	90 95       	com	r25
    1ebc:	8e 0f       	add	r24, r30
    1ebe:	9f 1f       	adc	r25, r31
    1ec0:	08 95       	ret

00001ec2 <strncpy_P>:
    1ec2:	fb 01       	movw	r30, r22
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	41 50       	subi	r20, 0x01	; 1
    1ec8:	50 40       	sbci	r21, 0x00	; 0
    1eca:	48 f0       	brcs	.+18     	; 0x1ede <strncpy_P+0x1c>
    1ecc:	05 90       	lpm	r0, Z+
    1ece:	0d 92       	st	X+, r0
    1ed0:	00 20       	and	r0, r0
    1ed2:	c9 f7       	brne	.-14     	; 0x1ec6 <strncpy_P+0x4>
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <strncpy_P+0x16>
    1ed6:	1d 92       	st	X+, r1
    1ed8:	41 50       	subi	r20, 0x01	; 1
    1eda:	50 40       	sbci	r21, 0x00	; 0
    1edc:	e0 f7       	brcc	.-8      	; 0x1ed6 <strncpy_P+0x14>
    1ede:	08 95       	ret

00001ee0 <fdevopen>:
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	8c 01       	movw	r16, r24
    1eea:	eb 01       	movw	r28, r22
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	31 f4       	brne	.+12     	; 0x1efc <fdevopen+0x1c>
    1ef0:	61 15       	cp	r22, r1
    1ef2:	71 05       	cpc	r23, r1
    1ef4:	19 f4       	brne	.+6      	; 0x1efc <fdevopen+0x1c>
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	38 c0       	rjmp	.+112    	; 0x1f6c <fdevopen+0x8c>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	6e e0       	ldi	r22, 0x0E	; 14
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <calloc>
    1f08:	fc 01       	movw	r30, r24
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	71 f1       	breq	.+92     	; 0x1f6c <fdevopen+0x8c>
    1f10:	80 e8       	ldi	r24, 0x80	; 128
    1f12:	83 83       	std	Z+3, r24	; 0x03
    1f14:	20 97       	sbiw	r28, 0x00	; 0
    1f16:	71 f0       	breq	.+28     	; 0x1f34 <fdevopen+0x54>
    1f18:	d3 87       	std	Z+11, r29	; 0x0b
    1f1a:	c2 87       	std	Z+10, r28	; 0x0a
    1f1c:	81 e8       	ldi	r24, 0x81	; 129
    1f1e:	83 83       	std	Z+3, r24	; 0x03
    1f20:	80 91 e8 02 	lds	r24, 0x02E8
    1f24:	90 91 e9 02 	lds	r25, 0x02E9
    1f28:	89 2b       	or	r24, r25
    1f2a:	21 f4       	brne	.+8      	; 0x1f34 <fdevopen+0x54>
    1f2c:	f0 93 e9 02 	sts	0x02E9, r31
    1f30:	e0 93 e8 02 	sts	0x02E8, r30
    1f34:	01 15       	cp	r16, r1
    1f36:	11 05       	cpc	r17, r1
    1f38:	c9 f0       	breq	.+50     	; 0x1f6c <fdevopen+0x8c>
    1f3a:	11 87       	std	Z+9, r17	; 0x09
    1f3c:	00 87       	std	Z+8, r16	; 0x08
    1f3e:	83 81       	ldd	r24, Z+3	; 0x03
    1f40:	82 60       	ori	r24, 0x02	; 2
    1f42:	83 83       	std	Z+3, r24	; 0x03
    1f44:	80 91 ea 02 	lds	r24, 0x02EA
    1f48:	90 91 eb 02 	lds	r25, 0x02EB
    1f4c:	89 2b       	or	r24, r25
    1f4e:	71 f4       	brne	.+28     	; 0x1f6c <fdevopen+0x8c>
    1f50:	f0 93 eb 02 	sts	0x02EB, r31
    1f54:	e0 93 ea 02 	sts	0x02EA, r30
    1f58:	80 91 ec 02 	lds	r24, 0x02EC
    1f5c:	90 91 ed 02 	lds	r25, 0x02ED
    1f60:	89 2b       	or	r24, r25
    1f62:	21 f4       	brne	.+8      	; 0x1f6c <fdevopen+0x8c>
    1f64:	f0 93 ed 02 	sts	0x02ED, r31
    1f68:	e0 93 ec 02 	sts	0x02EC, r30
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	08 95       	ret

00001f78 <printf>:
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e2 ec       	ldi	r30, 0xC2	; 194
    1f7e:	ff e0       	ldi	r31, 0x0F	; 15
    1f80:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__prologue_saves__+0x20>
    1f84:	fe 01       	movw	r30, r28
    1f86:	35 96       	adiw	r30, 0x05	; 5
    1f88:	61 91       	ld	r22, Z+
    1f8a:	71 91       	ld	r23, Z+
    1f8c:	80 91 ea 02 	lds	r24, 0x02EA
    1f90:	90 91 eb 02 	lds	r25, 0x02EB
    1f94:	af 01       	movw	r20, r30
    1f96:	0e 94 0d 10 	call	0x201a	; 0x201a <vfprintf>
    1f9a:	20 96       	adiw	r28, 0x00	; 0
    1f9c:	e2 e0       	ldi	r30, 0x02	; 2
    1f9e:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__epilogue_restores__+0x20>

00001fa2 <putchar>:
    1fa2:	60 91 ea 02 	lds	r22, 0x02EA
    1fa6:	70 91 eb 02 	lds	r23, 0x02EB
    1faa:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    1fae:	08 95       	ret

00001fb0 <puts>:
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	8c 01       	movw	r16, r24
    1fba:	e0 91 ea 02 	lds	r30, 0x02EA
    1fbe:	f0 91 eb 02 	lds	r31, 0x02EB
    1fc2:	83 81       	ldd	r24, Z+3	; 0x03
    1fc4:	81 ff       	sbrs	r24, 1
    1fc6:	21 c0       	rjmp	.+66     	; 0x200a <puts+0x5a>
    1fc8:	c0 e0       	ldi	r28, 0x00	; 0
    1fca:	d0 e0       	ldi	r29, 0x00	; 0
    1fcc:	0d c0       	rjmp	.+26     	; 0x1fe8 <puts+0x38>
    1fce:	e0 91 ea 02 	lds	r30, 0x02EA
    1fd2:	f0 91 eb 02 	lds	r31, 0x02EB
    1fd6:	20 85       	ldd	r18, Z+8	; 0x08
    1fd8:	31 85       	ldd	r19, Z+9	; 0x09
    1fda:	bf 01       	movw	r22, r30
    1fdc:	f9 01       	movw	r30, r18
    1fde:	09 95       	icall
    1fe0:	89 2b       	or	r24, r25
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <puts+0x38>
    1fe4:	cf ef       	ldi	r28, 0xFF	; 255
    1fe6:	df ef       	ldi	r29, 0xFF	; 255
    1fe8:	f8 01       	movw	r30, r16
    1fea:	81 91       	ld	r24, Z+
    1fec:	8f 01       	movw	r16, r30
    1fee:	88 23       	and	r24, r24
    1ff0:	71 f7       	brne	.-36     	; 0x1fce <puts+0x1e>
    1ff2:	e0 91 ea 02 	lds	r30, 0x02EA
    1ff6:	f0 91 eb 02 	lds	r31, 0x02EB
    1ffa:	20 85       	ldd	r18, Z+8	; 0x08
    1ffc:	31 85       	ldd	r19, Z+9	; 0x09
    1ffe:	8a e0       	ldi	r24, 0x0A	; 10
    2000:	bf 01       	movw	r22, r30
    2002:	f9 01       	movw	r30, r18
    2004:	09 95       	icall
    2006:	89 2b       	or	r24, r25
    2008:	11 f0       	breq	.+4      	; 0x200e <puts+0x5e>
    200a:	cf ef       	ldi	r28, 0xFF	; 255
    200c:	df ef       	ldi	r29, 0xFF	; 255
    200e:	ce 01       	movw	r24, r28
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	08 95       	ret

0000201a <vfprintf>:
    201a:	ab e0       	ldi	r26, 0x0B	; 11
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e3 e1       	ldi	r30, 0x13	; 19
    2020:	f0 e1       	ldi	r31, 0x10	; 16
    2022:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__prologue_saves__>
    2026:	3c 01       	movw	r6, r24
    2028:	2b 01       	movw	r4, r22
    202a:	5a 01       	movw	r10, r20
    202c:	fc 01       	movw	r30, r24
    202e:	17 82       	std	Z+7, r1	; 0x07
    2030:	16 82       	std	Z+6, r1	; 0x06
    2032:	83 81       	ldd	r24, Z+3	; 0x03
    2034:	81 fd       	sbrc	r24, 1
    2036:	03 c0       	rjmp	.+6      	; 0x203e <vfprintf+0x24>
    2038:	6f ef       	ldi	r22, 0xFF	; 255
    203a:	7f ef       	ldi	r23, 0xFF	; 255
    203c:	c6 c1       	rjmp	.+908    	; 0x23ca <vfprintf+0x3b0>
    203e:	9a e0       	ldi	r25, 0x0A	; 10
    2040:	89 2e       	mov	r8, r25
    2042:	1e 01       	movw	r2, r28
    2044:	08 94       	sec
    2046:	21 1c       	adc	r2, r1
    2048:	31 1c       	adc	r3, r1
    204a:	f3 01       	movw	r30, r6
    204c:	23 81       	ldd	r18, Z+3	; 0x03
    204e:	f2 01       	movw	r30, r4
    2050:	23 fd       	sbrc	r18, 3
    2052:	85 91       	lpm	r24, Z+
    2054:	23 ff       	sbrs	r18, 3
    2056:	81 91       	ld	r24, Z+
    2058:	2f 01       	movw	r4, r30
    205a:	88 23       	and	r24, r24
    205c:	09 f4       	brne	.+2      	; 0x2060 <vfprintf+0x46>
    205e:	b2 c1       	rjmp	.+868    	; 0x23c4 <vfprintf+0x3aa>
    2060:	85 32       	cpi	r24, 0x25	; 37
    2062:	39 f4       	brne	.+14     	; 0x2072 <vfprintf+0x58>
    2064:	23 fd       	sbrc	r18, 3
    2066:	85 91       	lpm	r24, Z+
    2068:	23 ff       	sbrs	r18, 3
    206a:	81 91       	ld	r24, Z+
    206c:	2f 01       	movw	r4, r30
    206e:	85 32       	cpi	r24, 0x25	; 37
    2070:	29 f4       	brne	.+10     	; 0x207c <vfprintf+0x62>
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	b3 01       	movw	r22, r6
    2076:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    207a:	e7 cf       	rjmp	.-50     	; 0x204a <vfprintf+0x30>
    207c:	98 2f       	mov	r25, r24
    207e:	ff 24       	eor	r15, r15
    2080:	ee 24       	eor	r14, r14
    2082:	99 24       	eor	r9, r9
    2084:	ff e1       	ldi	r31, 0x1F	; 31
    2086:	ff 15       	cp	r31, r15
    2088:	d0 f0       	brcs	.+52     	; 0x20be <vfprintf+0xa4>
    208a:	9b 32       	cpi	r25, 0x2B	; 43
    208c:	69 f0       	breq	.+26     	; 0x20a8 <vfprintf+0x8e>
    208e:	9c 32       	cpi	r25, 0x2C	; 44
    2090:	28 f4       	brcc	.+10     	; 0x209c <vfprintf+0x82>
    2092:	90 32       	cpi	r25, 0x20	; 32
    2094:	59 f0       	breq	.+22     	; 0x20ac <vfprintf+0x92>
    2096:	93 32       	cpi	r25, 0x23	; 35
    2098:	91 f4       	brne	.+36     	; 0x20be <vfprintf+0xa4>
    209a:	0e c0       	rjmp	.+28     	; 0x20b8 <vfprintf+0x9e>
    209c:	9d 32       	cpi	r25, 0x2D	; 45
    209e:	49 f0       	breq	.+18     	; 0x20b2 <vfprintf+0x98>
    20a0:	90 33       	cpi	r25, 0x30	; 48
    20a2:	69 f4       	brne	.+26     	; 0x20be <vfprintf+0xa4>
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	24 c0       	rjmp	.+72     	; 0x20f0 <vfprintf+0xd6>
    20a8:	52 e0       	ldi	r21, 0x02	; 2
    20aa:	f5 2a       	or	r15, r21
    20ac:	84 e0       	ldi	r24, 0x04	; 4
    20ae:	f8 2a       	or	r15, r24
    20b0:	28 c0       	rjmp	.+80     	; 0x2102 <vfprintf+0xe8>
    20b2:	98 e0       	ldi	r25, 0x08	; 8
    20b4:	f9 2a       	or	r15, r25
    20b6:	25 c0       	rjmp	.+74     	; 0x2102 <vfprintf+0xe8>
    20b8:	e0 e1       	ldi	r30, 0x10	; 16
    20ba:	fe 2a       	or	r15, r30
    20bc:	22 c0       	rjmp	.+68     	; 0x2102 <vfprintf+0xe8>
    20be:	f7 fc       	sbrc	r15, 7
    20c0:	29 c0       	rjmp	.+82     	; 0x2114 <vfprintf+0xfa>
    20c2:	89 2f       	mov	r24, r25
    20c4:	80 53       	subi	r24, 0x30	; 48
    20c6:	8a 30       	cpi	r24, 0x0A	; 10
    20c8:	70 f4       	brcc	.+28     	; 0x20e6 <vfprintf+0xcc>
    20ca:	f6 fe       	sbrs	r15, 6
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <vfprintf+0xbe>
    20ce:	98 9c       	mul	r9, r8
    20d0:	90 2c       	mov	r9, r0
    20d2:	11 24       	eor	r1, r1
    20d4:	98 0e       	add	r9, r24
    20d6:	15 c0       	rjmp	.+42     	; 0x2102 <vfprintf+0xe8>
    20d8:	e8 9c       	mul	r14, r8
    20da:	e0 2c       	mov	r14, r0
    20dc:	11 24       	eor	r1, r1
    20de:	e8 0e       	add	r14, r24
    20e0:	f0 e2       	ldi	r31, 0x20	; 32
    20e2:	ff 2a       	or	r15, r31
    20e4:	0e c0       	rjmp	.+28     	; 0x2102 <vfprintf+0xe8>
    20e6:	9e 32       	cpi	r25, 0x2E	; 46
    20e8:	29 f4       	brne	.+10     	; 0x20f4 <vfprintf+0xda>
    20ea:	f6 fc       	sbrc	r15, 6
    20ec:	6b c1       	rjmp	.+726    	; 0x23c4 <vfprintf+0x3aa>
    20ee:	40 e4       	ldi	r20, 0x40	; 64
    20f0:	f4 2a       	or	r15, r20
    20f2:	07 c0       	rjmp	.+14     	; 0x2102 <vfprintf+0xe8>
    20f4:	9c 36       	cpi	r25, 0x6C	; 108
    20f6:	19 f4       	brne	.+6      	; 0x20fe <vfprintf+0xe4>
    20f8:	50 e8       	ldi	r21, 0x80	; 128
    20fa:	f5 2a       	or	r15, r21
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <vfprintf+0xe8>
    20fe:	98 36       	cpi	r25, 0x68	; 104
    2100:	49 f4       	brne	.+18     	; 0x2114 <vfprintf+0xfa>
    2102:	f2 01       	movw	r30, r4
    2104:	23 fd       	sbrc	r18, 3
    2106:	95 91       	lpm	r25, Z+
    2108:	23 ff       	sbrs	r18, 3
    210a:	91 91       	ld	r25, Z+
    210c:	2f 01       	movw	r4, r30
    210e:	99 23       	and	r25, r25
    2110:	09 f0       	breq	.+2      	; 0x2114 <vfprintf+0xfa>
    2112:	b8 cf       	rjmp	.-144    	; 0x2084 <vfprintf+0x6a>
    2114:	89 2f       	mov	r24, r25
    2116:	85 54       	subi	r24, 0x45	; 69
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	18 f0       	brcs	.+6      	; 0x2122 <vfprintf+0x108>
    211c:	80 52       	subi	r24, 0x20	; 32
    211e:	83 30       	cpi	r24, 0x03	; 3
    2120:	38 f4       	brcc	.+14     	; 0x2130 <vfprintf+0x116>
    2122:	44 e0       	ldi	r20, 0x04	; 4
    2124:	50 e0       	ldi	r21, 0x00	; 0
    2126:	a4 0e       	add	r10, r20
    2128:	b5 1e       	adc	r11, r21
    212a:	5f e3       	ldi	r21, 0x3F	; 63
    212c:	59 83       	std	Y+1, r21	; 0x01
    212e:	0f c0       	rjmp	.+30     	; 0x214e <vfprintf+0x134>
    2130:	93 36       	cpi	r25, 0x63	; 99
    2132:	31 f0       	breq	.+12     	; 0x2140 <vfprintf+0x126>
    2134:	93 37       	cpi	r25, 0x73	; 115
    2136:	79 f0       	breq	.+30     	; 0x2156 <vfprintf+0x13c>
    2138:	93 35       	cpi	r25, 0x53	; 83
    213a:	09 f0       	breq	.+2      	; 0x213e <vfprintf+0x124>
    213c:	56 c0       	rjmp	.+172    	; 0x21ea <vfprintf+0x1d0>
    213e:	20 c0       	rjmp	.+64     	; 0x2180 <vfprintf+0x166>
    2140:	f5 01       	movw	r30, r10
    2142:	80 81       	ld	r24, Z
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	42 e0       	ldi	r20, 0x02	; 2
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	a4 0e       	add	r10, r20
    214c:	b5 1e       	adc	r11, r21
    214e:	61 01       	movw	r12, r2
    2150:	01 e0       	ldi	r16, 0x01	; 1
    2152:	10 e0       	ldi	r17, 0x00	; 0
    2154:	12 c0       	rjmp	.+36     	; 0x217a <vfprintf+0x160>
    2156:	f5 01       	movw	r30, r10
    2158:	c0 80       	ld	r12, Z
    215a:	d1 80       	ldd	r13, Z+1	; 0x01
    215c:	f6 fc       	sbrc	r15, 6
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <vfprintf+0x14c>
    2160:	6f ef       	ldi	r22, 0xFF	; 255
    2162:	7f ef       	ldi	r23, 0xFF	; 255
    2164:	02 c0       	rjmp	.+4      	; 0x216a <vfprintf+0x150>
    2166:	69 2d       	mov	r22, r9
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	42 e0       	ldi	r20, 0x02	; 2
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	a4 0e       	add	r10, r20
    2170:	b5 1e       	adc	r11, r21
    2172:	c6 01       	movw	r24, r12
    2174:	0e 94 1d 13 	call	0x263a	; 0x263a <strnlen>
    2178:	8c 01       	movw	r16, r24
    217a:	5f e7       	ldi	r21, 0x7F	; 127
    217c:	f5 22       	and	r15, r21
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <vfprintf+0x18e>
    2180:	f5 01       	movw	r30, r10
    2182:	c0 80       	ld	r12, Z
    2184:	d1 80       	ldd	r13, Z+1	; 0x01
    2186:	f6 fc       	sbrc	r15, 6
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <vfprintf+0x176>
    218a:	6f ef       	ldi	r22, 0xFF	; 255
    218c:	7f ef       	ldi	r23, 0xFF	; 255
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <vfprintf+0x17a>
    2190:	69 2d       	mov	r22, r9
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	42 e0       	ldi	r20, 0x02	; 2
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	a4 0e       	add	r10, r20
    219a:	b5 1e       	adc	r11, r21
    219c:	c6 01       	movw	r24, r12
    219e:	0e 94 0b 13 	call	0x2616	; 0x2616 <strnlen_P>
    21a2:	8c 01       	movw	r16, r24
    21a4:	50 e8       	ldi	r21, 0x80	; 128
    21a6:	f5 2a       	or	r15, r21
    21a8:	f3 fe       	sbrs	r15, 3
    21aa:	07 c0       	rjmp	.+14     	; 0x21ba <vfprintf+0x1a0>
    21ac:	1a c0       	rjmp	.+52     	; 0x21e2 <vfprintf+0x1c8>
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	b3 01       	movw	r22, r6
    21b4:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    21b8:	ea 94       	dec	r14
    21ba:	8e 2d       	mov	r24, r14
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	08 17       	cp	r16, r24
    21c0:	19 07       	cpc	r17, r25
    21c2:	a8 f3       	brcs	.-22     	; 0x21ae <vfprintf+0x194>
    21c4:	0e c0       	rjmp	.+28     	; 0x21e2 <vfprintf+0x1c8>
    21c6:	f6 01       	movw	r30, r12
    21c8:	f7 fc       	sbrc	r15, 7
    21ca:	85 91       	lpm	r24, Z+
    21cc:	f7 fe       	sbrs	r15, 7
    21ce:	81 91       	ld	r24, Z+
    21d0:	6f 01       	movw	r12, r30
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	b3 01       	movw	r22, r6
    21d6:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    21da:	e1 10       	cpse	r14, r1
    21dc:	ea 94       	dec	r14
    21de:	01 50       	subi	r16, 0x01	; 1
    21e0:	10 40       	sbci	r17, 0x00	; 0
    21e2:	01 15       	cp	r16, r1
    21e4:	11 05       	cpc	r17, r1
    21e6:	79 f7       	brne	.-34     	; 0x21c6 <vfprintf+0x1ac>
    21e8:	ea c0       	rjmp	.+468    	; 0x23be <vfprintf+0x3a4>
    21ea:	94 36       	cpi	r25, 0x64	; 100
    21ec:	11 f0       	breq	.+4      	; 0x21f2 <vfprintf+0x1d8>
    21ee:	99 36       	cpi	r25, 0x69	; 105
    21f0:	69 f5       	brne	.+90     	; 0x224c <vfprintf+0x232>
    21f2:	f7 fe       	sbrs	r15, 7
    21f4:	08 c0       	rjmp	.+16     	; 0x2206 <vfprintf+0x1ec>
    21f6:	f5 01       	movw	r30, r10
    21f8:	20 81       	ld	r18, Z
    21fa:	31 81       	ldd	r19, Z+1	; 0x01
    21fc:	42 81       	ldd	r20, Z+2	; 0x02
    21fe:	53 81       	ldd	r21, Z+3	; 0x03
    2200:	84 e0       	ldi	r24, 0x04	; 4
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0a c0       	rjmp	.+20     	; 0x221a <vfprintf+0x200>
    2206:	f5 01       	movw	r30, r10
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	9c 01       	movw	r18, r24
    220e:	44 27       	eor	r20, r20
    2210:	37 fd       	sbrc	r19, 7
    2212:	40 95       	com	r20
    2214:	54 2f       	mov	r21, r20
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a8 0e       	add	r10, r24
    221c:	b9 1e       	adc	r11, r25
    221e:	9f e6       	ldi	r25, 0x6F	; 111
    2220:	f9 22       	and	r15, r25
    2222:	57 ff       	sbrs	r21, 7
    2224:	09 c0       	rjmp	.+18     	; 0x2238 <vfprintf+0x21e>
    2226:	50 95       	com	r21
    2228:	40 95       	com	r20
    222a:	30 95       	com	r19
    222c:	21 95       	neg	r18
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	4f 4f       	sbci	r20, 0xFF	; 255
    2232:	5f 4f       	sbci	r21, 0xFF	; 255
    2234:	e0 e8       	ldi	r30, 0x80	; 128
    2236:	fe 2a       	or	r15, r30
    2238:	ca 01       	movw	r24, r20
    223a:	b9 01       	movw	r22, r18
    223c:	a1 01       	movw	r20, r2
    223e:	2a e0       	ldi	r18, 0x0A	; 10
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__ultoa_invert>
    2246:	d8 2e       	mov	r13, r24
    2248:	d2 18       	sub	r13, r2
    224a:	40 c0       	rjmp	.+128    	; 0x22cc <vfprintf+0x2b2>
    224c:	95 37       	cpi	r25, 0x75	; 117
    224e:	29 f4       	brne	.+10     	; 0x225a <vfprintf+0x240>
    2250:	1f 2d       	mov	r17, r15
    2252:	1f 7e       	andi	r17, 0xEF	; 239
    2254:	2a e0       	ldi	r18, 0x0A	; 10
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	1d c0       	rjmp	.+58     	; 0x2294 <vfprintf+0x27a>
    225a:	1f 2d       	mov	r17, r15
    225c:	19 7f       	andi	r17, 0xF9	; 249
    225e:	9f 36       	cpi	r25, 0x6F	; 111
    2260:	61 f0       	breq	.+24     	; 0x227a <vfprintf+0x260>
    2262:	90 37       	cpi	r25, 0x70	; 112
    2264:	20 f4       	brcc	.+8      	; 0x226e <vfprintf+0x254>
    2266:	98 35       	cpi	r25, 0x58	; 88
    2268:	09 f0       	breq	.+2      	; 0x226c <vfprintf+0x252>
    226a:	ac c0       	rjmp	.+344    	; 0x23c4 <vfprintf+0x3aa>
    226c:	0f c0       	rjmp	.+30     	; 0x228c <vfprintf+0x272>
    226e:	90 37       	cpi	r25, 0x70	; 112
    2270:	39 f0       	breq	.+14     	; 0x2280 <vfprintf+0x266>
    2272:	98 37       	cpi	r25, 0x78	; 120
    2274:	09 f0       	breq	.+2      	; 0x2278 <vfprintf+0x25e>
    2276:	a6 c0       	rjmp	.+332    	; 0x23c4 <vfprintf+0x3aa>
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <vfprintf+0x268>
    227a:	28 e0       	ldi	r18, 0x08	; 8
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	0a c0       	rjmp	.+20     	; 0x2294 <vfprintf+0x27a>
    2280:	10 61       	ori	r17, 0x10	; 16
    2282:	14 fd       	sbrc	r17, 4
    2284:	14 60       	ori	r17, 0x04	; 4
    2286:	20 e1       	ldi	r18, 0x10	; 16
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <vfprintf+0x27a>
    228c:	14 fd       	sbrc	r17, 4
    228e:	16 60       	ori	r17, 0x06	; 6
    2290:	20 e1       	ldi	r18, 0x10	; 16
    2292:	32 e0       	ldi	r19, 0x02	; 2
    2294:	17 ff       	sbrs	r17, 7
    2296:	08 c0       	rjmp	.+16     	; 0x22a8 <vfprintf+0x28e>
    2298:	f5 01       	movw	r30, r10
    229a:	60 81       	ld	r22, Z
    229c:	71 81       	ldd	r23, Z+1	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	93 81       	ldd	r25, Z+3	; 0x03
    22a2:	44 e0       	ldi	r20, 0x04	; 4
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	08 c0       	rjmp	.+16     	; 0x22b8 <vfprintf+0x29e>
    22a8:	f5 01       	movw	r30, r10
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	bc 01       	movw	r22, r24
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	42 e0       	ldi	r20, 0x02	; 2
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	a4 0e       	add	r10, r20
    22ba:	b5 1e       	adc	r11, r21
    22bc:	a1 01       	movw	r20, r2
    22be:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__ultoa_invert>
    22c2:	d8 2e       	mov	r13, r24
    22c4:	d2 18       	sub	r13, r2
    22c6:	8f e7       	ldi	r24, 0x7F	; 127
    22c8:	f8 2e       	mov	r15, r24
    22ca:	f1 22       	and	r15, r17
    22cc:	f6 fe       	sbrs	r15, 6
    22ce:	0b c0       	rjmp	.+22     	; 0x22e6 <vfprintf+0x2cc>
    22d0:	5e ef       	ldi	r21, 0xFE	; 254
    22d2:	f5 22       	and	r15, r21
    22d4:	d9 14       	cp	r13, r9
    22d6:	38 f4       	brcc	.+14     	; 0x22e6 <vfprintf+0x2cc>
    22d8:	f4 fe       	sbrs	r15, 4
    22da:	07 c0       	rjmp	.+14     	; 0x22ea <vfprintf+0x2d0>
    22dc:	f2 fc       	sbrc	r15, 2
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <vfprintf+0x2d0>
    22e0:	8f ee       	ldi	r24, 0xEF	; 239
    22e2:	f8 22       	and	r15, r24
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <vfprintf+0x2d0>
    22e6:	1d 2d       	mov	r17, r13
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <vfprintf+0x2d2>
    22ea:	19 2d       	mov	r17, r9
    22ec:	f4 fe       	sbrs	r15, 4
    22ee:	0d c0       	rjmp	.+26     	; 0x230a <vfprintf+0x2f0>
    22f0:	fe 01       	movw	r30, r28
    22f2:	ed 0d       	add	r30, r13
    22f4:	f1 1d       	adc	r31, r1
    22f6:	80 81       	ld	r24, Z
    22f8:	80 33       	cpi	r24, 0x30	; 48
    22fa:	19 f4       	brne	.+6      	; 0x2302 <vfprintf+0x2e8>
    22fc:	99 ee       	ldi	r25, 0xE9	; 233
    22fe:	f9 22       	and	r15, r25
    2300:	08 c0       	rjmp	.+16     	; 0x2312 <vfprintf+0x2f8>
    2302:	1f 5f       	subi	r17, 0xFF	; 255
    2304:	f2 fe       	sbrs	r15, 2
    2306:	05 c0       	rjmp	.+10     	; 0x2312 <vfprintf+0x2f8>
    2308:	03 c0       	rjmp	.+6      	; 0x2310 <vfprintf+0x2f6>
    230a:	8f 2d       	mov	r24, r15
    230c:	86 78       	andi	r24, 0x86	; 134
    230e:	09 f0       	breq	.+2      	; 0x2312 <vfprintf+0x2f8>
    2310:	1f 5f       	subi	r17, 0xFF	; 255
    2312:	0f 2d       	mov	r16, r15
    2314:	f3 fc       	sbrc	r15, 3
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <vfprintf+0x326>
    2318:	f0 fe       	sbrs	r15, 0
    231a:	0f c0       	rjmp	.+30     	; 0x233a <vfprintf+0x320>
    231c:	1e 15       	cp	r17, r14
    231e:	10 f0       	brcs	.+4      	; 0x2324 <vfprintf+0x30a>
    2320:	9d 2c       	mov	r9, r13
    2322:	0b c0       	rjmp	.+22     	; 0x233a <vfprintf+0x320>
    2324:	9d 2c       	mov	r9, r13
    2326:	9e 0c       	add	r9, r14
    2328:	91 1a       	sub	r9, r17
    232a:	1e 2d       	mov	r17, r14
    232c:	06 c0       	rjmp	.+12     	; 0x233a <vfprintf+0x320>
    232e:	80 e2       	ldi	r24, 0x20	; 32
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	b3 01       	movw	r22, r6
    2334:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2338:	1f 5f       	subi	r17, 0xFF	; 255
    233a:	1e 15       	cp	r17, r14
    233c:	c0 f3       	brcs	.-16     	; 0x232e <vfprintf+0x314>
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <vfprintf+0x32e>
    2340:	1e 15       	cp	r17, r14
    2342:	10 f4       	brcc	.+4      	; 0x2348 <vfprintf+0x32e>
    2344:	e1 1a       	sub	r14, r17
    2346:	01 c0       	rjmp	.+2      	; 0x234a <vfprintf+0x330>
    2348:	ee 24       	eor	r14, r14
    234a:	04 ff       	sbrs	r16, 4
    234c:	0f c0       	rjmp	.+30     	; 0x236c <vfprintf+0x352>
    234e:	80 e3       	ldi	r24, 0x30	; 48
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	b3 01       	movw	r22, r6
    2354:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2358:	02 ff       	sbrs	r16, 2
    235a:	1d c0       	rjmp	.+58     	; 0x2396 <vfprintf+0x37c>
    235c:	01 fd       	sbrc	r16, 1
    235e:	03 c0       	rjmp	.+6      	; 0x2366 <vfprintf+0x34c>
    2360:	88 e7       	ldi	r24, 0x78	; 120
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	0e c0       	rjmp	.+28     	; 0x2382 <vfprintf+0x368>
    2366:	88 e5       	ldi	r24, 0x58	; 88
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0b c0       	rjmp	.+22     	; 0x2382 <vfprintf+0x368>
    236c:	80 2f       	mov	r24, r16
    236e:	86 78       	andi	r24, 0x86	; 134
    2370:	91 f0       	breq	.+36     	; 0x2396 <vfprintf+0x37c>
    2372:	01 ff       	sbrs	r16, 1
    2374:	02 c0       	rjmp	.+4      	; 0x237a <vfprintf+0x360>
    2376:	8b e2       	ldi	r24, 0x2B	; 43
    2378:	01 c0       	rjmp	.+2      	; 0x237c <vfprintf+0x362>
    237a:	80 e2       	ldi	r24, 0x20	; 32
    237c:	f7 fc       	sbrc	r15, 7
    237e:	8d e2       	ldi	r24, 0x2D	; 45
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	b3 01       	movw	r22, r6
    2384:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2388:	06 c0       	rjmp	.+12     	; 0x2396 <vfprintf+0x37c>
    238a:	80 e3       	ldi	r24, 0x30	; 48
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	b3 01       	movw	r22, r6
    2390:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    2394:	9a 94       	dec	r9
    2396:	d9 14       	cp	r13, r9
    2398:	c0 f3       	brcs	.-16     	; 0x238a <vfprintf+0x370>
    239a:	da 94       	dec	r13
    239c:	f1 01       	movw	r30, r2
    239e:	ed 0d       	add	r30, r13
    23a0:	f1 1d       	adc	r31, r1
    23a2:	80 81       	ld	r24, Z
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	b3 01       	movw	r22, r6
    23a8:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    23ac:	dd 20       	and	r13, r13
    23ae:	a9 f7       	brne	.-22     	; 0x239a <vfprintf+0x380>
    23b0:	06 c0       	rjmp	.+12     	; 0x23be <vfprintf+0x3a4>
    23b2:	80 e2       	ldi	r24, 0x20	; 32
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	b3 01       	movw	r22, r6
    23b8:	0e 94 28 13 	call	0x2650	; 0x2650 <fputc>
    23bc:	ea 94       	dec	r14
    23be:	ee 20       	and	r14, r14
    23c0:	c1 f7       	brne	.-16     	; 0x23b2 <vfprintf+0x398>
    23c2:	43 ce       	rjmp	.-890    	; 0x204a <vfprintf+0x30>
    23c4:	f3 01       	movw	r30, r6
    23c6:	66 81       	ldd	r22, Z+6	; 0x06
    23c8:	77 81       	ldd	r23, Z+7	; 0x07
    23ca:	cb 01       	movw	r24, r22
    23cc:	2b 96       	adiw	r28, 0x0b	; 11
    23ce:	e2 e1       	ldi	r30, 0x12	; 18
    23d0:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__epilogue_restores__>

000023d4 <calloc>:
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	68 9f       	mul	r22, r24
    23de:	80 01       	movw	r16, r0
    23e0:	69 9f       	mul	r22, r25
    23e2:	10 0d       	add	r17, r0
    23e4:	78 9f       	mul	r23, r24
    23e6:	10 0d       	add	r17, r0
    23e8:	11 24       	eor	r1, r1
    23ea:	c8 01       	movw	r24, r16
    23ec:	0e 94 06 12 	call	0x240c	; 0x240c <malloc>
    23f0:	ec 01       	movw	r28, r24
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	29 f0       	breq	.+10     	; 0x2400 <calloc+0x2c>
    23f6:	60 e0       	ldi	r22, 0x00	; 0
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    23fa:	a8 01       	movw	r20, r16
    23fc:	0e 94 16 13 	call	0x262c	; 0x262c <memset>
    2400:	ce 01       	movw	r24, r28
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	08 95       	ret

0000240c <malloc>:
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	bc 01       	movw	r22, r24
    2412:	82 30       	cpi	r24, 0x02	; 2
    2414:	91 05       	cpc	r25, r1
    2416:	10 f4       	brcc	.+4      	; 0x241c <malloc+0x10>
    2418:	62 e0       	ldi	r22, 0x02	; 2
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	a0 91 f0 02 	lds	r26, 0x02F0
    2420:	b0 91 f1 02 	lds	r27, 0x02F1
    2424:	ed 01       	movw	r28, r26
    2426:	e0 e0       	ldi	r30, 0x00	; 0
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	21 c0       	rjmp	.+66     	; 0x2472 <malloc+0x66>
    2430:	88 81       	ld	r24, Y
    2432:	99 81       	ldd	r25, Y+1	; 0x01
    2434:	86 17       	cp	r24, r22
    2436:	97 07       	cpc	r25, r23
    2438:	69 f4       	brne	.+26     	; 0x2454 <malloc+0x48>
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	30 97       	sbiw	r30, 0x00	; 0
    2440:	19 f0       	breq	.+6      	; 0x2448 <malloc+0x3c>
    2442:	93 83       	std	Z+3, r25	; 0x03
    2444:	82 83       	std	Z+2, r24	; 0x02
    2446:	04 c0       	rjmp	.+8      	; 0x2450 <malloc+0x44>
    2448:	90 93 f1 02 	sts	0x02F1, r25
    244c:	80 93 f0 02 	sts	0x02F0, r24
    2450:	fe 01       	movw	r30, r28
    2452:	34 c0       	rjmp	.+104    	; 0x24bc <malloc+0xb0>
    2454:	68 17       	cp	r22, r24
    2456:	79 07       	cpc	r23, r25
    2458:	38 f4       	brcc	.+14     	; 0x2468 <malloc+0x5c>
    245a:	41 15       	cp	r20, r1
    245c:	51 05       	cpc	r21, r1
    245e:	19 f0       	breq	.+6      	; 0x2466 <malloc+0x5a>
    2460:	84 17       	cp	r24, r20
    2462:	95 07       	cpc	r25, r21
    2464:	08 f4       	brcc	.+2      	; 0x2468 <malloc+0x5c>
    2466:	ac 01       	movw	r20, r24
    2468:	fe 01       	movw	r30, r28
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	9c 01       	movw	r18, r24
    2470:	e9 01       	movw	r28, r18
    2472:	20 97       	sbiw	r28, 0x00	; 0
    2474:	e9 f6       	brne	.-70     	; 0x2430 <malloc+0x24>
    2476:	41 15       	cp	r20, r1
    2478:	51 05       	cpc	r21, r1
    247a:	a9 f1       	breq	.+106    	; 0x24e6 <malloc+0xda>
    247c:	ca 01       	movw	r24, r20
    247e:	86 1b       	sub	r24, r22
    2480:	97 0b       	sbc	r25, r23
    2482:	04 97       	sbiw	r24, 0x04	; 4
    2484:	08 f4       	brcc	.+2      	; 0x2488 <malloc+0x7c>
    2486:	ba 01       	movw	r22, r20
    2488:	e0 e0       	ldi	r30, 0x00	; 0
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	2a c0       	rjmp	.+84     	; 0x24e2 <malloc+0xd6>
    248e:	8d 91       	ld	r24, X+
    2490:	9c 91       	ld	r25, X
    2492:	11 97       	sbiw	r26, 0x01	; 1
    2494:	84 17       	cp	r24, r20
    2496:	95 07       	cpc	r25, r21
    2498:	f9 f4       	brne	.+62     	; 0x24d8 <malloc+0xcc>
    249a:	64 17       	cp	r22, r20
    249c:	75 07       	cpc	r23, r21
    249e:	81 f4       	brne	.+32     	; 0x24c0 <malloc+0xb4>
    24a0:	12 96       	adiw	r26, 0x02	; 2
    24a2:	8d 91       	ld	r24, X+
    24a4:	9c 91       	ld	r25, X
    24a6:	13 97       	sbiw	r26, 0x03	; 3
    24a8:	30 97       	sbiw	r30, 0x00	; 0
    24aa:	19 f0       	breq	.+6      	; 0x24b2 <malloc+0xa6>
    24ac:	93 83       	std	Z+3, r25	; 0x03
    24ae:	82 83       	std	Z+2, r24	; 0x02
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <malloc+0xae>
    24b2:	90 93 f1 02 	sts	0x02F1, r25
    24b6:	80 93 f0 02 	sts	0x02F0, r24
    24ba:	fd 01       	movw	r30, r26
    24bc:	32 96       	adiw	r30, 0x02	; 2
    24be:	4f c0       	rjmp	.+158    	; 0x255e <malloc+0x152>
    24c0:	ca 01       	movw	r24, r20
    24c2:	86 1b       	sub	r24, r22
    24c4:	97 0b       	sbc	r25, r23
    24c6:	fd 01       	movw	r30, r26
    24c8:	e8 0f       	add	r30, r24
    24ca:	f9 1f       	adc	r31, r25
    24cc:	61 93       	st	Z+, r22
    24ce:	71 93       	st	Z+, r23
    24d0:	02 97       	sbiw	r24, 0x02	; 2
    24d2:	8d 93       	st	X+, r24
    24d4:	9c 93       	st	X, r25
    24d6:	43 c0       	rjmp	.+134    	; 0x255e <malloc+0x152>
    24d8:	fd 01       	movw	r30, r26
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	9c 01       	movw	r18, r24
    24e0:	d9 01       	movw	r26, r18
    24e2:	10 97       	sbiw	r26, 0x00	; 0
    24e4:	a1 f6       	brne	.-88     	; 0x248e <malloc+0x82>
    24e6:	80 91 ee 02 	lds	r24, 0x02EE
    24ea:	90 91 ef 02 	lds	r25, 0x02EF
    24ee:	89 2b       	or	r24, r25
    24f0:	41 f4       	brne	.+16     	; 0x2502 <malloc+0xf6>
    24f2:	80 91 62 01 	lds	r24, 0x0162
    24f6:	90 91 63 01 	lds	r25, 0x0163
    24fa:	90 93 ef 02 	sts	0x02EF, r25
    24fe:	80 93 ee 02 	sts	0x02EE, r24
    2502:	40 91 64 01 	lds	r20, 0x0164
    2506:	50 91 65 01 	lds	r21, 0x0165
    250a:	41 15       	cp	r20, r1
    250c:	51 05       	cpc	r21, r1
    250e:	41 f4       	brne	.+16     	; 0x2520 <malloc+0x114>
    2510:	4d b7       	in	r20, 0x3d	; 61
    2512:	5e b7       	in	r21, 0x3e	; 62
    2514:	80 91 60 01 	lds	r24, 0x0160
    2518:	90 91 61 01 	lds	r25, 0x0161
    251c:	48 1b       	sub	r20, r24
    251e:	59 0b       	sbc	r21, r25
    2520:	20 91 ee 02 	lds	r18, 0x02EE
    2524:	30 91 ef 02 	lds	r19, 0x02EF
    2528:	24 17       	cp	r18, r20
    252a:	35 07       	cpc	r19, r21
    252c:	b0 f4       	brcc	.+44     	; 0x255a <malloc+0x14e>
    252e:	ca 01       	movw	r24, r20
    2530:	82 1b       	sub	r24, r18
    2532:	93 0b       	sbc	r25, r19
    2534:	86 17       	cp	r24, r22
    2536:	97 07       	cpc	r25, r23
    2538:	80 f0       	brcs	.+32     	; 0x255a <malloc+0x14e>
    253a:	ab 01       	movw	r20, r22
    253c:	4e 5f       	subi	r20, 0xFE	; 254
    253e:	5f 4f       	sbci	r21, 0xFF	; 255
    2540:	84 17       	cp	r24, r20
    2542:	95 07       	cpc	r25, r21
    2544:	50 f0       	brcs	.+20     	; 0x255a <malloc+0x14e>
    2546:	42 0f       	add	r20, r18
    2548:	53 1f       	adc	r21, r19
    254a:	50 93 ef 02 	sts	0x02EF, r21
    254e:	40 93 ee 02 	sts	0x02EE, r20
    2552:	f9 01       	movw	r30, r18
    2554:	61 93       	st	Z+, r22
    2556:	71 93       	st	Z+, r23
    2558:	02 c0       	rjmp	.+4      	; 0x255e <malloc+0x152>
    255a:	e0 e0       	ldi	r30, 0x00	; 0
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	cf 01       	movw	r24, r30
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	08 95       	ret

00002566 <free>:
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	09 f4       	brne	.+2      	; 0x2570 <free+0xa>
    256e:	50 c0       	rjmp	.+160    	; 0x2610 <free+0xaa>
    2570:	ec 01       	movw	r28, r24
    2572:	22 97       	sbiw	r28, 0x02	; 2
    2574:	1b 82       	std	Y+3, r1	; 0x03
    2576:	1a 82       	std	Y+2, r1	; 0x02
    2578:	a0 91 f0 02 	lds	r26, 0x02F0
    257c:	b0 91 f1 02 	lds	r27, 0x02F1
    2580:	10 97       	sbiw	r26, 0x00	; 0
    2582:	09 f1       	breq	.+66     	; 0x25c6 <free+0x60>
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	50 e0       	ldi	r21, 0x00	; 0
    2588:	ac 17       	cp	r26, r28
    258a:	bd 07       	cpc	r27, r29
    258c:	08 f1       	brcs	.+66     	; 0x25d0 <free+0x6a>
    258e:	bb 83       	std	Y+3, r27	; 0x03
    2590:	aa 83       	std	Y+2, r26	; 0x02
    2592:	fe 01       	movw	r30, r28
    2594:	21 91       	ld	r18, Z+
    2596:	31 91       	ld	r19, Z+
    2598:	e2 0f       	add	r30, r18
    259a:	f3 1f       	adc	r31, r19
    259c:	ae 17       	cp	r26, r30
    259e:	bf 07       	cpc	r27, r31
    25a0:	79 f4       	brne	.+30     	; 0x25c0 <free+0x5a>
    25a2:	8d 91       	ld	r24, X+
    25a4:	9c 91       	ld	r25, X
    25a6:	11 97       	sbiw	r26, 0x01	; 1
    25a8:	28 0f       	add	r18, r24
    25aa:	39 1f       	adc	r19, r25
    25ac:	2e 5f       	subi	r18, 0xFE	; 254
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	39 83       	std	Y+1, r19	; 0x01
    25b2:	28 83       	st	Y, r18
    25b4:	12 96       	adiw	r26, 0x02	; 2
    25b6:	8d 91       	ld	r24, X+
    25b8:	9c 91       	ld	r25, X
    25ba:	13 97       	sbiw	r26, 0x03	; 3
    25bc:	9b 83       	std	Y+3, r25	; 0x03
    25be:	8a 83       	std	Y+2, r24	; 0x02
    25c0:	41 15       	cp	r20, r1
    25c2:	51 05       	cpc	r21, r1
    25c4:	71 f4       	brne	.+28     	; 0x25e2 <free+0x7c>
    25c6:	d0 93 f1 02 	sts	0x02F1, r29
    25ca:	c0 93 f0 02 	sts	0x02F0, r28
    25ce:	20 c0       	rjmp	.+64     	; 0x2610 <free+0xaa>
    25d0:	12 96       	adiw	r26, 0x02	; 2
    25d2:	8d 91       	ld	r24, X+
    25d4:	9c 91       	ld	r25, X
    25d6:	13 97       	sbiw	r26, 0x03	; 3
    25d8:	ad 01       	movw	r20, r26
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	11 f0       	breq	.+4      	; 0x25e2 <free+0x7c>
    25de:	dc 01       	movw	r26, r24
    25e0:	d3 cf       	rjmp	.-90     	; 0x2588 <free+0x22>
    25e2:	fa 01       	movw	r30, r20
    25e4:	d3 83       	std	Z+3, r29	; 0x03
    25e6:	c2 83       	std	Z+2, r28	; 0x02
    25e8:	21 91       	ld	r18, Z+
    25ea:	31 91       	ld	r19, Z+
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	ce 17       	cp	r28, r30
    25f2:	df 07       	cpc	r29, r31
    25f4:	69 f4       	brne	.+26     	; 0x2610 <free+0xaa>
    25f6:	88 81       	ld	r24, Y
    25f8:	99 81       	ldd	r25, Y+1	; 0x01
    25fa:	28 0f       	add	r18, r24
    25fc:	39 1f       	adc	r19, r25
    25fe:	2e 5f       	subi	r18, 0xFE	; 254
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	fa 01       	movw	r30, r20
    2604:	31 83       	std	Z+1, r19	; 0x01
    2606:	20 83       	st	Z, r18
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	93 83       	std	Z+3, r25	; 0x03
    260e:	82 83       	std	Z+2, r24	; 0x02
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	08 95       	ret

00002616 <strnlen_P>:
    2616:	fc 01       	movw	r30, r24
    2618:	05 90       	lpm	r0, Z+
    261a:	61 50       	subi	r22, 0x01	; 1
    261c:	70 40       	sbci	r23, 0x00	; 0
    261e:	01 10       	cpse	r0, r1
    2620:	d8 f7       	brcc	.-10     	; 0x2618 <strnlen_P+0x2>
    2622:	80 95       	com	r24
    2624:	90 95       	com	r25
    2626:	8e 0f       	add	r24, r30
    2628:	9f 1f       	adc	r25, r31
    262a:	08 95       	ret

0000262c <memset>:
    262c:	dc 01       	movw	r26, r24
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <memset+0x6>
    2630:	6d 93       	st	X+, r22
    2632:	41 50       	subi	r20, 0x01	; 1
    2634:	50 40       	sbci	r21, 0x00	; 0
    2636:	e0 f7       	brcc	.-8      	; 0x2630 <memset+0x4>
    2638:	08 95       	ret

0000263a <strnlen>:
    263a:	fc 01       	movw	r30, r24
    263c:	61 50       	subi	r22, 0x01	; 1
    263e:	70 40       	sbci	r23, 0x00	; 0
    2640:	01 90       	ld	r0, Z+
    2642:	01 10       	cpse	r0, r1
    2644:	d8 f7       	brcc	.-10     	; 0x263c <strnlen+0x2>
    2646:	80 95       	com	r24
    2648:	90 95       	com	r25
    264a:	8e 0f       	add	r24, r30
    264c:	9f 1f       	adc	r25, r31
    264e:	08 95       	ret

00002650 <fputc>:
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	8c 01       	movw	r16, r24
    265a:	eb 01       	movw	r28, r22
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	81 ff       	sbrs	r24, 1
    2660:	1b c0       	rjmp	.+54     	; 0x2698 <fputc+0x48>
    2662:	82 ff       	sbrs	r24, 2
    2664:	0d c0       	rjmp	.+26     	; 0x2680 <fputc+0x30>
    2666:	2e 81       	ldd	r18, Y+6	; 0x06
    2668:	3f 81       	ldd	r19, Y+7	; 0x07
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	9d 81       	ldd	r25, Y+5	; 0x05
    266e:	28 17       	cp	r18, r24
    2670:	39 07       	cpc	r19, r25
    2672:	64 f4       	brge	.+24     	; 0x268c <fputc+0x3c>
    2674:	e8 81       	ld	r30, Y
    2676:	f9 81       	ldd	r31, Y+1	; 0x01
    2678:	01 93       	st	Z+, r16
    267a:	f9 83       	std	Y+1, r31	; 0x01
    267c:	e8 83       	st	Y, r30
    267e:	06 c0       	rjmp	.+12     	; 0x268c <fputc+0x3c>
    2680:	e8 85       	ldd	r30, Y+8	; 0x08
    2682:	f9 85       	ldd	r31, Y+9	; 0x09
    2684:	80 2f       	mov	r24, r16
    2686:	09 95       	icall
    2688:	89 2b       	or	r24, r25
    268a:	31 f4       	brne	.+12     	; 0x2698 <fputc+0x48>
    268c:	8e 81       	ldd	r24, Y+6	; 0x06
    268e:	9f 81       	ldd	r25, Y+7	; 0x07
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	9f 83       	std	Y+7, r25	; 0x07
    2694:	8e 83       	std	Y+6, r24	; 0x06
    2696:	02 c0       	rjmp	.+4      	; 0x269c <fputc+0x4c>
    2698:	0f ef       	ldi	r16, 0xFF	; 255
    269a:	1f ef       	ldi	r17, 0xFF	; 255
    269c:	c8 01       	movw	r24, r16
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	1f 91       	pop	r17
    26a4:	0f 91       	pop	r16
    26a6:	08 95       	ret

000026a8 <__ultoa_invert>:
    26a8:	fa 01       	movw	r30, r20
    26aa:	aa 27       	eor	r26, r26
    26ac:	28 30       	cpi	r18, 0x08	; 8
    26ae:	51 f1       	breq	.+84     	; 0x2704 <__ultoa_invert+0x5c>
    26b0:	20 31       	cpi	r18, 0x10	; 16
    26b2:	81 f1       	breq	.+96     	; 0x2714 <__ultoa_invert+0x6c>
    26b4:	e8 94       	clt
    26b6:	6f 93       	push	r22
    26b8:	6e 7f       	andi	r22, 0xFE	; 254
    26ba:	6e 5f       	subi	r22, 0xFE	; 254
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	8f 4f       	sbci	r24, 0xFF	; 255
    26c0:	9f 4f       	sbci	r25, 0xFF	; 255
    26c2:	af 4f       	sbci	r26, 0xFF	; 255
    26c4:	b1 e0       	ldi	r27, 0x01	; 1
    26c6:	3e d0       	rcall	.+124    	; 0x2744 <__ultoa_invert+0x9c>
    26c8:	b4 e0       	ldi	r27, 0x04	; 4
    26ca:	3c d0       	rcall	.+120    	; 0x2744 <__ultoa_invert+0x9c>
    26cc:	67 0f       	add	r22, r23
    26ce:	78 1f       	adc	r23, r24
    26d0:	89 1f       	adc	r24, r25
    26d2:	9a 1f       	adc	r25, r26
    26d4:	a1 1d       	adc	r26, r1
    26d6:	68 0f       	add	r22, r24
    26d8:	79 1f       	adc	r23, r25
    26da:	8a 1f       	adc	r24, r26
    26dc:	91 1d       	adc	r25, r1
    26de:	a1 1d       	adc	r26, r1
    26e0:	6a 0f       	add	r22, r26
    26e2:	71 1d       	adc	r23, r1
    26e4:	81 1d       	adc	r24, r1
    26e6:	91 1d       	adc	r25, r1
    26e8:	a1 1d       	adc	r26, r1
    26ea:	20 d0       	rcall	.+64     	; 0x272c <__ultoa_invert+0x84>
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <__ultoa_invert+0x48>
    26ee:	68 94       	set
    26f0:	3f 91       	pop	r19
    26f2:	2a e0       	ldi	r18, 0x0A	; 10
    26f4:	26 9f       	mul	r18, r22
    26f6:	11 24       	eor	r1, r1
    26f8:	30 19       	sub	r19, r0
    26fa:	30 5d       	subi	r19, 0xD0	; 208
    26fc:	31 93       	st	Z+, r19
    26fe:	de f6       	brtc	.-74     	; 0x26b6 <__ultoa_invert+0xe>
    2700:	cf 01       	movw	r24, r30
    2702:	08 95       	ret
    2704:	46 2f       	mov	r20, r22
    2706:	47 70       	andi	r20, 0x07	; 7
    2708:	40 5d       	subi	r20, 0xD0	; 208
    270a:	41 93       	st	Z+, r20
    270c:	b3 e0       	ldi	r27, 0x03	; 3
    270e:	0f d0       	rcall	.+30     	; 0x272e <__ultoa_invert+0x86>
    2710:	c9 f7       	brne	.-14     	; 0x2704 <__ultoa_invert+0x5c>
    2712:	f6 cf       	rjmp	.-20     	; 0x2700 <__ultoa_invert+0x58>
    2714:	46 2f       	mov	r20, r22
    2716:	4f 70       	andi	r20, 0x0F	; 15
    2718:	40 5d       	subi	r20, 0xD0	; 208
    271a:	4a 33       	cpi	r20, 0x3A	; 58
    271c:	18 f0       	brcs	.+6      	; 0x2724 <__ultoa_invert+0x7c>
    271e:	49 5d       	subi	r20, 0xD9	; 217
    2720:	31 fd       	sbrc	r19, 1
    2722:	40 52       	subi	r20, 0x20	; 32
    2724:	41 93       	st	Z+, r20
    2726:	02 d0       	rcall	.+4      	; 0x272c <__ultoa_invert+0x84>
    2728:	a9 f7       	brne	.-22     	; 0x2714 <__ultoa_invert+0x6c>
    272a:	ea cf       	rjmp	.-44     	; 0x2700 <__ultoa_invert+0x58>
    272c:	b4 e0       	ldi	r27, 0x04	; 4
    272e:	a6 95       	lsr	r26
    2730:	97 95       	ror	r25
    2732:	87 95       	ror	r24
    2734:	77 95       	ror	r23
    2736:	67 95       	ror	r22
    2738:	ba 95       	dec	r27
    273a:	c9 f7       	brne	.-14     	; 0x272e <__ultoa_invert+0x86>
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	61 05       	cpc	r22, r1
    2740:	71 05       	cpc	r23, r1
    2742:	08 95       	ret
    2744:	9b 01       	movw	r18, r22
    2746:	ac 01       	movw	r20, r24
    2748:	0a 2e       	mov	r0, r26
    274a:	06 94       	lsr	r0
    274c:	57 95       	ror	r21
    274e:	47 95       	ror	r20
    2750:	37 95       	ror	r19
    2752:	27 95       	ror	r18
    2754:	ba 95       	dec	r27
    2756:	c9 f7       	brne	.-14     	; 0x274a <__ultoa_invert+0xa2>
    2758:	62 0f       	add	r22, r18
    275a:	73 1f       	adc	r23, r19
    275c:	84 1f       	adc	r24, r20
    275e:	95 1f       	adc	r25, r21
    2760:	a0 1d       	adc	r26, r0
    2762:	08 95       	ret

00002764 <__prologue_saves__>:
    2764:	2f 92       	push	r2
    2766:	3f 92       	push	r3
    2768:	4f 92       	push	r4
    276a:	5f 92       	push	r5
    276c:	6f 92       	push	r6
    276e:	7f 92       	push	r7
    2770:	8f 92       	push	r8
    2772:	9f 92       	push	r9
    2774:	af 92       	push	r10
    2776:	bf 92       	push	r11
    2778:	cf 92       	push	r12
    277a:	df 92       	push	r13
    277c:	ef 92       	push	r14
    277e:	ff 92       	push	r15
    2780:	0f 93       	push	r16
    2782:	1f 93       	push	r17
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	ca 1b       	sub	r28, r26
    278e:	db 0b       	sbc	r29, r27
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	09 94       	ijmp

0000279c <__epilogue_restores__>:
    279c:	2a 88       	ldd	r2, Y+18	; 0x12
    279e:	39 88       	ldd	r3, Y+17	; 0x11
    27a0:	48 88       	ldd	r4, Y+16	; 0x10
    27a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    27a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    27aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ae:	b9 84       	ldd	r11, Y+9	; 0x09
    27b0:	c8 84       	ldd	r12, Y+8	; 0x08
    27b2:	df 80       	ldd	r13, Y+7	; 0x07
    27b4:	ee 80       	ldd	r14, Y+6	; 0x06
    27b6:	fd 80       	ldd	r15, Y+5	; 0x05
    27b8:	0c 81       	ldd	r16, Y+4	; 0x04
    27ba:	1b 81       	ldd	r17, Y+3	; 0x03
    27bc:	aa 81       	ldd	r26, Y+2	; 0x02
    27be:	b9 81       	ldd	r27, Y+1	; 0x01
    27c0:	ce 0f       	add	r28, r30
    27c2:	d1 1d       	adc	r29, r1
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	ed 01       	movw	r28, r26
    27d0:	08 95       	ret

000027d2 <_exit>:
    27d2:	f8 94       	cli

000027d4 <__stop_program>:
    27d4:	ff cf       	rjmp	.-2      	; 0x27d4 <__stop_program>
