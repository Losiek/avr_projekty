
ethernet_exram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00002b16  00002bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b16  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rtl          00000020  00808300  00808300  00003248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .exram        000005ea  00801100  00801100  00002c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000031  00800174  00800174  00002c5e  2**0
                  ALLOC
  5 .debug_aranges 00000128  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000077c  00000000  00000000  00003390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000156e  00000000  00000000  00003b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008d9  00000000  00000000  0000507a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001dde  00000000  00000000  00005953  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  00007734  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000499  00000000  00000000  000079f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007e6  00000000  00000000  00007e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00008673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 00 	jmp	0x150	; 0x150 <__ctors_end>
       4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_1>
       8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
       c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      18:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      34:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      54:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      58:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      5c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      60:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      64:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      68:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
      6c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>

00000070 <content>:
      70:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      80:	0a 20 43 6f 6e 74 65 6e 74 2d 74 79 70 65 3a 20     . Content-type: 
      90:	74 65 78 74 2f 68 74 6d 6c 0d 09 0a 00              text/html....

0000009d <index1>:
      9d:	3c 48 54 4d 4c 3e 0d 0a 3c 48 45 41 44 3e 0d 0a     <HTML>..<HEAD>..
      ad:	3c 54 49 54 4c 45 3e 4d 69 6b 72 6f 73 65 72 77     <TITLE>Mikroserw
      bd:	65 72 20 4c 41 4e 3c 2f 54 49 54 4c 45 3e 0d 0a     er LAN</TITLE>..
      cd:	3c 6d 65 74 61 20 68 74 74 70 2d 65 71 75 69 76     <meta http-equiv
      dd:	3d 22 63 6f 6e 74 65 6e 74 2d 74 79 70 65 22 20     ="content-type" 
      ed:	63 6f 6e 74 65 6e 74 3d 22 54 65 78 74 2f 48 74     content="Text/Ht
      fd:	6d 6c 3b 20 63 68 61 72 73 65 74 3d 77 69 6e 64     ml; charset=wind
     10d:	6f 77 73 2d 31 32 35 30 22 3e 0d 0a 3c 2f 48 45     ows-1250">..</HE
     11d:	41 44 3e 0d 0a 3c 42 4f 44 59 3e 0d 0a 3c 68 31     AD>..<BODY>..<h1
     12d:	3e 3c 2f 62 72 3e 4d 69 6b 72 6f 3c 2f 68 31 3e     ></br>Mikro</h1>
     13d:	0d 0a 3c 2f 42 4f 44 59 3e 0d 0a 3c 2f 48 54 4d     ..</BODY>..</HTM
     14d:	4c 3e 00                                            L>.

00000150 <__ctors_end>:
     150:	11 24       	eor	r1, r1
     152:	1f be       	out	0x3f, r1	; 63
     154:	cf ef       	ldi	r28, 0xFF	; 255
     156:	d4 e0       	ldi	r29, 0x04	; 4
     158:	de bf       	out	0x3e, r29	; 62
     15a:	cd bf       	out	0x3d, r28	; 61

0000015c <before_main>:
void before_main(void)
	__attribute__((naked))
	__attribute__((section(".init3")));
	
void before_main(void)
{
     15c:	80 e8       	ldi	r24, 0x80	; 128
     15e:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1<<SRE /*| 1<<SRW10*/);
	EMCUCR = (1<<SRL2/*| 1<<SRW11 | 1<<SRW01 | 1<<SRW00*/); //Podzia³ na dwa sektory, dolny = 0x1100-0x7FFF
     160:	80 e4       	ldi	r24, 0x40	; 64
     162:	86 bf       	out	0x36, r24	; 54

00000164 <__do_copy_data>:
     164:	11 e0       	ldi	r17, 0x01	; 1
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	e6 e1       	ldi	r30, 0x16	; 22
     16c:	fb e2       	ldi	r31, 0x2B	; 43
     16e:	02 c0       	rjmp	.+4      	; 0x174 <.do_copy_data_start>

00000170 <.do_copy_data_loop>:
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0

00000174 <.do_copy_data_start>:
     174:	a4 37       	cpi	r26, 0x74	; 116
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <.do_copy_data_loop>

0000017a <__do_clear_bss>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a4 e7       	ldi	r26, 0x74	; 116
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	a5 3a       	cpi	r26, 0xA5	; 165
     186:	b1 07       	cpc	r27, r17
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
     18a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
     18e:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_exit>

00000192 <__bad_interrupt>:
     192:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000196 <__vector_1>:
	return 0;
}

//Wyst¹pienie przerwania
ISR( INT0_vect )
{
     196:	1f 92       	push	r1
     198:	0f 92       	push	r0
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	0f 92       	push	r0
     19e:	11 24       	eor	r1, r1
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
  ++n;
     1a4:	80 91 74 01 	lds	r24, 0x0174
     1a8:	90 91 75 01 	lds	r25, 0x0175
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	90 93 75 01 	sts	0x0175, r25
     1b2:	80 93 74 01 	sts	0x0174, r24
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <main>:
volatile int n = 0;
//Status TCP
uint8_t Tcp_Status;

int main(void) 
{
     1c4:	af 92       	push	r10
     1c6:	bf 92       	push	r11
     1c8:	cf 92       	push	r12
     1ca:	df 92       	push	r13
     1cc:	ef 92       	push	r14
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
	/////////////////////////////////////////////////////////
	//Inicjacja portu szeregowego
	RS_SET_BAUD(DEF_BAUD);
     1d8:	e0 e4       	ldi	r30, 0x40	; 64
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	10 82       	st	Z, r1
     1de:	87 e6       	ldi	r24, 0x67	; 103
     1e0:	89 b9       	out	0x09, r24	; 9
	UCSR0C = 1<<URSEL0 | 1<<UCSZ01 | 1<<UCSZ00;
     1e2:	86 e8       	ldi	r24, 0x86	; 134
     1e4:	80 83       	st	Z, r24
	UCSR0B = 1<<RXEN0 | 1<<TXEN0;
     1e6:	88 e1       	ldi	r24, 0x18	; 24
     1e8:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;
     1ea:	1b b8       	out	0x0b, r1	; 11
	////////////////////////////////////////////////////////
	//Inicjacja przerwañ
	MCUCR |= (1<<ISC01 | 1<<ISC00);
     1ec:	e5 e5       	ldi	r30, 0x55	; 85
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	83 60       	ori	r24, 0x03	; 3
     1f4:	80 83       	st	Z, r24
	GICR = 1<<INT0;
     1f6:	80 e4       	ldi	r24, 0x40	; 64
     1f8:	8b bf       	out	0x3b, r24	; 59
	sei();
     1fa:	78 94       	sei
	//Koniec inicjacji
	////////////////////////////////////////////////////////

	//inicjacja funkcji domyœlnych strumieni
	fdevopen(rs_put, rs_get);
     1fc:	84 e4       	ldi	r24, 0x44	; 68
     1fe:	95 e0       	ldi	r25, 0x05	; 5
     200:	6e e4       	ldi	r22, 0x4E	; 78
     202:	75 e0       	ldi	r23, 0x05	; 5
     204:	0e 94 10 11 	call	0x2220	; 0x2220 <fdevopen>

	//wiadomoœæ powitalna
	printf("Witaj RTL8019as\n");
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <puts>
	printf("\r");								//zajmuje mniej pamiêci, serio
     210:	8d e0       	ldi	r24, 0x0D	; 13
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 71 11 	call	0x22e2	; 0x22e2 <putchar>
	
	RTLinit();
     218:	0e 94 84 02 	call	0x508	; 0x508 <RTLinit>
	seq_number=0x1000;
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e1       	ldi	r25, 0x10	; 16
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	80 93 7a 01 	sts	0x017A, r24
     228:	90 93 7b 01 	sts	0x017B, r25
     22c:	a0 93 7c 01 	sts	0x017C, r26
     230:	b0 93 7d 01 	sts	0x017D, r27
	//Odczytywanie rejestrów RTL8019as
				printf("\nRealtek 8019AS Register dump\n");
     234:	80 e1       	ldi	r24, 0x10	; 16
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	0e 94 78 11 	call	0x22f0	; 0x22f0 <puts>
				printf("\r");
     23c:	8d e0       	ldi	r24, 0x0D	; 13
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 71 11 	call	0x22e2	; 0x22e2 <putchar>
				printf("\nREG Page0 Page1 Page2 Page3\n\n");
     244:	8e e2       	ldi	r24, 0x2E	; 46
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	0e 94 78 11 	call	0x22f0	; 0x22f0 <puts>
				printf("\r");
     24c:	8d e0       	ldi	r24, 0x0D	; 13
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 71 11 	call	0x22e2	; 0x22e2 <putchar>
     254:	c0 e0       	ldi	r28, 0x00	; 0
     256:	d0 e0       	ldi	r29, 0x00	; 0
					
				for(uint8_t reg = 0; reg<16; reg++) {
					
					uint8_t a = 0;
					printf("%X    ", reg);
     258:	0f 2e       	mov	r0, r31
     25a:	fc e4       	ldi	r31, 0x4C	; 76
     25c:	ef 2e       	mov	r14, r31
     25e:	f1 e0       	ldi	r31, 0x01	; 1
     260:	ff 2e       	mov	r15, r31
     262:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     264:	0f 2e       	mov	r0, r31
     266:	f0 e4       	ldi	r31, 0x40	; 64
     268:	cf 2e       	mov	r12, r31
     26a:	ff e1       	ldi	r31, 0x1F	; 31
     26c:	df 2e       	mov	r13, r31
     26e:	f0 2d       	mov	r31, r0
						printf("0");
						printf("%X    ", a);
						} else {
						printf("%X    ", a);
						}
				printf("\n\r");
     270:	0f 2e       	mov	r0, r31
     272:	f3 e5       	ldi	r31, 0x53	; 83
     274:	af 2e       	mov	r10, r31
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	bf 2e       	mov	r11, r31
     27a:	f0 2d       	mov	r31, r0
	seq_number=0x1000;
	//Odczytywanie rejestrów RTL8019as
				printf("\nRealtek 8019AS Register dump\n");
				printf("\r");
				printf("\nREG Page0 Page1 Page2 Page3\n\n");
				printf("\r");
     27c:	1c 2f       	mov	r17, r28
					
				for(uint8_t reg = 0; reg<16; reg++) {
					
					uint8_t a = 0;
					printf("%X    ", reg);
     27e:	00 d0       	rcall	.+0      	; 0x280 <main+0xbc>
     280:	00 d0       	rcall	.+0      	; 0x282 <main+0xbe>
     282:	ed b7       	in	r30, 0x3d	; 61
     284:	fe b7       	in	r31, 0x3e	; 62
     286:	31 96       	adiw	r30, 0x01	; 1
     288:	f1 82       	std	Z+1, r15	; 0x01
     28a:	e0 82       	st	Z, r14
     28c:	d3 83       	std	Z+3, r29	; 0x03
     28e:	c2 83       	std	Z+2, r28	; 0x02
     290:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
					
					RTLwrite(0x00, 0x00);
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
     2a4:	c6 01       	movw	r24, r12
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0xe2>
					_delay_ms(2);
					a = RTLread(reg);
     2aa:	8c 2f       	mov	r24, r28
     2ac:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     2b0:	08 2f       	mov	r16, r24
					if(a < 16) {
     2b2:	80 31       	cpi	r24, 0x10	; 16
     2b4:	a0 f4       	brcc	.+40     	; 0x2de <main+0x11a>
						printf("0");
     2b6:	80 e3       	ldi	r24, 0x30	; 48
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 71 11 	call	0x22e2	; 0x22e2 <putchar>
						printf("%X    ", a);
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <main+0xfc>
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <main+0xfe>
     2c2:	ed b7       	in	r30, 0x3d	; 61
     2c4:	fe b7       	in	r31, 0x3e	; 62
     2c6:	31 96       	adiw	r30, 0x01	; 1
     2c8:	f1 82       	std	Z+1, r15	; 0x01
     2ca:	e0 82       	st	Z, r14
     2cc:	02 83       	std	Z+2, r16	; 0x02
     2ce:	13 82       	std	Z+3, r1	; 0x03
     2d0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f c0       	rjmp	.+30     	; 0x2fc <main+0x138>
						} else {
						printf("%X    ", a);
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <main+0x11c>
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <main+0x11e>
     2e2:	ed b7       	in	r30, 0x3d	; 61
     2e4:	fe b7       	in	r31, 0x3e	; 62
     2e6:	31 96       	adiw	r30, 0x01	; 1
     2e8:	f1 82       	std	Z+1, r15	; 0x01
     2ea:	e0 82       	st	Z, r14
     2ec:	82 83       	std	Z+2, r24	; 0x02
     2ee:	13 82       	std	Z+3, r1	; 0x03
     2f0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
						}
					
					RTLwrite(0x00, 0x40);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	60 e4       	ldi	r22, 0x40	; 64
     300:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
     304:	c6 01       	movw	r24, r12
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <main+0x142>
					_delay_ms(2);
					a = RTLread(reg);
     30a:	81 2f       	mov	r24, r17
     30c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     310:	08 2f       	mov	r16, r24
					if(a < 16) {
     312:	80 31       	cpi	r24, 0x10	; 16
     314:	a0 f4       	brcc	.+40     	; 0x33e <main+0x17a>
						printf("0");
     316:	80 e3       	ldi	r24, 0x30	; 48
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <putchar>
						printf("%X    ", a);
     31e:	00 d0       	rcall	.+0      	; 0x320 <main+0x15c>
     320:	00 d0       	rcall	.+0      	; 0x322 <main+0x15e>
     322:	ed b7       	in	r30, 0x3d	; 61
     324:	fe b7       	in	r31, 0x3e	; 62
     326:	31 96       	adiw	r30, 0x01	; 1
     328:	f1 82       	std	Z+1, r15	; 0x01
     32a:	e0 82       	st	Z, r14
     32c:	02 83       	std	Z+2, r16	; 0x02
     32e:	13 82       	std	Z+3, r1	; 0x03
     330:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f c0       	rjmp	.+30     	; 0x35c <main+0x198>
						} else {
						printf("%X    ", a);
     33e:	00 d0       	rcall	.+0      	; 0x340 <main+0x17c>
     340:	00 d0       	rcall	.+0      	; 0x342 <main+0x17e>
     342:	ed b7       	in	r30, 0x3d	; 61
     344:	fe b7       	in	r31, 0x3e	; 62
     346:	31 96       	adiw	r30, 0x01	; 1
     348:	f1 82       	std	Z+1, r15	; 0x01
     34a:	e0 82       	st	Z, r14
     34c:	82 83       	std	Z+2, r24	; 0x02
     34e:	13 82       	std	Z+3, r1	; 0x03
     350:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
						}
					
					RTLwrite(0x00, 0x80);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	60 e8       	ldi	r22, 0x80	; 128
     360:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
     364:	c6 01       	movw	r24, r12
     366:	01 97       	sbiw	r24, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <main+0x1a2>
					_delay_ms(2);
					a = RTLread(reg);
     36a:	81 2f       	mov	r24, r17
     36c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     370:	08 2f       	mov	r16, r24
					if(a < 16) {
     372:	80 31       	cpi	r24, 0x10	; 16
     374:	a0 f4       	brcc	.+40     	; 0x39e <main+0x1da>
						printf("0");
     376:	80 e3       	ldi	r24, 0x30	; 48
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <putchar>
						printf("%X    ", a);
     37e:	00 d0       	rcall	.+0      	; 0x380 <main+0x1bc>
     380:	00 d0       	rcall	.+0      	; 0x382 <main+0x1be>
     382:	ed b7       	in	r30, 0x3d	; 61
     384:	fe b7       	in	r31, 0x3e	; 62
     386:	31 96       	adiw	r30, 0x01	; 1
     388:	f1 82       	std	Z+1, r15	; 0x01
     38a:	e0 82       	st	Z, r14
     38c:	02 83       	std	Z+2, r16	; 0x02
     38e:	13 82       	std	Z+3, r1	; 0x03
     390:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f c0       	rjmp	.+30     	; 0x3bc <main+0x1f8>
						} else {
						printf("%X    ", a);
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <main+0x1dc>
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <main+0x1de>
     3a2:	ed b7       	in	r30, 0x3d	; 61
     3a4:	fe b7       	in	r31, 0x3e	; 62
     3a6:	31 96       	adiw	r30, 0x01	; 1
     3a8:	f1 82       	std	Z+1, r15	; 0x01
     3aa:	e0 82       	st	Z, r14
     3ac:	82 83       	std	Z+2, r24	; 0x02
     3ae:	13 82       	std	Z+3, r1	; 0x03
     3b0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
						}
					
					RTLwrite(0x00, 0xC0);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	60 ec       	ldi	r22, 0xC0	; 192
     3c0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
     3c4:	c6 01       	movw	r24, r12
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <main+0x202>
					_delay_ms(2);
					a = RTLread(reg);
     3ca:	81 2f       	mov	r24, r17
     3cc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     3d0:	08 2f       	mov	r16, r24
					if(a < 16) {
     3d2:	80 31       	cpi	r24, 0x10	; 16
     3d4:	a0 f4       	brcc	.+40     	; 0x3fe <main+0x23a>
						printf("0");
     3d6:	80 e3       	ldi	r24, 0x30	; 48
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 71 11 	call	0x22e2	; 0x22e2 <putchar>
						printf("%X    ", a);
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <main+0x21c>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <main+0x21e>
     3e2:	ed b7       	in	r30, 0x3d	; 61
     3e4:	fe b7       	in	r31, 0x3e	; 62
     3e6:	31 96       	adiw	r30, 0x01	; 1
     3e8:	f1 82       	std	Z+1, r15	; 0x01
     3ea:	e0 82       	st	Z, r14
     3ec:	02 83       	std	Z+2, r16	; 0x02
     3ee:	13 82       	std	Z+3, r1	; 0x03
     3f0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f c0       	rjmp	.+30     	; 0x41c <main+0x258>
						} else {
						printf("%X    ", a);
     3fe:	00 d0       	rcall	.+0      	; 0x400 <main+0x23c>
     400:	00 d0       	rcall	.+0      	; 0x402 <main+0x23e>
     402:	ed b7       	in	r30, 0x3d	; 61
     404:	fe b7       	in	r31, 0x3e	; 62
     406:	31 96       	adiw	r30, 0x01	; 1
     408:	f1 82       	std	Z+1, r15	; 0x01
     40a:	e0 82       	st	Z, r14
     40c:	82 83       	std	Z+2, r24	; 0x02
     40e:	13 82       	std	Z+3, r1	; 0x03
     410:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
						}
				printf("\n\r");
     41c:	00 d0       	rcall	.+0      	; 0x41e <main+0x25a>
     41e:	ed b7       	in	r30, 0x3d	; 61
     420:	fe b7       	in	r31, 0x3e	; 62
     422:	b2 82       	std	Z+2, r11	; 0x02
     424:	a1 82       	std	Z+1, r10	; 0x01
     426:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     42a:	21 96       	adiw	r28, 0x01	; 1
				printf("\nRealtek 8019AS Register dump\n");
				printf("\r");
				printf("\nREG Page0 Page1 Page2 Page3\n\n");
				printf("\r");
					
				for(uint8_t reg = 0; reg<16; reg++) {
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	c0 31       	cpi	r28, 0x10	; 16
     432:	d1 05       	cpc	r29, r1
     434:	09 f0       	breq	.+2      	; 0x438 <main+0x274>
     436:	22 cf       	rjmp	.-444    	; 0x27c <main+0xb8>
						printf("%X    ", a);
						}
				printf("\n\r");
	}

	printf("%p\n\r", &rtl_reg); 
     438:	00 d0       	rcall	.+0      	; 0x43a <main+0x276>
     43a:	00 d0       	rcall	.+0      	; 0x43c <main+0x278>
     43c:	ed b7       	in	r30, 0x3d	; 61
     43e:	fe b7       	in	r31, 0x3e	; 62
     440:	31 96       	adiw	r30, 0x01	; 1
     442:	06 e5       	ldi	r16, 0x56	; 86
     444:	11 e0       	ldi	r17, 0x01	; 1
     446:	11 83       	std	Z+1, r17	; 0x01
     448:	00 83       	st	Z, r16
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	93 e8       	ldi	r25, 0x83	; 131
     44e:	93 83       	std	Z+3, r25	; 0x03
     450:	82 83       	std	Z+2, r24	; 0x02
     452:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
	printf("%p\n\r", &EthFrame); 
     456:	ed b7       	in	r30, 0x3d	; 61
     458:	fe b7       	in	r31, 0x3e	; 62
     45a:	31 96       	adiw	r30, 0x01	; 1
     45c:	11 83       	std	Z+1, r17	; 0x01
     45e:	00 83       	st	Z, r16
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	91 e1       	ldi	r25, 0x11	; 17
     464:	93 83       	std	Z+3, r25	; 0x03
     466:	82 83       	std	Z+2, r24	; 0x02
     468:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
		} else if (PacketCheck() == 2) {
			if(IpCheck() == 3) { EchoReply(); }
			if(IpCheck() == 4) { Tcp_Check(0x1F90); }
		}
		Http_Check();*/
		printf("%d ", n);
     474:	cb e5       	ldi	r28, 0x5B	; 91
     476:	d1 e0       	ldi	r29, 0x01	; 1
     478:	80 91 74 01 	lds	r24, 0x0174
     47c:	90 91 75 01 	lds	r25, 0x0175
     480:	00 d0       	rcall	.+0      	; 0x482 <main+0x2be>
     482:	00 d0       	rcall	.+0      	; 0x484 <main+0x2c0>
     484:	ed b7       	in	r30, 0x3d	; 61
     486:	fe b7       	in	r31, 0x3e	; 62
     488:	31 96       	adiw	r30, 0x01	; 1
     48a:	d1 83       	std	Z+1, r29	; 0x01
     48c:	c0 83       	st	Z, r28
     48e:	93 83       	std	Z+3, r25	; 0x03
     490:	82 83       	std	Z+2, r24	; 0x02
     492:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	ec cf       	rjmp	.-40     	; 0x478 <main+0x2b4>

000004a0 <RTLsetup_ports>:
#include "RTL8019as.h"

//konfiguracja linii portów mikrokontrolera
void RTLsetup_ports(void) {
	
	RTL_DDR = 0xFF;
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	8a bb       	out	0x1a, r24	; 26
	RTL_PORT = 0xFF;
     4a4:	8b bb       	out	0x1b, r24	; 27
	
	RTL_CONTROL_DDR |= (1<<RTL_CONTROL_READPIN);
     4a6:	a1 e3       	ldi	r26, 0x31	; 49
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	8c 91       	ld	r24, X
     4ac:	80 68       	ori	r24, 0x80	; 128
     4ae:	8c 93       	st	X, r24
	RTL_CONTROL_DDR |= (1<<RTL_CONTROL_WRITEPIN);
     4b0:	8c 91       	ld	r24, X
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	8c 93       	st	X, r24
	RTL_CONTROL_PORT |= (1<<RTL_CONTROL_READPIN);
     4b6:	e2 e3       	ldi	r30, 0x32	; 50
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	80 68       	ori	r24, 0x80	; 128
     4be:	80 83       	st	Z, r24
	RTL_CONTROL_PORT |= (1<<RTL_CONTROL_WRITEPIN);
     4c0:	80 81       	ld	r24, Z
     4c2:	80 64       	ori	r24, 0x40	; 64
     4c4:	80 83       	st	Z, r24
	
	RTL_RESET_DDR |= (1<<RTL_RESET_PIN);
     4c6:	8c 91       	ld	r24, X
     4c8:	80 62       	ori	r24, 0x20	; 32
     4ca:	8c 93       	st	X, r24
}
     4cc:	08 95       	ret

000004ce <RTLhw_reset>:
//konic konfiguracji

//Reset kontrolera sieci
void RTLhw_reset(void) {

	RTL_RESET_PORT |= (1<<RTL_RESET_PIN);
     4ce:	e2 e3       	ldi	r30, 0x32	; 50
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	80 62       	ori	r24, 0x20	; 32
     4d6:	80 83       	st	Z, r24
     4d8:	20 e4       	ldi	r18, 0x40	; 64
     4da:	3c e9       	ldi	r19, 0x9C	; 156
     4dc:	c9 01       	movw	r24, r18
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <RTLhw_reset+0x10>
	_delay_ms(10);
	RTL_RESET_PORT &= ~(1<<RTL_RESET_PIN);
     4e2:	80 81       	ld	r24, Z
     4e4:	8f 7d       	andi	r24, 0xDF	; 223
     4e6:	80 83       	st	Z, r24
     4e8:	c9 01       	movw	r24, r18
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <RTLhw_reset+0x1c>
	_delay_ms(10); 
	
}
     4ee:	08 95       	ret

000004f0 <RTLwrite>:
//koniec funkcji resetuj¹cej kontroler

//Zapis bajtu do RTL8019as
void RTLwrite (uint8_t address, uint8_t data) {
	
	rtl_reg[address] = data;
     4f0:	e0 e0       	ldi	r30, 0x00	; 0
     4f2:	f3 e8       	ldi	r31, 0x83	; 131
     4f4:	e8 0f       	add	r30, r24
     4f6:	f1 1d       	adc	r31, r1
     4f8:	60 83       	st	Z, r22
}
     4fa:	08 95       	ret

000004fc <RTLread>:
//Koniec funkcji zapisuj¹cej bajt

//Funkcja odczytuj¹ca jeden bajt z RTL8019as
uint8_t RTLread(uint8_t address) {
     4fc:	e0 e0       	ldi	r30, 0x00	; 0
     4fe:	f3 e8       	ldi	r31, 0x83	; 131
     500:	e8 0f       	add	r30, r24
     502:	f1 1d       	adc	r31, r1
	
	return rtl_reg[address];
}
     504:	80 81       	ld	r24, Z
     506:	08 95       	ret

00000508 <RTLinit>:
//koniec funkcji odczytuj¹cej

//Inicjalizacja RTL8019as
void RTLinit(void) {
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
	
	RTLsetup_ports();
     514:	0e 94 50 02 	call	0x4a0	; 0x4a0 <RTLsetup_ports>
	RTLhw_reset();
     518:	0e 94 67 02 	call	0x4ce	; 0x4ce <RTLhw_reset>
	RTLwrite(RSTPORT,0);
     51c:	88 e1       	ldi	r24, 0x18	; 24
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
     524:	2c e2       	ldi	r18, 0x2C	; 44
     526:	31 e0       	ldi	r19, 0x01	; 1
     528:	40 e9       	ldi	r20, 0x90	; 144
     52a:	51 e0       	ldi	r21, 0x01	; 1
     52c:	ca 01       	movw	r24, r20
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <RTLinit+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     532:	21 50       	subi	r18, 0x01	; 1
     534:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     536:	d1 f7       	brne	.-12     	; 0x52c <RTLinit+0x24>
	_delay_ms(30);
	
	RTLwrite(CR, 0x41);
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	61 e4       	ldi	r22, 0x41	; 65
     53c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
     540:	0f 2e       	mov	r0, r31
     542:	f0 e4       	ldi	r31, 0x40	; 64
     544:	cf 2e       	mov	r12, r31
     546:	ff e1       	ldi	r31, 0x1F	; 31
     548:	df 2e       	mov	r13, r31
     54a:	f0 2d       	mov	r31, r0
     54c:	c6 01       	movw	r24, r12
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <RTLinit+0x46>
	_delay_ms(2);
	
	RTLwrite(CURR, RXSTART_INIT);
     552:	87 e0       	ldi	r24, 0x07	; 7
     554:	66 e4       	ldi	r22, 0x46	; 70
     556:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(PAR0+0, MyMac[0]);	//Zapis adresu MAC
     55a:	0f 2e       	mov	r0, r31
     55c:	ff e5       	ldi	r31, 0x5F	; 95
     55e:	ef 2e       	mov	r14, r31
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	ff 2e       	mov	r15, r31
     564:	f0 2d       	mov	r31, r0
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	f7 01       	movw	r30, r14
     56a:	61 91       	ld	r22, Z+
     56c:	8f 01       	movw	r16, r30
     56e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(PAR0+1, MyMac[1]);
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	f8 01       	movw	r30, r16
     576:	60 81       	ld	r22, Z
     578:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(PAR0+2, MyMac[2]);
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	f7 01       	movw	r30, r14
     580:	62 81       	ldd	r22, Z+2	; 0x02
     582:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(PAR0+3, MyMac[3]);
     586:	84 e0       	ldi	r24, 0x04	; 4
     588:	f7 01       	movw	r30, r14
     58a:	63 81       	ldd	r22, Z+3	; 0x03
     58c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(PAR0+4, MyMac[4]);
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	f7 01       	movw	r30, r14
     594:	64 81       	ldd	r22, Z+4	; 0x04
     596:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(PAR0+5, MyMac[5]);
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	f7 01       	movw	r30, r14
     59e:	65 81       	ldd	r22, Z+5	; 0x05
     5a0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(CR,0x21);
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	61 e2       	ldi	r22, 0x21	; 33
     5a8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
     5ac:	c6 01       	movw	r24, r12
     5ae:	01 97       	sbiw	r24, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <RTLinit+0xa6>
	_delay_ms(2);
	
	RTLwrite(DCR, 0x58);
     5b2:	8e e0       	ldi	r24, 0x0E	; 14
     5b4:	68 e5       	ldi	r22, 0x58	; 88
     5b6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(RCR, 0x04);
     5ba:	8c e0       	ldi	r24, 0x0C	; 12
     5bc:	64 e0       	ldi	r22, 0x04	; 4
     5be:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(TCR, 0x02);
     5c2:	8d e0       	ldi	r24, 0x0D	; 13
     5c4:	62 e0       	ldi	r22, 0x02	; 2
     5c6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(RBCR0, 0x00);
     5ca:	8a e0       	ldi	r24, 0x0A	; 10
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RBCR1, 0x00);
     5d2:	8b e0       	ldi	r24, 0x0B	; 11
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(TPSR, TXSTART_INIT);
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	60 e4       	ldi	r22, 0x40	; 64
     5de:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(PSTART, RXSTART_INIT);
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	66 e4       	ldi	r22, 0x46	; 70
     5e6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(BNRY, RXSTART_INIT);
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	66 e4       	ldi	r22, 0x46	; 70
     5ee:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(PSTOP, RXSTOP_INIT);
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	60 e6       	ldi	r22, 0x60	; 96
     5f6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(_ISR, 0xFF);
     5fa:	87 e0       	ldi	r24, 0x07	; 7
     5fc:	6f ef       	ldi	r22, 0xFF	; 255
     5fe:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(IMR, 0x11);
     602:	8f e0       	ldi	r24, 0x0F	; 15
     604:	61 e1       	ldi	r22, 0x11	; 17
     606:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(TCR, 0x00);
     60a:	8d e0       	ldi	r24, 0x0D	; 13
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(CR, 0x22);
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	62 e2       	ldi	r22, 0x22	; 34
     616:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
}
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	08 95       	ret

00000628 <RTLsend_packet>:
//koniec pe³nej inicjalizacji kontrolera

//Wysy³anie pakietu do RTL8019as
void RTLsend_packet(void) {
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29

	uint8_t i;
	
	RTLwrite(CR, 0x22);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	62 e2       	ldi	r22, 0x22	; 34
     632:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	while(RTLread(CR) & 0x04) {}; //czekanie a¿ mo¿na wys³aæ
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     63c:	82 fd       	sbrc	r24, 2
     63e:	60 c0       	rjmp	.+192    	; 0x700 <RTLsend_packet+0xd8>
	
	RTLwrite(TPSR,TXSTART_INIT);
     640:	84 e0       	ldi	r24, 0x04	; 4
     642:	60 e4       	ldi	r22, 0x40	; 64
     644:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(RSAR0, 0x00);
     648:	88 e0       	ldi	r24, 0x08	; 8
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RSAR1, TXSTART_INIT);
     650:	89 e0       	ldi	r24, 0x09	; 9
     652:	60 e4       	ldi	r22, 0x40	; 64
     654:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(_ISR, (1<<ISR_PTX));
     658:	87 e0       	ldi	r24, 0x07	; 7
     65a:	62 e0       	ldi	r22, 0x02	; 2
     65c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(RBCR0, 0xEA);
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	6a ee       	ldi	r22, 0xEA	; 234
     664:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RBCR1, 0x05);
     668:	8b e0       	ldi	r24, 0x0B	; 11
     66a:	65 e0       	ldi	r22, 0x05	; 5
     66c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(CR, 0x12);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	62 e1       	ldi	r22, 0x12	; 18
     674:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	for(i=0; i<PacketSize; i++) {
     678:	80 91 91 01 	lds	r24, 0x0191
     67c:	90 91 92 01 	lds	r25, 0x0192
     680:	89 2b       	or	r24, r25
     682:	c1 f0       	breq	.+48     	; 0x6b4 <RTLsend_packet+0x8c>
     684:	10 e0       	ldi	r17, 0x00	; 0
		
		RTLwrite(RDMAPORT, EthFrame[i]);	//zapis ramki do kontrolera
     686:	c0 e0       	ldi	r28, 0x00	; 0
     688:	d1 e1       	ldi	r29, 0x11	; 17
     68a:	fe 01       	movw	r30, r28
     68c:	e1 0f       	add	r30, r17
     68e:	f1 1d       	adc	r31, r1
     690:	80 e1       	ldi	r24, 0x10	; 16
     692:	60 81       	ld	r22, Z
     694:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RBCR0, 0xEA);
	RTLwrite(RBCR1, 0x05);
	
	RTLwrite(CR, 0x12);
	
	for(i=0; i<PacketSize; i++) {
     698:	1f 5f       	subi	r17, 0xFF	; 255
     69a:	21 2f       	mov	r18, r17
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	80 91 91 01 	lds	r24, 0x0191
     6a2:	90 91 92 01 	lds	r25, 0x0192
     6a6:	28 17       	cp	r18, r24
     6a8:	39 07       	cpc	r19, r25
     6aa:	78 f3       	brcs	.-34     	; 0x68a <RTLsend_packet+0x62>
		
		RTLwrite(RDMAPORT, EthFrame[i]);	//zapis ramki do kontrolera
	}
	
	while (PacketSize<60) {
     6ac:	bc 01       	movw	r22, r24
     6ae:	8c 33       	cpi	r24, 0x3C	; 60
     6b0:	91 05       	cpc	r25, r1
     6b2:	90 f4       	brcc	.+36     	; 0x6d8 <RTLsend_packet+0xb0>
		
		RTLwrite(RDMAPORT, 0);	//Je¿eli ramka mnijsza ni¿ 60 bajtów to dope³nij zerami
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
		PacketSize++;
     6bc:	80 91 91 01 	lds	r24, 0x0191
     6c0:	90 91 92 01 	lds	r25, 0x0192
     6c4:	bc 01       	movw	r22, r24
     6c6:	6f 5f       	subi	r22, 0xFF	; 255
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	70 93 92 01 	sts	0x0192, r23
     6ce:	60 93 91 01 	sts	0x0191, r22
	for(i=0; i<PacketSize; i++) {
		
		RTLwrite(RDMAPORT, EthFrame[i]);	//zapis ramki do kontrolera
	}
	
	while (PacketSize<60) {
     6d2:	6c 33       	cpi	r22, 0x3C	; 60
     6d4:	71 05       	cpc	r23, r1
     6d6:	70 f3       	brcs	.-36     	; 0x6b4 <RTLsend_packet+0x8c>
		
		RTLwrite(RDMAPORT, 0);	//Je¿eli ramka mnijsza ni¿ 60 bajtów to dope³nij zerami
		PacketSize++;
	}
	
	RTLwrite(TBCR0, (uint8_t)(PacketSize));	//zapisz rozmiar ramiki
     6d8:	85 e0       	ldi	r24, 0x05	; 5
     6da:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(TBCR1, (uint8_t)((PacketSize)>>8));
     6de:	60 91 92 01 	lds	r22, 0x0192
     6e2:	86 e0       	ldi	r24, 0x06	; 6
     6e4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>

	RTLwrite(CR, 0x24);	//wys³anie ramki przez sieæ
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	64 e2       	ldi	r22, 0x24	; 36
     6ec:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(_ISR, (1<<ISR_RDC));
     6f0:	87 e0       	ldi	r24, 0x07	; 7
     6f2:	60 e4       	ldi	r22, 0x40	; 64
     6f4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
}// koniec funkcju wysy³aj¹cej pakiet
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	08 95       	ret
     700:	ff cf       	rjmp	.-2      	; 0x700 <RTLsend_packet+0xd8>

00000702 <RTLreceive_empty_check>:

//Funkcja sprawdzaj¹ca czy w buforze kontrolera jest nowy pakiet
uint8_t RTLreceive_empty_check(void) {
     702:	1f 93       	push	r17
	
	uint8_t curr;
	
	RTLwrite(CR, 0x68);
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	68 e6       	ldi	r22, 0x68	; 104
     708:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	curr = RTLread(CURR);
     70c:	87 e0       	ldi	r24, 0x07	; 7
     70e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     712:	18 2f       	mov	r17, r24
	RTLwrite(CR, 0x22);
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	62 e2       	ldi	r22, 0x22	; 34
     718:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	return (curr == RTLread(BNRY)); //Je¿eli wskaŸniki równe to znaczy ¿e nie odebrano pakietu
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	18 17       	cp	r17, r24
     726:	09 f4       	brne	.+2      	; 0x72a <RTLreceive_empty_check+0x28>
     728:	91 e0       	ldi	r25, 0x01	; 1
	
}// koniec funkcji sprawdzaj¹cej bufor
     72a:	89 2f       	mov	r24, r25
     72c:	1f 91       	pop	r17
     72e:	08 95       	ret

00000730 <RTLend_retreive>:
void RTLend_retreive(void) {
	
	
	uint8_t i;
	
	RTLwrite(CR, 0x22);
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	62 e2       	ldi	r22, 0x22	; 34
     734:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	for(i=0; i <= 20; i++) {
		if(RTLread(_ISR) & 1<<6) {
     738:	87 e0       	ldi	r24, 0x07	; 7
     73a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     73e:	86 fd       	sbrc	r24, 6
     740:	04 c0       	rjmp	.+8      	; 0x74a <RTLend_retreive+0x1a>
			break;
     742:	80 e0       	ldi	r24, 0x00	; 0
	
	
	uint8_t i;
	
	RTLwrite(CR, 0x22);
	for(i=0; i <= 20; i++) {
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	85 31       	cpi	r24, 0x15	; 21
     748:	e9 f7       	brne	.-6      	; 0x744 <RTLend_retreive+0x14>
		if(RTLread(_ISR) & 1<<6) {
			break;
		}
	}
	RTLwrite(_ISR, 1<<6);
     74a:	87 e0       	ldi	r24, 0x07	; 7
     74c:	60 e4       	ldi	r22, 0x40	; 64
     74e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
		
	RTLwrite(BNRY, nextPacketPtr);
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	60 91 85 01 	lds	r22, 0x0185
     758:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
}// koniec funkcji koncz¹cej odczyt
     75c:	08 95       	ret

0000075e <RTLreceive_packet>:

//Funkcja odczytuj¹ca ramkê z kontrolera sieci
uint8_t RTLreceive_packet(void) {
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
	
	
	uint8_t i;
	
	if(RTLreceive_empty_check()) return 2;
     76a:	0e 94 81 03 	call	0x702	; 0x702 <RTLreceive_empty_check>
     76e:	88 23       	and	r24, r24
     770:	11 f0       	breq	.+4      	; 0x776 <RTLreceive_packet+0x18>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	31 c1       	rjmp	.+610    	; 0x9d8 <RTLreceive_packet+0x27a>
	
	RTLwrite(CR, 0x22);
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	62 e2       	ldi	r22, 0x22	; 34
     77a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	currentPacketPtr = RTLread(BNRY);
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     784:	80 93 87 01 	sts	0x0187, r24
     788:	10 92 88 01 	sts	0x0188, r1
	currentRetreiveAddress = (currentPacketPtr<<8) + 4;
     78c:	38 2f       	mov	r19, r24
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	2c 5f       	subi	r18, 0xFC	; 252
     792:	3f 4f       	sbci	r19, 0xFF	; 255
     794:	30 93 90 01 	sts	0x0190, r19
     798:	20 93 8f 01 	sts	0x018F, r18

	RTLwrite(_ISR, (1<<ISR_PRX));
     79c:	87 e0       	ldi	r24, 0x07	; 7
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	if ((currentPacketPtr >= RXSTOP_INIT) || (currentPacketPtr < RXSTART_INIT)) {
     7a4:	80 91 87 01 	lds	r24, 0x0187
     7a8:	90 91 88 01 	lds	r25, 0x0188
     7ac:	86 54       	subi	r24, 0x46	; 70
     7ae:	90 40       	sbci	r25, 0x00	; 0
     7b0:	4a 97       	sbiw	r24, 0x1a	; 26
     7b2:	90 f0       	brcs	.+36     	; 0x7d8 <RTLreceive_packet+0x7a>
		
		RTLwrite(BNRY, RXSTART_INIT);
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	66 e4       	ldi	r22, 0x46	; 70
     7b8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
		RTLwrite(CR, 0x62);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	62 e6       	ldi	r22, 0x62	; 98
     7c0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
		RTLwrite(CURR, RXSTART_INIT);
     7c4:	87 e0       	ldi	r24, 0x07	; 7
     7c6:	66 e4       	ldi	r22, 0x46	; 70
     7c8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
		RTLwrite(CR, 0x22);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	62 e2       	ldi	r22, 0x22	; 34
     7d0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	00 c1       	rjmp	.+512    	; 0x9d8 <RTLreceive_packet+0x27a>
		return 3;
	}
	
	RTLwrite(RBCR0, 4+ETHERNET_HEADER_LENGTH);
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	62 e1       	ldi	r22, 0x12	; 18
     7dc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RBCR1, 0);
     7e0:	8b e0       	ldi	r24, 0x0B	; 11
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RSAR0, 0);
     7e8:	88 e0       	ldi	r24, 0x08	; 8
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RSAR1, currentPacketPtr);
     7f0:	89 e0       	ldi	r24, 0x09	; 9
     7f2:	60 91 87 01 	lds	r22, 0x0187
     7f6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(CR, 0x0A);
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	6a e0       	ldi	r22, 0x0A	; 10
     7fe:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
		
	dma = RTLread(RDMAPORT);
     802:	80 e1       	ldi	r24, 0x10	; 16
     804:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     808:	80 93 77 01 	sts	0x0177, r24
	nextPacketPtr = RTLread(RDMAPORT);
     80c:	80 e1       	ldi	r24, 0x10	; 16
     80e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	90 93 86 01 	sts	0x0186, r25
     818:	80 93 85 01 	sts	0x0185, r24
	
	if((nextPacketPtr >= RXSTOP_INIT) || (nextPacketPtr < RXSTART_INIT)) return 4;
     81c:	86 54       	subi	r24, 0x46	; 70
     81e:	90 40       	sbci	r25, 0x00	; 0
     820:	4a 97       	sbiw	r24, 0x1a	; 26
     822:	10 f0       	brcs	.+4      	; 0x828 <RTLreceive_packet+0xca>
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	d8 c0       	rjmp	.+432    	; 0x9d8 <RTLreceive_packet+0x27a>
		
	PacketSize = RTLread(RDMAPORT);
     828:	80 e1       	ldi	r24, 0x10	; 16
     82a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     82e:	08 2f       	mov	r16, r24
     830:	10 e0       	ldi	r17, 0x00	; 0
     832:	10 93 92 01 	sts	0x0192, r17
     836:	00 93 91 01 	sts	0x0191, r16
	PacketSize |= (uint8_t)RTLread(RDMAPORT);
     83a:	80 e1       	ldi	r24, 0x10	; 16
     83c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	80 2b       	or	r24, r16
     844:	91 2b       	or	r25, r17
     846:	90 93 92 01 	sts	0x0192, r25
     84a:	80 93 91 01 	sts	0x0191, r24
		
	if(PacketSize > 4) {
     84e:	85 30       	cpi	r24, 0x05	; 5
     850:	91 05       	cpc	r25, r1
     852:	48 f0       	brcs	.+18     	; 0x866 <RTLreceive_packet+0x108>
		PacketSize -= 4;
     854:	04 97       	sbiw	r24, 0x04	; 4
     856:	90 93 92 01 	sts	0x0192, r25
     85a:	80 93 91 01 	sts	0x0191, r24
	} else {
		RTLend_retreive();
		return 5;
	}
		
	if(PacketSize > 1514) {
     85e:	8b 5e       	subi	r24, 0xEB	; 235
     860:	95 40       	sbci	r25, 0x05	; 5
     862:	28 f4       	brcc	.+10     	; 0x86e <RTLreceive_packet+0x110>
     864:	08 c0       	rjmp	.+16     	; 0x876 <RTLreceive_packet+0x118>
	PacketSize |= (uint8_t)RTLread(RDMAPORT);
		
	if(PacketSize > 4) {
		PacketSize -= 4;
	} else {
		RTLend_retreive();
     866:	0e 94 98 03 	call	0x730	; 0x730 <RTLend_retreive>
     86a:	85 e0       	ldi	r24, 0x05	; 5
     86c:	b5 c0       	rjmp	.+362    	; 0x9d8 <RTLreceive_packet+0x27a>
		return 5;
	}
		
	if(PacketSize > 1514) {
		RTLend_retreive();
     86e:	0e 94 98 03 	call	0x730	; 0x730 <RTLend_retreive>
     872:	86 e0       	ldi	r24, 0x06	; 6
     874:	b1 c0       	rjmp	.+354    	; 0x9d8 <RTLreceive_packet+0x27a>
		return 6;
	}
		
	EthFrame[EthDestMac+0]=RTLread(RDMAPORT);
     876:	80 e1       	ldi	r24, 0x10	; 16
     878:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     87c:	0f 2e       	mov	r0, r31
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	ef 2e       	mov	r14, r31
     882:	f1 e1       	ldi	r31, 0x11	; 17
     884:	ff 2e       	mov	r15, r31
     886:	f0 2d       	mov	r31, r0
     888:	f7 01       	movw	r30, r14
     88a:	81 93       	st	Z+, r24
     88c:	8f 01       	movw	r16, r30
	EthFrame[EthDestMac+1]=RTLread(RDMAPORT);
     88e:	80 e1       	ldi	r24, 0x10	; 16
     890:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     894:	f8 01       	movw	r30, r16
     896:	80 83       	st	Z, r24
	EthFrame[EthDestMac+2]=RTLread(RDMAPORT);
     898:	80 e1       	ldi	r24, 0x10	; 16
     89a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     89e:	f7 01       	movw	r30, r14
     8a0:	82 83       	std	Z+2, r24	; 0x02
	EthFrame[EthDestMac+3]=RTLread(RDMAPORT);
     8a2:	80 e1       	ldi	r24, 0x10	; 16
     8a4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8a8:	f7 01       	movw	r30, r14
     8aa:	83 83       	std	Z+3, r24	; 0x03
	EthFrame[EthDestMac+4]=RTLread(RDMAPORT);
     8ac:	80 e1       	ldi	r24, 0x10	; 16
     8ae:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8b2:	f7 01       	movw	r30, r14
     8b4:	84 83       	std	Z+4, r24	; 0x04
	EthFrame[EthDestMac+5]=RTLread(RDMAPORT);
     8b6:	80 e1       	ldi	r24, 0x10	; 16
     8b8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8bc:	f7 01       	movw	r30, r14
     8be:	85 83       	std	Z+5, r24	; 0x05
		
	EthFrame[EthSourceMac+0]=RTLread(RDMAPORT);
     8c0:	80 e1       	ldi	r24, 0x10	; 16
     8c2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8c6:	f7 01       	movw	r30, r14
     8c8:	86 83       	std	Z+6, r24	; 0x06
	EthFrame[EthSourceMac+1]=RTLread(RDMAPORT);
     8ca:	80 e1       	ldi	r24, 0x10	; 16
     8cc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8d0:	f7 01       	movw	r30, r14
     8d2:	87 83       	std	Z+7, r24	; 0x07
	EthFrame[EthSourceMac+2]=RTLread(RDMAPORT);
     8d4:	80 e1       	ldi	r24, 0x10	; 16
     8d6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8da:	f7 01       	movw	r30, r14
     8dc:	80 87       	std	Z+8, r24	; 0x08
	EthFrame[EthSourceMac+3]=RTLread(RDMAPORT);
     8de:	80 e1       	ldi	r24, 0x10	; 16
     8e0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8e4:	f7 01       	movw	r30, r14
     8e6:	81 87       	std	Z+9, r24	; 0x09
	EthFrame[EthSourceMac+4]=RTLread(RDMAPORT);
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8ee:	f7 01       	movw	r30, r14
     8f0:	82 87       	std	Z+10, r24	; 0x0a
	EthFrame[EthSourceMac+5]=RTLread(RDMAPORT);
     8f2:	80 e1       	ldi	r24, 0x10	; 16
     8f4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     8f8:	f7 01       	movw	r30, r14
     8fa:	83 87       	std	Z+11, r24	; 0x0b
		
	EthFrame[EthTypeLen+0]=RTLread(RDMAPORT);
     8fc:	80 e1       	ldi	r24, 0x10	; 16
     8fe:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     902:	f7 01       	movw	r30, r14
     904:	84 87       	std	Z+12, r24	; 0x0c
	EthFrame[EthTypeLen+1]=RTLread(RDMAPORT);
     906:	80 e1       	ldi	r24, 0x10	; 16
     908:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     90c:	f7 01       	movw	r30, r14
     90e:	85 87       	std	Z+13, r24	; 0x0d
		
	currentRetreiveAddress += 6+6+2;
     910:	80 91 8f 01 	lds	r24, 0x018F
     914:	90 91 90 01 	lds	r25, 0x0190
     918:	0e 96       	adiw	r24, 0x0e	; 14
     91a:	90 93 90 01 	sts	0x0190, r25
     91e:	80 93 8f 01 	sts	0x018F, r24
		
	RTLwrite(CR, 0x22);
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	62 e2       	ldi	r22, 0x22	; 34
     926:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	for(i=0; i <= 20; i++) 
		if(RTLread(_ISR) & 1<<6) 
     92a:	87 e0       	ldi	r24, 0x07	; 7
     92c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     930:	86 fd       	sbrc	r24, 6
     932:	04 c0       	rjmp	.+8      	; 0x93c <RTLreceive_packet+0x1de>
			break;
     934:	80 e0       	ldi	r24, 0x00	; 0
	EthFrame[EthTypeLen+1]=RTLread(RDMAPORT);
		
	currentRetreiveAddress += 6+6+2;
		
	RTLwrite(CR, 0x22);
	for(i=0; i <= 20; i++) 
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	85 31       	cpi	r24, 0x15	; 21
     93a:	e9 f7       	brne	.-6      	; 0x936 <RTLreceive_packet+0x1d8>
		if(RTLread(_ISR) & 1<<6) 
			break;
	RTLwrite(_ISR, 1<<6);
     93c:	87 e0       	ldi	r24, 0x07	; 7
     93e:	60 e4       	ldi	r22, 0x40	; 64
     940:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
		
	RTLwrite(RBCR0, (uint8_t)PacketSize);
     944:	8a e0       	ldi	r24, 0x0A	; 10
     946:	60 91 91 01 	lds	r22, 0x0191
     94a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RBCR1, (uint8_t)(PacketSize>>8));
     94e:	60 91 92 01 	lds	r22, 0x0192
     952:	8b e0       	ldi	r24, 0x0B	; 11
     954:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RSAR0, (uint8_t)currentRetreiveAddress);
     958:	88 e0       	ldi	r24, 0x08	; 8
     95a:	60 91 8f 01 	lds	r22, 0x018F
     95e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	RTLwrite(RSAR1, (uint8_t)(currentRetreiveAddress>>8));
     962:	60 91 90 01 	lds	r22, 0x0190
     966:	89 e0       	ldi	r24, 0x09	; 9
     968:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
	RTLwrite(CR, 0x0A);
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	6a e0       	ldi	r22, 0x0A	; 10
     970:	0e 94 78 02 	call	0x4f0	; 0x4f0 <RTLwrite>
	
		for(i=0; i < PacketSize; i++) 
     974:	20 91 91 01 	lds	r18, 0x0191
     978:	30 91 92 01 	lds	r19, 0x0192
     97c:	21 15       	cp	r18, r1
     97e:	31 05       	cpc	r19, r1
     980:	a1 f0       	breq	.+40     	; 0x9aa <RTLreceive_packet+0x24c>
     982:	00 e0       	ldi	r16, 0x00	; 0
			EthFrame[14+i] = RTLread(RDMAPORT);
     984:	c0 e0       	ldi	r28, 0x00	; 0
     986:	d1 e1       	ldi	r29, 0x11	; 17
     988:	80 e1       	ldi	r24, 0x10	; 16
     98a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <RTLread>
     98e:	fe 01       	movw	r30, r28
     990:	e0 0f       	add	r30, r16
     992:	f1 1d       	adc	r31, r1
     994:	86 87       	std	Z+14, r24	; 0x0e
	RTLwrite(RSAR0, (uint8_t)currentRetreiveAddress);
	RTLwrite(RSAR1, (uint8_t)(currentRetreiveAddress>>8));
	
	RTLwrite(CR, 0x0A);
	
		for(i=0; i < PacketSize; i++) 
     996:	0f 5f       	subi	r16, 0xFF	; 255
     998:	20 91 91 01 	lds	r18, 0x0191
     99c:	30 91 92 01 	lds	r19, 0x0192
     9a0:	80 2f       	mov	r24, r16
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	82 17       	cp	r24, r18
     9a6:	93 07       	cpc	r25, r19
     9a8:	78 f3       	brcs	.-34     	; 0x988 <RTLreceive_packet+0x22a>
			EthFrame[14+i] = RTLread(RDMAPORT);
			
		currentRetreiveAddress += PacketSize;
     9aa:	80 91 8f 01 	lds	r24, 0x018F
     9ae:	90 91 90 01 	lds	r25, 0x0190
     9b2:	82 0f       	add	r24, r18
     9b4:	93 1f       	adc	r25, r19
     9b6:	90 93 90 01 	sts	0x0190, r25
     9ba:	80 93 8f 01 	sts	0x018F, r24
		if( currentRetreiveAddress >= 0x6000) 
     9be:	f0 e6       	ldi	r31, 0x60	; 96
     9c0:	80 30       	cpi	r24, 0x00	; 0
     9c2:	9f 07       	cpc	r25, r31
     9c4:	30 f0       	brcs	.+12     	; 0x9d2 <RTLreceive_packet+0x274>
			currentRetreiveAddress = currentRetreiveAddress - (0x6000-0x4600);	
     9c6:	80 50       	subi	r24, 0x00	; 0
     9c8:	9a 41       	sbci	r25, 0x1A	; 26
     9ca:	90 93 90 01 	sts	0x0190, r25
     9ce:	80 93 8f 01 	sts	0x018F, r24
	
	RTLend_retreive();		
     9d2:	0e 94 98 03 	call	0x730	; 0x730 <RTLend_retreive>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
	
}// koniec funkcji odczytuj¹cej ramkê
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	08 95       	ret

000009e6 <PacketCheck>:

//Funkcja sprawdzaj¹ca czy odebrana ramka to ARP
uint8_t PacketCheck(void) {

	if(EthFrame[EthTypeLen+0]==0x08 && EthFrame[EthTypeLen+1]==0x06) {
     9e6:	80 91 0c 11 	lds	r24, 0x110C
     9ea:	88 30       	cpi	r24, 0x08	; 8
     9ec:	51 f4       	brne	.+20     	; 0xa02 <PacketCheck+0x1c>
     9ee:	80 91 0d 11 	lds	r24, 0x110D
     9f2:	86 30       	cpi	r24, 0x06	; 6
     9f4:	11 f4       	brne	.+4      	; 0x9fa <PacketCheck+0x14>
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	08 95       	ret
		return 1; //wiadomoœæ ARP
	}
	
	if(EthFrame[EthTypeLen+0]==0x08 && EthFrame[EthTypeLen+1]==0x00) {
     9fa:	88 23       	and	r24, r24
     9fc:	11 f4       	brne	.+4      	; 0xa02 <PacketCheck+0x1c>
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	08 95       	ret
     a02:	80 e0       	ldi	r24, 0x00	; 0
		return 2; //pakiet IP
	}
	
	return 0;
}// koniec funkcji sprawdzj¹cej odebran¹ ramkê
     a04:	08 95       	ret

00000a06 <MakeEthHeader>:


//Funkcja tworz¹c nag³ówek ramki Ethernet
void MakeEthHeader(uint8_t dest0, uint8_t dest1, uint8_t dest2, uint8_t dest3, uint8_t dest4, uint8_t dest5, uint8_t type0, uint8_t type1)
{
     a06:	af 92       	push	r10
     a08:	cf 92       	push	r12
     a0a:	ef 92       	push	r14
     a0c:	0f 93       	push	r16
	PacketSize=0;
	
	EthFrame[EthDestMac+0]=dest0;
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b1 e1       	ldi	r27, 0x11	; 17
     a12:	fd 01       	movw	r30, r26
     a14:	81 93       	st	Z+, r24
	EthFrame[EthDestMac+1]=dest1;
     a16:	60 83       	st	Z, r22
	EthFrame[EthDestMac+2]=dest2;
     a18:	12 96       	adiw	r26, 0x02	; 2
     a1a:	4c 93       	st	X, r20
     a1c:	12 97       	sbiw	r26, 0x02	; 2
	EthFrame[EthDestMac+3]=dest3;
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	2c 93       	st	X, r18
     a22:	13 97       	sbiw	r26, 0x03	; 3
	EthFrame[EthDestMac+4]=dest4;
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	0c 93       	st	X, r16
     a28:	14 97       	sbiw	r26, 0x04	; 4
	EthFrame[EthDestMac+5]=dest5;
     a2a:	15 96       	adiw	r26, 0x05	; 5
     a2c:	ec 92       	st	X, r14
     a2e:	15 97       	sbiw	r26, 0x05	; 5
	
	EthFrame[EthSourceMac+0]=MyMac[0];
     a30:	8f e5       	ldi	r24, 0x5F	; 95
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	fc 01       	movw	r30, r24
     a36:	21 91       	ld	r18, Z+
     a38:	16 96       	adiw	r26, 0x06	; 6
     a3a:	2c 93       	st	X, r18
     a3c:	16 97       	sbiw	r26, 0x06	; 6
	EthFrame[EthSourceMac+1]=MyMac[1];
     a3e:	20 81       	ld	r18, Z
     a40:	17 96       	adiw	r26, 0x07	; 7
     a42:	2c 93       	st	X, r18
     a44:	17 97       	sbiw	r26, 0x07	; 7
	EthFrame[EthSourceMac+2]=MyMac[2];
     a46:	fc 01       	movw	r30, r24
     a48:	22 81       	ldd	r18, Z+2	; 0x02
     a4a:	18 96       	adiw	r26, 0x08	; 8
     a4c:	2c 93       	st	X, r18
     a4e:	18 97       	sbiw	r26, 0x08	; 8
	EthFrame[EthSourceMac+3]=MyMac[3];
     a50:	23 81       	ldd	r18, Z+3	; 0x03
     a52:	19 96       	adiw	r26, 0x09	; 9
     a54:	2c 93       	st	X, r18
     a56:	19 97       	sbiw	r26, 0x09	; 9
	EthFrame[EthSourceMac+4]=MyMac[4];
     a58:	24 81       	ldd	r18, Z+4	; 0x04
     a5a:	1a 96       	adiw	r26, 0x0a	; 10
     a5c:	2c 93       	st	X, r18
     a5e:	1a 97       	sbiw	r26, 0x0a	; 10
	EthFrame[EthSourceMac+5]=MyMac[5];
     a60:	85 81       	ldd	r24, Z+5	; 0x05
     a62:	1b 96       	adiw	r26, 0x0b	; 11
     a64:	8c 93       	st	X, r24
     a66:	1b 97       	sbiw	r26, 0x0b	; 11
	
	EthFrame[EthTypeLen+0]=type0;
     a68:	1c 96       	adiw	r26, 0x0c	; 12
     a6a:	cc 92       	st	X, r12
     a6c:	1c 97       	sbiw	r26, 0x0c	; 12
	EthFrame[EthTypeLen+1]=type1;
     a6e:	1d 96       	adiw	r26, 0x0d	; 13
     a70:	ac 92       	st	X, r10
	
	PacketSize+=14;
     a72:	8e e0       	ldi	r24, 0x0E	; 14
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 92 01 	sts	0x0192, r25
     a7a:	80 93 91 01 	sts	0x0191, r24

}//Koniec funkcji tworz¹cej nag³ówek
     a7e:	0f 91       	pop	r16
     a80:	ef 90       	pop	r14
     a82:	cf 90       	pop	r12
     a84:	af 90       	pop	r10
     a86:	08 95       	ret

00000a88 <rs_put>:
#include <avr/io.h>
#include "rs.h"

int rs_put(char znak)
{
     a88:	98 2f       	mov	r25, r24
	//Oczekiwanie a¿ bufor nadajnika jest pusty
	while(!(1<<UDRE0 & UCSR0A)) {}
     a8a:	eb e2       	ldi	r30, 0x2B	; 43
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	85 ff       	sbrs	r24, 5
     a92:	fd cf       	rjmp	.-6      	; 0xa8e <rs_put+0x6>
	UDR0 = znak;
     a94:	9c b9       	out	0x0c, r25	; 12
	return 0;
}
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	08 95       	ret

00000a9c <rs_get>:

int rs_get(void)
{
	char znak;
	//Oczekiwanie na pojawienie siê danej
	while(!(1<<RXC0 & UCSR0A)) {}
     a9c:	eb e2       	ldi	r30, 0x2B	; 43
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	88 23       	and	r24, r24
     aa4:	ec f7       	brge	.-6      	; 0xaa0 <rs_get+0x4>
	znak = UDR0;
     aa6:	8c b1       	in	r24, 0x0c	; 12
	return znak;
}
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	08 95       	ret

00000aac <ArpCheck>:

}//Koniec funkcji tworz¹cej zapytanie ARP

//Funkcja obs³uguj¹ca wiadomoœæ ARP
uint8_t ArpCheck(void)
{
     aac:	5f 92       	push	r5
     aae:	6f 92       	push	r6
     ab0:	7f 92       	push	r7
     ab2:	8f 92       	push	r8
     ab4:	9f 92       	push	r9
     ab6:	af 92       	push	r10
     ab8:	bf 92       	push	r11
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
	/*//Przypisanie adresu IP do mikroserwera
	ServIp[0]=EthFrame[ArpDestIp1]; ServIp[1]=EthFrame[ArpDestIp2];
	ServIp[2]=EthFrame[ArpDestIp3]; ServIp[3]=EthFrame[ArpDestIp4];*/
	
	//Przypisanie adresu MAC
	ArpReplyMac[0] = EthFrame[EthSourceMac+0];
     aca:	4e e7       	ldi	r20, 0x7E	; 126
     acc:	51 e0       	ldi	r21, 0x01	; 1
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	91 e1       	ldi	r25, 0x11	; 17
     ad2:	dc 01       	movw	r26, r24
     ad4:	2d 91       	ld	r18, X+
     ad6:	fa 01       	movw	r30, r20
     ad8:	21 93       	st	Z+, r18
	ArpReplyMac[1] = EthFrame[EthSourceMac+1];
     ada:	2c 91       	ld	r18, X
     adc:	20 83       	st	Z, r18
	ArpReplyMac[2] = EthFrame[EthSourceMac+2];
     ade:	ec 01       	movw	r28, r24
     ae0:	2a 81       	ldd	r18, Y+2	; 0x02
     ae2:	fa 01       	movw	r30, r20
     ae4:	22 83       	std	Z+2, r18	; 0x02
	ArpReplyMac[3] = EthFrame[EthSourceMac+3];
     ae6:	2b 81       	ldd	r18, Y+3	; 0x03
     ae8:	23 83       	std	Z+3, r18	; 0x03
	ArpReplyMac[4] = EthFrame[EthSourceMac+4];
     aea:	2c 81       	ldd	r18, Y+4	; 0x04
     aec:	24 83       	std	Z+4, r18	; 0x04
	ArpReplyMac[5] = EthFrame[EthSourceMac+5];
     aee:	2d 81       	ldd	r18, Y+5	; 0x05
     af0:	25 83       	std	Z+5, r18	; 0x05
	
	//Przypisanie adresy IP
	ArpReplyIp[0] = EthFrame[ArpSourceIp1];
     af2:	a3 e9       	ldi	r26, 0x93	; 147
     af4:	b1 e0       	ldi	r27, 0x01	; 1
     af6:	2e 89       	ldd	r18, Y+22	; 0x16
     af8:	fd 01       	movw	r30, r26
     afa:	21 93       	st	Z+, r18
	ArpReplyIp[1] = EthFrame[ArpSourceIp2];
     afc:	2f 89       	ldd	r18, Y+23	; 0x17
     afe:	20 83       	st	Z, r18
	ArpReplyIp[2] = EthFrame[ArpSourceIp3];
     b00:	28 8d       	ldd	r18, Y+24	; 0x18
     b02:	12 96       	adiw	r26, 0x02	; 2
     b04:	2c 93       	st	X, r18
     b06:	12 97       	sbiw	r26, 0x02	; 2
	ArpReplyIp[3] = EthFrame[ArpSourceIp4];
     b08:	29 8d       	ldd	r18, Y+25	; 0x19
     b0a:	13 96       	adiw	r26, 0x03	; 3
     b0c:	2c 93       	st	X, r18
		
	if(EthFrame[ArpMediumType0]==0x00 && EthFrame[ArpMediumType1]==0x01
     b0e:	88 85       	ldd	r24, Y+8	; 0x08
     b10:	88 23       	and	r24, r24
     b12:	09 f0       	breq	.+2      	; 0xb16 <ArpCheck+0x6a>
     b14:	55 c1       	rjmp	.+682    	; 0xdc0 <ArpCheck+0x314>
     b16:	80 91 0f 11 	lds	r24, 0x110F
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	09 f0       	breq	.+2      	; 0xb20 <ArpCheck+0x74>
     b1e:	50 c1       	rjmp	.+672    	; 0xdc0 <ArpCheck+0x314>
     b20:	80 91 10 11 	lds	r24, 0x1110
     b24:	88 30       	cpi	r24, 0x08	; 8
     b26:	09 f0       	breq	.+2      	; 0xb2a <ArpCheck+0x7e>
     b28:	4b c1       	rjmp	.+662    	; 0xdc0 <ArpCheck+0x314>
     b2a:	80 91 11 11 	lds	r24, 0x1111
     b2e:	88 23       	and	r24, r24
     b30:	09 f0       	breq	.+2      	; 0xb34 <ArpCheck+0x88>
     b32:	e6 c0       	rjmp	.+460    	; 0xd00 <ArpCheck+0x254>
     b34:	80 91 12 11 	lds	r24, 0x1112
     b38:	86 30       	cpi	r24, 0x06	; 6
     b3a:	09 f0       	breq	.+2      	; 0xb3e <ArpCheck+0x92>
     b3c:	e1 c0       	rjmp	.+450    	; 0xd00 <ArpCheck+0x254>
     b3e:	80 91 13 11 	lds	r24, 0x1113
     b42:	84 30       	cpi	r24, 0x04	; 4
     b44:	09 f0       	breq	.+2      	; 0xb48 <ArpCheck+0x9c>
     b46:	dc c0       	rjmp	.+440    	; 0xd00 <ArpCheck+0x254>
     b48:	80 91 14 11 	lds	r24, 0x1114
     b4c:	88 23       	and	r24, r24
     b4e:	09 f0       	breq	.+2      	; 0xb52 <ArpCheck+0xa6>
     b50:	d7 c0       	rjmp	.+430    	; 0xd00 <ArpCheck+0x254>
     b52:	80 91 15 11 	lds	r24, 0x1115
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <ArpCheck+0xb0>
     b5a:	d2 c0       	rjmp	.+420    	; 0xd00 <ArpCheck+0x254>
     b5c:	90 91 26 11 	lds	r25, 0x1126
     b60:	80 91 65 01 	lds	r24, 0x0165
     b64:	98 17       	cp	r25, r24
     b66:	09 f0       	breq	.+2      	; 0xb6a <ArpCheck+0xbe>
     b68:	cb c0       	rjmp	.+406    	; 0xd00 <ArpCheck+0x254>
     b6a:	90 91 27 11 	lds	r25, 0x1127
     b6e:	80 91 66 01 	lds	r24, 0x0166
     b72:	98 17       	cp	r25, r24
     b74:	09 f0       	breq	.+2      	; 0xb78 <ArpCheck+0xcc>
     b76:	c4 c0       	rjmp	.+392    	; 0xd00 <ArpCheck+0x254>
     b78:	90 91 28 11 	lds	r25, 0x1128
     b7c:	80 91 67 01 	lds	r24, 0x0167
     b80:	98 17       	cp	r25, r24
     b82:	09 f0       	breq	.+2      	; 0xb86 <ArpCheck+0xda>
     b84:	bd c0       	rjmp	.+378    	; 0xd00 <ArpCheck+0x254>
     b86:	90 91 29 11 	lds	r25, 0x1129
     b8a:	80 91 68 01 	lds	r24, 0x0168
     b8e:	98 17       	cp	r25, r24
     b90:	09 f0       	breq	.+2      	; 0xb94 <ArpCheck+0xe8>
     b92:	b6 c0       	rjmp	.+364    	; 0xd00 <ArpCheck+0x254>
		&& EthFrame[ArpHardLen]==0x06 && EthFrame[ArpLogicLen]==0x04 
		&& EthFrame[ArpOpType0]==0x00 && EthFrame[ArpOpType1]==0x01
		&& EthFrame[ArpDestIp1]==ServIp[0] && EthFrame[ArpDestIp2]==ServIp[1]
		&& EthFrame[ArpDestIp3]==ServIp[2] && EthFrame[ArpDestIp4]==ServIp[3])
	{
		EthFrame[EthDestMac+0]=EthFrame[EthSourceMac+0];
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b1 e1       	ldi	r27, 0x11	; 17
     b98:	9d 01       	movw	r18, r26
     b9a:	2a 5f       	subi	r18, 0xFA	; 250
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	e9 01       	movw	r28, r18
     ba0:	a8 80       	ld	r10, Y
     ba2:	fd 01       	movw	r30, r26
     ba4:	a1 92       	st	Z+, r10
		EthFrame[EthDestMac+1]=EthFrame[EthSourceMac+1];
     ba6:	ad 01       	movw	r20, r26
     ba8:	49 5f       	subi	r20, 0xF9	; 249
     baa:	5f 4f       	sbci	r21, 0xFF	; 255
     bac:	ea 01       	movw	r28, r20
     bae:	98 80       	ld	r9, Y
     bb0:	90 82       	st	Z, r9
		EthFrame[EthDestMac+2]=EthFrame[EthSourceMac+2];
     bb2:	bd 01       	movw	r22, r26
     bb4:	68 5f       	subi	r22, 0xF8	; 248
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	fb 01       	movw	r30, r22
     bba:	80 80       	ld	r8, Z
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	8c 92       	st	X, r8
     bc0:	12 97       	sbiw	r26, 0x02	; 2
		EthFrame[EthDestMac+3]=EthFrame[EthSourceMac+3];
     bc2:	8d 01       	movw	r16, r26
     bc4:	07 5f       	subi	r16, 0xF7	; 247
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
     bc8:	e8 01       	movw	r28, r16
     bca:	78 80       	ld	r7, Y
     bcc:	13 96       	adiw	r26, 0x03	; 3
     bce:	7c 92       	st	X, r7
     bd0:	13 97       	sbiw	r26, 0x03	; 3
		EthFrame[EthDestMac+4]=EthFrame[EthSourceMac+4];
     bd2:	0f 2e       	mov	r0, r31
     bd4:	fa e0       	ldi	r31, 0x0A	; 10
     bd6:	ef 2e       	mov	r14, r31
     bd8:	ff 24       	eor	r15, r15
     bda:	f0 2d       	mov	r31, r0
     bdc:	ea 0e       	add	r14, r26
     bde:	fb 1e       	adc	r15, r27
     be0:	f7 01       	movw	r30, r14
     be2:	60 80       	ld	r6, Z
     be4:	14 96       	adiw	r26, 0x04	; 4
     be6:	6c 92       	st	X, r6
     be8:	14 97       	sbiw	r26, 0x04	; 4
		EthFrame[EthDestMac+5]=EthFrame[EthSourceMac+5];
     bea:	0f 2e       	mov	r0, r31
     bec:	fb e0       	ldi	r31, 0x0B	; 11
     bee:	cf 2e       	mov	r12, r31
     bf0:	dd 24       	eor	r13, r13
     bf2:	f0 2d       	mov	r31, r0
     bf4:	ca 0e       	add	r12, r26
     bf6:	db 1e       	adc	r13, r27
     bf8:	e6 01       	movw	r28, r12
     bfa:	58 80       	ld	r5, Y
     bfc:	15 96       	adiw	r26, 0x05	; 5
     bfe:	5c 92       	st	X, r5
     c00:	15 97       	sbiw	r26, 0x05	; 5
		
		EthFrame[EthSourceMac+0]=MyMac[0];
     c02:	8f e5       	ldi	r24, 0x5F	; 95
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	fc 01       	movw	r30, r24
     c08:	b1 90       	ld	r11, Z+
     c0a:	e9 01       	movw	r28, r18
     c0c:	b8 82       	st	Y, r11
		EthFrame[EthSourceMac+1]=MyMac[1];
     c0e:	20 81       	ld	r18, Z
     c10:	fa 01       	movw	r30, r20
     c12:	20 83       	st	Z, r18
		EthFrame[EthSourceMac+2]=MyMac[2];
     c14:	ec 01       	movw	r28, r24
     c16:	3a 81       	ldd	r19, Y+2	; 0x02
     c18:	fb 01       	movw	r30, r22
     c1a:	30 83       	st	Z, r19
		EthFrame[EthSourceMac+3]=MyMac[3];
     c1c:	4b 81       	ldd	r20, Y+3	; 0x03
     c1e:	e8 01       	movw	r28, r16
     c20:	48 83       	st	Y, r20
		EthFrame[EthSourceMac+4]=MyMac[4];
     c22:	fc 01       	movw	r30, r24
     c24:	54 81       	ldd	r21, Z+4	; 0x04
     c26:	e7 01       	movw	r28, r14
     c28:	58 83       	st	Y, r21
		EthFrame[EthSourceMac+5]=MyMac[5];
     c2a:	95 81       	ldd	r25, Z+5	; 0x05
     c2c:	f6 01       	movw	r30, r12
     c2e:	90 83       	st	Z, r25
		
		EthFrame[ArpOpType0]=0x00;
     c30:	54 96       	adiw	r26, 0x14	; 20
     c32:	1c 92       	st	X, r1
     c34:	54 97       	sbiw	r26, 0x14	; 20
		EthFrame[ArpOpType1]=0x02;
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	55 96       	adiw	r26, 0x15	; 21
     c3a:	8c 93       	st	X, r24
     c3c:	55 97       	sbiw	r26, 0x15	; 21
		
		EthFrame[ArpSourceMac0]=MyMac[0];
     c3e:	56 96       	adiw	r26, 0x16	; 22
     c40:	bc 92       	st	X, r11
     c42:	56 97       	sbiw	r26, 0x16	; 22
		EthFrame[ArpSourceMac1]=MyMac[1];
     c44:	57 96       	adiw	r26, 0x17	; 23
     c46:	2c 93       	st	X, r18
     c48:	57 97       	sbiw	r26, 0x17	; 23
		EthFrame[ArpSourceMac2]=MyMac[2];
     c4a:	58 96       	adiw	r26, 0x18	; 24
     c4c:	3c 93       	st	X, r19
     c4e:	58 97       	sbiw	r26, 0x18	; 24
		EthFrame[ArpSourceMac3]=MyMac[3];
     c50:	59 96       	adiw	r26, 0x19	; 25
     c52:	4c 93       	st	X, r20
     c54:	59 97       	sbiw	r26, 0x19	; 25
		EthFrame[ArpSourceMac4]=MyMac[4];
     c56:	5a 96       	adiw	r26, 0x1a	; 26
     c58:	5c 93       	st	X, r21
     c5a:	5a 97       	sbiw	r26, 0x1a	; 26
		EthFrame[ArpSourceMac5]=MyMac[5];
     c5c:	5b 96       	adiw	r26, 0x1b	; 27
     c5e:	9c 93       	st	X, r25
     c60:	5b 97       	sbiw	r26, 0x1b	; 27
		
		EthFrame[ArpDestIp1]=EthFrame[ArpSourceIp1];
     c62:	ad 01       	movw	r20, r26
     c64:	44 5e       	subi	r20, 0xE4	; 228
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	ea 01       	movw	r28, r20
     c6a:	88 81       	ld	r24, Y
     c6c:	96 96       	adiw	r26, 0x26	; 38
     c6e:	8c 93       	st	X, r24
     c70:	96 97       	sbiw	r26, 0x26	; 38
		EthFrame[ArpDestIp2]=EthFrame[ArpSourceIp2];
     c72:	bd 01       	movw	r22, r26
     c74:	63 5e       	subi	r22, 0xE3	; 227
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	fb 01       	movw	r30, r22
     c7a:	80 81       	ld	r24, Z
     c7c:	97 96       	adiw	r26, 0x27	; 39
     c7e:	8c 93       	st	X, r24
     c80:	97 97       	sbiw	r26, 0x27	; 39
		EthFrame[ArpDestIp3]=EthFrame[ArpSourceIp3];
     c82:	8d 01       	movw	r16, r26
     c84:	02 5e       	subi	r16, 0xE2	; 226
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	e8 01       	movw	r28, r16
     c8a:	88 81       	ld	r24, Y
     c8c:	98 96       	adiw	r26, 0x28	; 40
     c8e:	8c 93       	st	X, r24
     c90:	98 97       	sbiw	r26, 0x28	; 40
		EthFrame[ArpDestIp4]=EthFrame[ArpSourceIp4];
     c92:	0f 2e       	mov	r0, r31
     c94:	ff e1       	ldi	r31, 0x1F	; 31
     c96:	ef 2e       	mov	r14, r31
     c98:	ff 24       	eor	r15, r15
     c9a:	f0 2d       	mov	r31, r0
     c9c:	ea 0e       	add	r14, r26
     c9e:	fb 1e       	adc	r15, r27
     ca0:	f7 01       	movw	r30, r14
     ca2:	80 81       	ld	r24, Z
     ca4:	99 96       	adiw	r26, 0x29	; 41
     ca6:	8c 93       	st	X, r24
     ca8:	99 97       	sbiw	r26, 0x29	; 41
		
		EthFrame[ArpSourceIp1]=ServIp[0];
     caa:	85 e6       	ldi	r24, 0x65	; 101
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	fc 01       	movw	r30, r24
     cb0:	21 91       	ld	r18, Z+
     cb2:	ea 01       	movw	r28, r20
     cb4:	28 83       	st	Y, r18
		EthFrame[ArpSourceIp2]=ServIp[1];
     cb6:	20 81       	ld	r18, Z
     cb8:	fb 01       	movw	r30, r22
     cba:	20 83       	st	Z, r18
		EthFrame[ArpSourceIp3]=ServIp[2];
     cbc:	ec 01       	movw	r28, r24
     cbe:	2a 81       	ldd	r18, Y+2	; 0x02
     cc0:	f8 01       	movw	r30, r16
     cc2:	20 83       	st	Z, r18
		EthFrame[ArpSourceIp4]=ServIp[3];
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	e7 01       	movw	r28, r14
     cc8:	88 83       	st	Y, r24
		
		EthFrame[ArpDestMac0]=EthFrame[EthDestMac+0];
     cca:	90 96       	adiw	r26, 0x20	; 32
     ccc:	ac 92       	st	X, r10
     cce:	90 97       	sbiw	r26, 0x20	; 32
		EthFrame[ArpDestMac1]=EthFrame[EthDestMac+1];
     cd0:	91 96       	adiw	r26, 0x21	; 33
     cd2:	9c 92       	st	X, r9
     cd4:	91 97       	sbiw	r26, 0x21	; 33
		EthFrame[ArpDestMac2]=EthFrame[EthDestMac+2];
     cd6:	92 96       	adiw	r26, 0x22	; 34
     cd8:	8c 92       	st	X, r8
     cda:	92 97       	sbiw	r26, 0x22	; 34
		EthFrame[ArpDestMac3]=EthFrame[EthDestMac+3];
     cdc:	93 96       	adiw	r26, 0x23	; 35
     cde:	7c 92       	st	X, r7
     ce0:	93 97       	sbiw	r26, 0x23	; 35
		EthFrame[ArpDestMac4]=EthFrame[EthDestMac+4];
     ce2:	94 96       	adiw	r26, 0x24	; 36
     ce4:	6c 92       	st	X, r6
     ce6:	94 97       	sbiw	r26, 0x24	; 36
		EthFrame[ArpDestMac5]=EthFrame[EthDestMac+5];
     ce8:	95 96       	adiw	r26, 0x25	; 37
     cea:	5c 92       	st	X, r5
		
		PacketSize=14+28;
     cec:	8a e2       	ldi	r24, 0x2A	; 42
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	90 93 92 01 	sts	0x0192, r25
     cf4:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
     cf8:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	61 c0       	rjmp	.+194    	; 0xdc2 <ArpCheck+0x316>
		return 2; //Poprawny ARP
	}
	
	if(EthFrame[ArpMediumType0]==0x00 && EthFrame[ArpMediumType1]==0x01
     d00:	80 91 11 11 	lds	r24, 0x1111
     d04:	88 23       	and	r24, r24
     d06:	09 f0       	breq	.+2      	; 0xd0a <ArpCheck+0x25e>
     d08:	5b c0       	rjmp	.+182    	; 0xdc0 <ArpCheck+0x314>
     d0a:	80 91 12 11 	lds	r24, 0x1112
     d0e:	86 30       	cpi	r24, 0x06	; 6
     d10:	09 f0       	breq	.+2      	; 0xd14 <ArpCheck+0x268>
     d12:	56 c0       	rjmp	.+172    	; 0xdc0 <ArpCheck+0x314>
     d14:	80 91 13 11 	lds	r24, 0x1113
     d18:	84 30       	cpi	r24, 0x04	; 4
     d1a:	09 f0       	breq	.+2      	; 0xd1e <ArpCheck+0x272>
     d1c:	51 c0       	rjmp	.+162    	; 0xdc0 <ArpCheck+0x314>
     d1e:	80 91 14 11 	lds	r24, 0x1114
     d22:	88 23       	and	r24, r24
     d24:	09 f0       	breq	.+2      	; 0xd28 <ArpCheck+0x27c>
     d26:	4c c0       	rjmp	.+152    	; 0xdc0 <ArpCheck+0x314>
     d28:	80 91 15 11 	lds	r24, 0x1115
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	09 f0       	breq	.+2      	; 0xd32 <ArpCheck+0x286>
     d30:	47 c0       	rjmp	.+142    	; 0xdc0 <ArpCheck+0x314>
     d32:	90 91 26 11 	lds	r25, 0x1126
     d36:	80 91 65 01 	lds	r24, 0x0165
     d3a:	98 17       	cp	r25, r24
     d3c:	09 f0       	breq	.+2      	; 0xd40 <ArpCheck+0x294>
     d3e:	40 c0       	rjmp	.+128    	; 0xdc0 <ArpCheck+0x314>
     d40:	90 91 27 11 	lds	r25, 0x1127
     d44:	80 91 66 01 	lds	r24, 0x0166
     d48:	98 17       	cp	r25, r24
     d4a:	d1 f5       	brne	.+116    	; 0xdc0 <ArpCheck+0x314>
     d4c:	90 91 28 11 	lds	r25, 0x1128
     d50:	80 91 67 01 	lds	r24, 0x0167
     d54:	98 17       	cp	r25, r24
     d56:	a1 f5       	brne	.+104    	; 0xdc0 <ArpCheck+0x314>
     d58:	90 91 29 11 	lds	r25, 0x1129
     d5c:	80 91 68 01 	lds	r24, 0x0168
     d60:	98 17       	cp	r25, r24
     d62:	71 f5       	brne	.+92     	; 0xdc0 <ArpCheck+0x314>
		&& EthFrame[ArpHardLen]==0x06 && EthFrame[ArpLogicLen]==0x04 
		&& EthFrame[ArpOpType0]==0x00 && EthFrame[ArpOpType1]==0x02
		&& EthFrame[ArpDestIp1]==ServIp[0] && EthFrame[ArpDestIp2]==ServIp[1]
		&& EthFrame[ArpDestIp3]==ServIp[2] && EthFrame[ArpDestIp4]==ServIp[3])
	{
		ArpReplyMac[0]=EthFrame[EthSourceMac+0];
     d64:	4e e7       	ldi	r20, 0x7E	; 126
     d66:	51 e0       	ldi	r21, 0x01	; 1
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	91 e1       	ldi	r25, 0x11	; 17
     d6c:	dc 01       	movw	r26, r24
     d6e:	2d 91       	ld	r18, X+
     d70:	fa 01       	movw	r30, r20
     d72:	21 93       	st	Z+, r18
		ArpReplyMac[1]=EthFrame[EthSourceMac+1];
     d74:	2c 91       	ld	r18, X
     d76:	20 83       	st	Z, r18
		ArpReplyMac[2]=EthFrame[EthSourceMac+2];
     d78:	fc 01       	movw	r30, r24
     d7a:	22 81       	ldd	r18, Z+2	; 0x02
     d7c:	ea 01       	movw	r28, r20
     d7e:	2a 83       	std	Y+2, r18	; 0x02
		ArpReplyMac[3]=EthFrame[EthSourceMac+3];
     d80:	23 81       	ldd	r18, Z+3	; 0x03
     d82:	2b 83       	std	Y+3, r18	; 0x03
		ArpReplyMac[4]=EthFrame[EthSourceMac+4];
     d84:	24 81       	ldd	r18, Z+4	; 0x04
     d86:	2c 83       	std	Y+4, r18	; 0x04
		ArpReplyMac[5]=EthFrame[EthSourceMac+5];
     d88:	25 81       	ldd	r18, Z+5	; 0x05
     d8a:	2d 83       	std	Y+5, r18	; 0x05
		
		ArpReplyIp[0]=EthFrame[ArpSourceIp1];
     d8c:	a3 e9       	ldi	r26, 0x93	; 147
     d8e:	b1 e0       	ldi	r27, 0x01	; 1
     d90:	26 89       	ldd	r18, Z+22	; 0x16
     d92:	fd 01       	movw	r30, r26
     d94:	21 93       	st	Z+, r18
		ArpReplyIp[1]=EthFrame[ArpSourceIp2];
     d96:	ec 01       	movw	r28, r24
     d98:	2f 89       	ldd	r18, Y+23	; 0x17
     d9a:	20 83       	st	Z, r18
		ArpReplyIp[2]=EthFrame[ArpSourceIp3];
     d9c:	28 8d       	ldd	r18, Y+24	; 0x18
     d9e:	12 96       	adiw	r26, 0x02	; 2
     da0:	2c 93       	st	X, r18
     da2:	12 97       	sbiw	r26, 0x02	; 2
		ArpReplyIp[3]=EthFrame[ArpSourceIp4];
     da4:	89 8d       	ldd	r24, Y+25	; 0x19
     da6:	13 96       	adiw	r26, 0x03	; 3
     da8:	8c 93       	st	X, r24
		
		ArpReply=1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 84 01 	sts	0x0184, r24
		ArpCount=60;
     db0:	8c e3       	ldi	r24, 0x3C	; 60
     db2:	80 93 78 01 	sts	0x0178, r24
		pingTimeout=100;
     db6:	84 e6       	ldi	r24, 0x64	; 100
     db8:	80 93 8e 01 	sts	0x018E, r24
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <ArpCheck+0x316>
     dc0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 1; //Niepoprawny ARP
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	ff 90       	pop	r15
     dcc:	ef 90       	pop	r14
     dce:	df 90       	pop	r13
     dd0:	cf 90       	pop	r12
     dd2:	bf 90       	pop	r11
     dd4:	af 90       	pop	r10
     dd6:	9f 90       	pop	r9
     dd8:	8f 90       	pop	r8
     dda:	7f 90       	pop	r7
     ddc:	6f 90       	pop	r6
     dde:	5f 90       	pop	r5
     de0:	08 95       	ret

00000de2 <MakeArpRequest>:
#include "protocols/arp.h"
#include "RTL8019as.h"

//Funkcja tworz¹ca zapytanie ARP
void MakeArpRequest(uint8_t destrIp1, uint8_t destrIp2, uint8_t destrIp3, uint8_t destrIp4)
{
     de2:	af 92       	push	r10
     de4:	bf 92       	push	r11
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	18 2f       	mov	r17, r24
     df4:	f6 2e       	mov	r15, r22
     df6:	d4 2e       	mov	r13, r20
     df8:	b2 2e       	mov	r11, r18
	MakeEthHeader(0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x08, 0x06);
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	6f ef       	ldi	r22, 0xFF	; 255
     dfe:	4f ef       	ldi	r20, 0xFF	; 255
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	0f ef       	ldi	r16, 0xFF	; 255
     e04:	ee 24       	eor	r14, r14
     e06:	ea 94       	dec	r14
     e08:	cc 24       	eor	r12, r12
     e0a:	68 94       	set
     e0c:	c3 f8       	bld	r12, 3
     e0e:	0f 2e       	mov	r0, r31
     e10:	f6 e0       	ldi	r31, 0x06	; 6
     e12:	af 2e       	mov	r10, r31
     e14:	f0 2d       	mov	r31, r0
     e16:	0e 94 03 05 	call	0xa06	; 0xa06 <MakeEthHeader>
	
	EthFrame[ArpMediumType0]=0x00;
     e1a:	ae e0       	ldi	r26, 0x0E	; 14
     e1c:	b1 e1       	ldi	r27, 0x11	; 17
     e1e:	fd 01       	movw	r30, r26
     e20:	11 92       	st	Z+, r1
	EthFrame[ArpMediumType1]=0x01;
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	90 83       	st	Z, r25
	
	EthFrame[ArpProtocolType0]=0x08;
     e26:	88 e0       	ldi	r24, 0x08	; 8
     e28:	12 96       	adiw	r26, 0x02	; 2
     e2a:	8c 93       	st	X, r24
     e2c:	12 97       	sbiw	r26, 0x02	; 2
	EthFrame[ArpProtocolType1]=0x00;
     e2e:	13 96       	adiw	r26, 0x03	; 3
     e30:	1c 92       	st	X, r1
     e32:	13 97       	sbiw	r26, 0x03	; 3
	
	EthFrame[ArpHardLen]=0x06;
     e34:	86 e0       	ldi	r24, 0x06	; 6
     e36:	14 96       	adiw	r26, 0x04	; 4
     e38:	8c 93       	st	X, r24
     e3a:	14 97       	sbiw	r26, 0x04	; 4
	
	EthFrame[ArpLogicLen]=0x04;
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	15 96       	adiw	r26, 0x05	; 5
     e40:	8c 93       	st	X, r24
     e42:	15 97       	sbiw	r26, 0x05	; 5
	
	EthFrame[ArpOpType0]=0x00;
     e44:	16 96       	adiw	r26, 0x06	; 6
     e46:	1c 92       	st	X, r1
     e48:	16 97       	sbiw	r26, 0x06	; 6
	EthFrame[ArpOpType1]=0x01;
     e4a:	17 96       	adiw	r26, 0x07	; 7
     e4c:	9c 93       	st	X, r25
     e4e:	17 97       	sbiw	r26, 0x07	; 7
	
	EthFrame[ArpSourceMac0]=MyMac[0];
     e50:	8f e5       	ldi	r24, 0x5F	; 95
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	fc 01       	movw	r30, r24
     e56:	21 91       	ld	r18, Z+
     e58:	18 96       	adiw	r26, 0x08	; 8
     e5a:	2c 93       	st	X, r18
     e5c:	18 97       	sbiw	r26, 0x08	; 8
	EthFrame[ArpSourceMac1]=MyMac[1];
     e5e:	20 81       	ld	r18, Z
     e60:	19 96       	adiw	r26, 0x09	; 9
     e62:	2c 93       	st	X, r18
     e64:	19 97       	sbiw	r26, 0x09	; 9
	EthFrame[ArpSourceMac2]=MyMac[2];
     e66:	fc 01       	movw	r30, r24
     e68:	22 81       	ldd	r18, Z+2	; 0x02
     e6a:	1a 96       	adiw	r26, 0x0a	; 10
     e6c:	2c 93       	st	X, r18
     e6e:	1a 97       	sbiw	r26, 0x0a	; 10
	EthFrame[ArpSourceMac3]=MyMac[3];
     e70:	23 81       	ldd	r18, Z+3	; 0x03
     e72:	1b 96       	adiw	r26, 0x0b	; 11
     e74:	2c 93       	st	X, r18
     e76:	1b 97       	sbiw	r26, 0x0b	; 11
	EthFrame[ArpSourceMac4]=MyMac[4];
     e78:	24 81       	ldd	r18, Z+4	; 0x04
     e7a:	1c 96       	adiw	r26, 0x0c	; 12
     e7c:	2c 93       	st	X, r18
     e7e:	1c 97       	sbiw	r26, 0x0c	; 12
	EthFrame[ArpSourceMac5]=MyMac[5];
     e80:	85 81       	ldd	r24, Z+5	; 0x05
     e82:	1d 96       	adiw	r26, 0x0d	; 13
     e84:	8c 93       	st	X, r24
     e86:	1d 97       	sbiw	r26, 0x0d	; 13
	
	EthFrame[ArpSourceIp1]=ServIp[0];
     e88:	85 e6       	ldi	r24, 0x65	; 101
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	fc 01       	movw	r30, r24
     e8e:	21 91       	ld	r18, Z+
     e90:	1e 96       	adiw	r26, 0x0e	; 14
     e92:	2c 93       	st	X, r18
     e94:	1e 97       	sbiw	r26, 0x0e	; 14
	EthFrame[ArpSourceIp2]=ServIp[1];
     e96:	20 81       	ld	r18, Z
     e98:	1f 96       	adiw	r26, 0x0f	; 15
     e9a:	2c 93       	st	X, r18
     e9c:	1f 97       	sbiw	r26, 0x0f	; 15
	EthFrame[ArpSourceIp3]=ServIp[2];
     e9e:	fc 01       	movw	r30, r24
     ea0:	22 81       	ldd	r18, Z+2	; 0x02
     ea2:	50 96       	adiw	r26, 0x10	; 16
     ea4:	2c 93       	st	X, r18
     ea6:	50 97       	sbiw	r26, 0x10	; 16
	EthFrame[ArpSourceIp4]=ServIp[3];
     ea8:	83 81       	ldd	r24, Z+3	; 0x03
     eaa:	51 96       	adiw	r26, 0x11	; 17
     eac:	8c 93       	st	X, r24
     eae:	51 97       	sbiw	r26, 0x11	; 17
	
	EthFrame[ArpDestMac0]=0x00;
     eb0:	52 96       	adiw	r26, 0x12	; 18
     eb2:	1c 92       	st	X, r1
     eb4:	52 97       	sbiw	r26, 0x12	; 18
	EthFrame[ArpDestMac1]=0x00;
     eb6:	53 96       	adiw	r26, 0x13	; 19
     eb8:	1c 92       	st	X, r1
     eba:	53 97       	sbiw	r26, 0x13	; 19
	EthFrame[ArpDestMac2]=0x00;
     ebc:	54 96       	adiw	r26, 0x14	; 20
     ebe:	1c 92       	st	X, r1
     ec0:	54 97       	sbiw	r26, 0x14	; 20
	EthFrame[ArpDestMac3]=0x00;
     ec2:	55 96       	adiw	r26, 0x15	; 21
     ec4:	1c 92       	st	X, r1
     ec6:	55 97       	sbiw	r26, 0x15	; 21
	EthFrame[ArpDestMac4]=0x00;
     ec8:	56 96       	adiw	r26, 0x16	; 22
     eca:	1c 92       	st	X, r1
     ecc:	56 97       	sbiw	r26, 0x16	; 22
	EthFrame[ArpDestMac5]=0x00;
     ece:	57 96       	adiw	r26, 0x17	; 23
     ed0:	1c 92       	st	X, r1
     ed2:	57 97       	sbiw	r26, 0x17	; 23
	
	EthFrame[ArpDestIp1]=destrIp1;
     ed4:	58 96       	adiw	r26, 0x18	; 24
     ed6:	1c 93       	st	X, r17
     ed8:	58 97       	sbiw	r26, 0x18	; 24
	EthFrame[ArpDestIp2]=destrIp2;
     eda:	59 96       	adiw	r26, 0x19	; 25
     edc:	fc 92       	st	X, r15
     ede:	59 97       	sbiw	r26, 0x19	; 25
	EthFrame[ArpDestIp3]=destrIp3;
     ee0:	5a 96       	adiw	r26, 0x1a	; 26
     ee2:	dc 92       	st	X, r13
     ee4:	5a 97       	sbiw	r26, 0x1a	; 26
	EthFrame[ArpDestIp4]=destrIp4;
     ee6:	5b 96       	adiw	r26, 0x1b	; 27
     ee8:	bc 92       	st	X, r11
	
	PacketSize=PacketSize+28;
     eea:	80 91 91 01 	lds	r24, 0x0191
     eee:	90 91 92 01 	lds	r25, 0x0192
     ef2:	4c 96       	adiw	r24, 0x1c	; 28
     ef4:	90 93 92 01 	sts	0x0192, r25
     ef8:	80 93 91 01 	sts	0x0191, r24

}//Koniec funkcji tworz¹cej zapytanie ARP
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	08 95       	ret

00000f0e <IpCheck>:
#include "RTL8019as.h"

//Funkcja sprawdzaj¹ca datagram IP (ICMP czy TCP)
uint8_t IpCheck(void)
{
	if(EthFrame[IpProtocol]==0x01) return 3; 	//Je¿eli ICMP
     f0e:	80 91 17 11 	lds	r24, 0x1117
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	11 f4       	brne	.+4      	; 0xf1a <IpCheck+0xc>
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	08 95       	ret
	if(EthFrame[IpProtocol]==0x06) return 4; 	//Je¿eli TCP
     f1a:	86 30       	cpi	r24, 0x06	; 6
     f1c:	11 f0       	breq	.+4      	; 0xf22 <IpCheck+0x14>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	08 95       	ret
     f22:	84 e0       	ldi	r24, 0x04	; 4
	
	return 0;
}//koniec funkcji sprawdzaj¹cej 
     f24:	08 95       	ret

00000f26 <IpCheckSumCalc>:

//Funkcja obliczj¹ca sumê kontroln¹
uint16_t IpCheckSumCalc(void)
{
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
	EthFrame[IpChecksum0]=0x00;
     f2e:	88 e1       	ldi	r24, 0x18	; 24
     f30:	91 e1       	ldi	r25, 0x11	; 17
     f32:	fc 01       	movw	r30, r24
     f34:	11 92       	st	Z+, r1
	EthFrame[IpChecksum1]=0x00;
     f36:	10 82       	st	Z, r1
     f38:	fc 01       	movw	r30, r24
     f3a:	3a 97       	sbiw	r30, 0x0a	; 10
     f3c:	ee 24       	eor	r14, r14
     f3e:	ff 24       	eor	r15, r15
     f40:	87 01       	movw	r16, r14
	
	unsigned int a;
	unsigned int i;
	unsigned long sum=0;
	
	for(i=0; i<20; i=i+2)
     f42:	42 e2       	ldi	r20, 0x22	; 34
     f44:	51 e1       	ldi	r21, 0x11	; 17
	{
		a=((EthFrame[EthData+i]<<8)&0xFF00)+(EthFrame[EthData+i+1]&0xFF);
		sum=sum+(unsigned long)a;
     f46:	30 81       	ld	r19, Z
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	81 81       	ldd	r24, Z+1	; 0x01
     f4c:	b9 01       	movw	r22, r18
     f4e:	68 0f       	add	r22, r24
     f50:	71 1d       	adc	r23, r1
     f52:	cb 01       	movw	r24, r22
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e8 0e       	add	r14, r24
     f5a:	f9 1e       	adc	r15, r25
     f5c:	0a 1f       	adc	r16, r26
     f5e:	1b 1f       	adc	r17, r27
     f60:	32 96       	adiw	r30, 0x02	; 2
	
	unsigned int a;
	unsigned int i;
	unsigned long sum=0;
	
	for(i=0; i<20; i=i+2)
     f62:	e4 17       	cp	r30, r20
     f64:	f5 07       	cpc	r31, r21
     f66:	79 f7       	brne	.-34     	; 0xf46 <IpCheckSumCalc+0x20>
	{
		a=((EthFrame[EthData+i]<<8)&0xFF00)+(EthFrame[EthData+i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	while(sum>>16)
     f68:	98 01       	movw	r18, r16
     f6a:	44 27       	eor	r20, r20
     f6c:	55 27       	eor	r21, r21
     f6e:	21 15       	cp	r18, r1
     f70:	31 05       	cpc	r19, r1
     f72:	41 05       	cpc	r20, r1
     f74:	51 05       	cpc	r21, r1
     f76:	91 f0       	breq	.+36     	; 0xf9c <IpCheckSumCalc+0x76>
	{
		sum=(sum&0xFFFF)+(sum>>16);
     f78:	d8 01       	movw	r26, r16
     f7a:	c7 01       	movw	r24, r14
     f7c:	a0 70       	andi	r26, 0x00	; 0
     f7e:	b0 70       	andi	r27, 0x00	; 0
     f80:	7c 01       	movw	r14, r24
     f82:	8d 01       	movw	r16, r26
     f84:	e2 0e       	add	r14, r18
     f86:	f3 1e       	adc	r15, r19
     f88:	04 1f       	adc	r16, r20
     f8a:	15 1f       	adc	r17, r21
	{
		a=((EthFrame[EthData+i]<<8)&0xFF00)+(EthFrame[EthData+i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	while(sum>>16)
     f8c:	98 01       	movw	r18, r16
     f8e:	44 27       	eor	r20, r20
     f90:	55 27       	eor	r21, r21
     f92:	21 15       	cp	r18, r1
     f94:	31 05       	cpc	r19, r1
     f96:	41 05       	cpc	r20, r1
     f98:	51 05       	cpc	r21, r1
     f9a:	71 f7       	brne	.-36     	; 0xf78 <IpCheckSumCalc+0x52>
     f9c:	a8 01       	movw	r20, r16
     f9e:	97 01       	movw	r18, r14
     fa0:	20 95       	com	r18
     fa2:	30 95       	com	r19
     fa4:	40 95       	com	r20
     fa6:	50 95       	com	r21
	
	sum=~sum;
	
	return ((unsigned int)sum);

}//Koniec funkcji obliczaj¹cej sumê kontroln¹ nag³ówka ramki IP
     fa8:	82 2f       	mov	r24, r18
     faa:	93 2f       	mov	r25, r19
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	08 95       	ret

00000fb6 <MakeIpHeader>:

//Funkcja tworz¹ca nag³ówek datagramu IP
void MakeIpHeader(uint8_t protocol, uint16_t data_lenght) //data_lenght d³ugoœæ danych, liczona w bajtach 
{
     fb6:	8f 92       	push	r8
     fb8:	9f 92       	push	r9
     fba:	af 92       	push	r10
     fbc:	cf 92       	push	r12
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	f8 2e       	mov	r15, r24
     fcc:	4b 01       	movw	r8, r22
	MakeEthHeader(ArpReplyMac[0], ArpReplyMac[1], ArpReplyMac[2], ArpReplyMac[3], ArpReplyMac[4], ArpReplyMac[5], 0x08, 0x00);
     fce:	ee e7       	ldi	r30, 0x7E	; 126
     fd0:	f1 e0       	ldi	r31, 0x01	; 1
     fd2:	80 81       	ld	r24, Z
     fd4:	61 81       	ldd	r22, Z+1	; 0x01
     fd6:	42 81       	ldd	r20, Z+2	; 0x02
     fd8:	23 81       	ldd	r18, Z+3	; 0x03
     fda:	04 81       	ldd	r16, Z+4	; 0x04
     fdc:	e5 80       	ldd	r14, Z+5	; 0x05
     fde:	cc 24       	eor	r12, r12
     fe0:	68 94       	set
     fe2:	c3 f8       	bld	r12, 3
     fe4:	aa 24       	eor	r10, r10
     fe6:	0e 94 03 05 	call	0xa06	; 0xa06 <MakeEthHeader>
	
	EthFrame[IpVIHL] = 0x45;
     fea:	0e e0       	ldi	r16, 0x0E	; 14
     fec:	11 e1       	ldi	r17, 0x11	; 17
     fee:	f8 01       	movw	r30, r16
     ff0:	85 e4       	ldi	r24, 0x45	; 69
     ff2:	81 93       	st	Z+, r24
	EthFrame[IpTypeofService] = 0x00;
     ff4:	10 82       	st	Z, r1
	EthFrame[IpTotalLength0] = (uint8_t)(8>>(data_lenght+20));
     ff6:	94 01       	movw	r18, r8
     ff8:	2c 5e       	subi	r18, 0xEC	; 236
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	88 e0       	ldi	r24, 0x08	; 8
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <MakeIpHeader+0x50>
    1002:	95 95       	asr	r25
    1004:	87 95       	ror	r24
    1006:	2a 95       	dec	r18
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <MakeIpHeader+0x4c>
    100a:	e8 01       	movw	r28, r16
    100c:	8a 83       	std	Y+2, r24	; 0x02
	EthFrame[IpTotalLength1] = (uint8_t)(data_lenght+20);
    100e:	e4 e1       	ldi	r30, 0x14	; 20
    1010:	8e 0e       	add	r8, r30
    1012:	8b 82       	std	Y+3, r8	; 0x03
	EthFrame[IpIdenti0] = 0xaa;
    1014:	8a ea       	ldi	r24, 0xAA	; 170
    1016:	8c 83       	std	Y+4, r24	; 0x04
	EthFrame[IpIdenti1] = 0x00;
    1018:	1d 82       	std	Y+5, r1	; 0x05
	EthFrame[IpFlaTotalOff0] = 0x40;
    101a:	80 e4       	ldi	r24, 0x40	; 64
    101c:	8e 83       	std	Y+6, r24	; 0x06
	EthFrame[IpFlaTotalOff1] = 0x00;
    101e:	1f 82       	std	Y+7, r1	; 0x07
	EthFrame[IpTimeToLive] = 0x40;
    1020:	88 87       	std	Y+8, r24	; 0x08
	EthFrame[IpProtocol] = protocol;
    1022:	f9 86       	std	Y+9, r15	; 0x09
	
	EthFrame[IpSourceIp1] = ServIp[0];
    1024:	a5 e6       	ldi	r26, 0x65	; 101
    1026:	b1 e0       	ldi	r27, 0x01	; 1
    1028:	fd 01       	movw	r30, r26
    102a:	81 91       	ld	r24, Z+
    102c:	8c 87       	std	Y+12, r24	; 0x0c
	EthFrame[IpSourceIp2] = ServIp[1];
    102e:	80 81       	ld	r24, Z
    1030:	8d 87       	std	Y+13, r24	; 0x0d
	EthFrame[IpSourceIp3] = ServIp[2];
    1032:	12 96       	adiw	r26, 0x02	; 2
    1034:	8c 91       	ld	r24, X
    1036:	12 97       	sbiw	r26, 0x02	; 2
    1038:	8e 87       	std	Y+14, r24	; 0x0e
	EthFrame[IpSourceIp4] = ServIp[3];
    103a:	13 96       	adiw	r26, 0x03	; 3
    103c:	8c 91       	ld	r24, X
    103e:	8f 87       	std	Y+15, r24	; 0x0f
	
	EthFrame[IpDestIp1] = ArpReplyIp[0];
    1040:	a3 e9       	ldi	r26, 0x93	; 147
    1042:	b1 e0       	ldi	r27, 0x01	; 1
    1044:	fd 01       	movw	r30, r26
    1046:	81 91       	ld	r24, Z+
    1048:	88 8b       	std	Y+16, r24	; 0x10
	EthFrame[IpDestIp2] = ArpReplyIp[1];
    104a:	80 81       	ld	r24, Z
    104c:	89 8b       	std	Y+17, r24	; 0x11
	EthFrame[IpDestIp3] = ArpReplyIp[2];
    104e:	12 96       	adiw	r26, 0x02	; 2
    1050:	8c 91       	ld	r24, X
    1052:	12 97       	sbiw	r26, 0x02	; 2
    1054:	8a 8b       	std	Y+18, r24	; 0x12
	EthFrame[IpDestIp4] = ArpReplyIp[3];
    1056:	13 96       	adiw	r26, 0x03	; 3
    1058:	8c 91       	ld	r24, X
    105a:	8b 8b       	std	Y+19, r24	; 0x13
	
	uint16_t CheckSum = IpCheckSumCalc();
    105c:	0e 94 93 07 	call	0xf26	; 0xf26 <IpCheckSumCalc>
	EthFrame[IpChecksum0] = (uint8_t)((CheckSum)>>8);
    1060:	9a 87       	std	Y+10, r25	; 0x0a
	EthFrame[IpChecksum1] = (uint8_t)(CheckSum);
    1062:	8b 87       	std	Y+11, r24	; 0x0b
	
	//PacketSize += 20;

}//Koniec funkcju tworz¹cej nag³owek IP
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	cf 90       	pop	r12
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	08 95       	ret

0000107a <EchoReply>:
#include "RTL8019as.h"

//Funkcja odpowiadaj¹ca na ¿¹danie echa 
void EchoReply(void)
{
	if(EthFrame[ImcpType]==0x08 && EthFrame[ImcpCode]==0x00) {
    107a:	80 91 22 11 	lds	r24, 0x1122
    107e:	88 30       	cpi	r24, 0x08	; 8
    1080:	81 f5       	brne	.+96     	; 0x10e2 <EchoReply+0x68>
    1082:	80 91 23 11 	lds	r24, 0x1123
    1086:	88 23       	and	r24, r24
    1088:	61 f5       	brne	.+88     	; 0x10e2 <EchoReply+0x68>
		
		MakeIpHeader(0x01,0x12);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	62 e1       	ldi	r22, 0x12	; 18
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
		uint16_t CheckSum = (8<<EthFrame[Imcpsum0]);
    1094:	e4 e2       	ldi	r30, 0x24	; 36
    1096:	f1 e1       	ldi	r31, 0x11	; 17
    1098:	88 e0       	ldi	r24, 0x08	; 8
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	01 90       	ld	r0, Z+
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <EchoReply+0x2a>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <EchoReply+0x26>
		CheckSum+=EthFrame[Imcpsum1];
    10a8:	20 81       	ld	r18, Z
    10aa:	ac 01       	movw	r20, r24
    10ac:	42 0f       	add	r20, r18
    10ae:	51 1d       	adc	r21, r1
		
		EthFrame[ImcpCode]=0x01;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 23 11 	sts	0x1123, r24
		
		if(CheckSum > 0x7FFF) {
    10b6:	55 23       	and	r21, r21
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <EchoReply+0x4a>
			CheckSum = (uint16_t)((CheckSum+0x8000)|0x01);
    10ba:	ca 01       	movw	r24, r20
    10bc:	80 50       	subi	r24, 0x00	; 0
    10be:	90 48       	sbci	r25, 0x80	; 128
    10c0:	81 60       	ori	r24, 0x01	; 1
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <EchoReply+0x50>
		} else {
			CheckSum = CheckSum+0x8000;
    10c4:	ca 01       	movw	r24, r20
    10c6:	80 50       	subi	r24, 0x00	; 0
    10c8:	90 48       	sbci	r25, 0x80	; 128
		}
		
		EthFrame[Imcpsum0]=(uint8_t)((CheckSum)>>8);
    10ca:	e4 e2       	ldi	r30, 0x24	; 36
    10cc:	f1 e1       	ldi	r31, 0x11	; 17
    10ce:	91 93       	st	Z+, r25
		EthFrame[Imcpsum1]=(uint8_t)(CheckSum);
    10d0:	80 83       	st	Z, r24
		
		PacketSize = 14+20+12;
    10d2:	8e e2       	ldi	r24, 0x2E	; 46
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	90 93 92 01 	sts	0x0192, r25
    10da:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
    10de:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
    10e2:	08 95       	ret

000010e4 <TcpCheckSumCalc>:
#include "protocols/arp.h"


//Funkcja obliczj¹ca sumê kontroln¹
uint16_t TcpCheckSumCalc(uint16_t dane)
{
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	2c 97       	sbiw	r28, 0x0c	; 12
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
		
	EthFrame[TcpCheckSum0]=0x00;
    1100:	e2 e3       	ldi	r30, 0x32	; 50
    1102:	f1 e1       	ldi	r31, 0x11	; 17
    1104:	11 92       	st	Z+, r1
	EthFrame[TcpCheckSum1]=0x00;
    1106:	10 82       	st	Z, r1
	
	//Sumowanie pseudo-nag³ówka Ip
	uint8_t Data[12];
	
	Data[0] = ServIp[0];
    1108:	a5 e6       	ldi	r26, 0x65	; 101
    110a:	b1 e0       	ldi	r27, 0x01	; 1
    110c:	fd 01       	movw	r30, r26
    110e:	21 91       	ld	r18, Z+
    1110:	29 83       	std	Y+1, r18	; 0x01
	Data[1] = ServIp[1];
    1112:	20 81       	ld	r18, Z
    1114:	2a 83       	std	Y+2, r18	; 0x02
	Data[2] = ServIp[2];
    1116:	12 96       	adiw	r26, 0x02	; 2
    1118:	2c 91       	ld	r18, X
    111a:	12 97       	sbiw	r26, 0x02	; 2
    111c:	2b 83       	std	Y+3, r18	; 0x03
	Data[3] = ServIp[3];
    111e:	13 96       	adiw	r26, 0x03	; 3
    1120:	2c 91       	ld	r18, X
    1122:	2c 83       	std	Y+4, r18	; 0x04
	
	Data[4] = ArpReplyIp[0];
    1124:	a3 e9       	ldi	r26, 0x93	; 147
    1126:	b1 e0       	ldi	r27, 0x01	; 1
    1128:	fd 01       	movw	r30, r26
    112a:	21 91       	ld	r18, Z+
    112c:	2d 83       	std	Y+5, r18	; 0x05
	Data[5] = ArpReplyIp[1];
    112e:	20 81       	ld	r18, Z
    1130:	2e 83       	std	Y+6, r18	; 0x06
	Data[6] = ArpReplyIp[2];
    1132:	12 96       	adiw	r26, 0x02	; 2
    1134:	2c 91       	ld	r18, X
    1136:	12 97       	sbiw	r26, 0x02	; 2
    1138:	2f 83       	std	Y+7, r18	; 0x07
	Data[7] = ArpReplyIp[3];
    113a:	13 96       	adiw	r26, 0x03	; 3
    113c:	2c 91       	ld	r18, X
    113e:	28 87       	std	Y+8, r18	; 0x08
	
	Data[8] = 0x00;
    1140:	19 86       	std	Y+9, r1	; 0x09
	Data[9] = 0x06;
    1142:	26 e0       	ldi	r18, 0x06	; 6
    1144:	2a 87       	std	Y+10, r18	; 0x0a
	
	Data[10] = (uint8_t)((20+dane)>>8);
    1146:	9c 01       	movw	r18, r24
    1148:	2c 5e       	subi	r18, 0xEC	; 236
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	3b 87       	std	Y+11, r19	; 0x0b
	Data[11] = (uint8_t)(20+dane);
    114e:	8c 5e       	subi	r24, 0xEC	; 236
    1150:	8c 87       	std	Y+12, r24	; 0x0c
    1152:	fe 01       	movw	r30, r28
    1154:	31 96       	adiw	r30, 0x01	; 1
    1156:	ee 24       	eor	r14, r14
    1158:	ff 24       	eor	r15, r15
    115a:	87 01       	movw	r16, r14
	
	unsigned int a;
	unsigned int i;
	unsigned long sum=0;
	
	for(i=0; i<12; i=i+2)
    115c:	ae 01       	movw	r20, r28
    115e:	43 5f       	subi	r20, 0xF3	; 243
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		a=((Data[i]<<8)&0xFF00)+(Data[i+1]&0xFF);
		sum=sum+(unsigned long)a;
    1162:	30 81       	ld	r19, Z
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	81 81       	ldd	r24, Z+1	; 0x01
    1168:	b9 01       	movw	r22, r18
    116a:	68 0f       	add	r22, r24
    116c:	71 1d       	adc	r23, r1
    116e:	cb 01       	movw	r24, r22
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e8 0e       	add	r14, r24
    1176:	f9 1e       	adc	r15, r25
    1178:	0a 1f       	adc	r16, r26
    117a:	1b 1f       	adc	r17, r27
    117c:	32 96       	adiw	r30, 0x02	; 2
	
	unsigned int a;
	unsigned int i;
	unsigned long sum=0;
	
	for(i=0; i<12; i=i+2)
    117e:	e4 17       	cp	r30, r20
    1180:	f5 07       	cpc	r31, r21
    1182:	79 f7       	brne	.-34     	; 0x1162 <TcpCheckSumCalc+0x7e>
    1184:	e2 e2       	ldi	r30, 0x22	; 34
    1186:	f1 e1       	ldi	r31, 0x11	; 17
	{
		a=((Data[i]<<8)&0xFF00)+(Data[i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	for(i=0; i<20; i=i+2)
    1188:	26 e3       	ldi	r18, 0x36	; 54
    118a:	31 e1       	ldi	r19, 0x11	; 17
	{
		a=((EthFrame[EthData+20+i]<<8)&0xFF00)+(EthFrame[EthData+20+i+1]&0xFF);
		sum=sum+(unsigned long)a;
    118c:	70 81       	ld	r23, Z
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	ab 01       	movw	r20, r22
    1194:	48 0f       	add	r20, r24
    1196:	51 1d       	adc	r21, r1
    1198:	ca 01       	movw	r24, r20
    119a:	a0 e0       	ldi	r26, 0x00	; 0
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e8 0e       	add	r14, r24
    11a0:	f9 1e       	adc	r15, r25
    11a2:	0a 1f       	adc	r16, r26
    11a4:	1b 1f       	adc	r17, r27
    11a6:	32 96       	adiw	r30, 0x02	; 2
	{
		a=((Data[i]<<8)&0xFF00)+(Data[i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	for(i=0; i<20; i=i+2)
    11a8:	e2 17       	cp	r30, r18
    11aa:	f3 07       	cpc	r31, r19
    11ac:	79 f7       	brne	.-34     	; 0x118c <TcpCheckSumCalc+0xa8>
	{
		a=((EthFrame[EthData+20+i]<<8)&0xFF00)+(EthFrame[EthData+20+i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	while(sum>>16)
    11ae:	98 01       	movw	r18, r16
    11b0:	44 27       	eor	r20, r20
    11b2:	55 27       	eor	r21, r21
    11b4:	21 15       	cp	r18, r1
    11b6:	31 05       	cpc	r19, r1
    11b8:	41 05       	cpc	r20, r1
    11ba:	51 05       	cpc	r21, r1
    11bc:	91 f0       	breq	.+36     	; 0x11e2 <TcpCheckSumCalc+0xfe>
	{
		sum=(sum&0xFFFF)+(sum>>16);
    11be:	d8 01       	movw	r26, r16
    11c0:	c7 01       	movw	r24, r14
    11c2:	a0 70       	andi	r26, 0x00	; 0
    11c4:	b0 70       	andi	r27, 0x00	; 0
    11c6:	7c 01       	movw	r14, r24
    11c8:	8d 01       	movw	r16, r26
    11ca:	e2 0e       	add	r14, r18
    11cc:	f3 1e       	adc	r15, r19
    11ce:	04 1f       	adc	r16, r20
    11d0:	15 1f       	adc	r17, r21
	{
		a=((EthFrame[EthData+20+i]<<8)&0xFF00)+(EthFrame[EthData+20+i+1]&0xFF);
		sum=sum+(unsigned long)a;
	}
	
	while(sum>>16)
    11d2:	98 01       	movw	r18, r16
    11d4:	44 27       	eor	r20, r20
    11d6:	55 27       	eor	r21, r21
    11d8:	21 15       	cp	r18, r1
    11da:	31 05       	cpc	r19, r1
    11dc:	41 05       	cpc	r20, r1
    11de:	51 05       	cpc	r21, r1
    11e0:	71 f7       	brne	.-36     	; 0x11be <TcpCheckSumCalc+0xda>
    11e2:	a8 01       	movw	r20, r16
    11e4:	97 01       	movw	r18, r14
    11e6:	20 95       	com	r18
    11e8:	30 95       	com	r19
    11ea:	40 95       	com	r20
    11ec:	50 95       	com	r21
	}
	
	sum=~sum;
	return ((unsigned int)sum);
	
}//Koniec funkcji obliczaj¹cej sumê kontroln¹
    11ee:	82 2f       	mov	r24, r18
    11f0:	93 2f       	mov	r25, r19
    11f2:	2c 96       	adiw	r28, 0x0c	; 12
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	08 95       	ret

0000120c <Tcp_Receive>:
	}
	}
}

//Funkcja sprawdzaj¹ca czy s¹ nowe dane TCP z konkretnego portu
uint8_t Tcp_Receive(uint16_t port) {
    120c:	28 2f       	mov	r18, r24

	if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    120e:	80 91 24 11 	lds	r24, 0x1124
    1212:	89 17       	cp	r24, r25
    1214:	51 f4       	brne	.+20     	; 0x122a <Tcp_Receive+0x1e>
    1216:	80 91 25 11 	lds	r24, 0x1125
    121a:	82 17       	cp	r24, r18
    121c:	31 f4       	brne	.+12     	; 0x122a <Tcp_Receive+0x1e>
    121e:	80 91 2f 11 	lds	r24, 0x112F
    1222:	88 31       	cpi	r24, 0x18	; 24
    1224:	11 f4       	brne	.+4      	; 0x122a <Tcp_Receive+0x1e>
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	08 95       	ret
    122a:	82 e0       	ldi	r24, 0x02	; 2
		&& EthFrame[ControlBits] == (PSH+ACK) /*&& Tcp_Status == Established*/) {
		return 1; //Odebrano nowe dane
	}
	return 2; //B³¹d odbierania danych
}
    122c:	08 95       	ret

0000122e <Tcp_Send_Data>:
		RTLsend_packet();
		return receive_data;
}

//Funkcja wysy³aj¹ca dane TCP na konkretny port
void Tcp_Send_Data(uint16_t destport, uint16_t data_lenght) {	
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	c8 2e       	mov	r12, r24
    123c:	d9 2e       	mov	r13, r25
    123e:	7b 01       	movw	r14, r22
	
	MakeIpHeader(0x06,0x14+data_lenght);
    1240:	6c 5e       	subi	r22, 0xEC	; 236
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
	
	EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    124a:	90 91 97 01 	lds	r25, 0x0197
    124e:	80 91 98 01 	lds	r24, 0x0198
    1252:	04 e2       	ldi	r16, 0x24	; 36
    1254:	11 e1       	ldi	r17, 0x11	; 17
    1256:	f8 01       	movw	r30, r16
    1258:	81 93       	st	Z+, r24
	EthFrame[DestinPort1] = (uint8_t)(dest_port);
    125a:	90 83       	st	Z, r25
	
	EthFrame[SourcePort0] = (uint8_t)(destport>>8);
    125c:	d0 92 22 11 	sts	0x1122, r13
	EthFrame[SourcePort1] = (uint8_t)(destport);
    1260:	c0 92 23 11 	sts	0x1123, r12
	
	EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1264:	20 91 7a 01 	lds	r18, 0x017A
    1268:	30 91 7b 01 	lds	r19, 0x017B
    126c:	40 91 7c 01 	lds	r20, 0x017C
    1270:	50 91 7d 01 	lds	r21, 0x017D
    1274:	85 2f       	mov	r24, r21
    1276:	99 27       	eor	r25, r25
    1278:	aa 27       	eor	r26, r26
    127a:	bb 27       	eor	r27, r27
    127c:	f8 01       	movw	r30, r16
    127e:	82 83       	std	Z+2, r24	; 0x02
	EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    1280:	ca 01       	movw	r24, r20
    1282:	aa 27       	eor	r26, r26
    1284:	bb 27       	eor	r27, r27
    1286:	83 83       	std	Z+3, r24	; 0x03
	EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1288:	bb 27       	eor	r27, r27
    128a:	a5 2f       	mov	r26, r21
    128c:	94 2f       	mov	r25, r20
    128e:	83 2f       	mov	r24, r19
    1290:	84 83       	std	Z+4, r24	; 0x04
	EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    1292:	25 83       	std	Z+5, r18	; 0x05
	seq_number+=data_lenght;
    1294:	c7 01       	movw	r24, r14
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	82 0f       	add	r24, r18
    129c:	93 1f       	adc	r25, r19
    129e:	a4 1f       	adc	r26, r20
    12a0:	b5 1f       	adc	r27, r21
    12a2:	80 93 7a 01 	sts	0x017A, r24
    12a6:	90 93 7b 01 	sts	0x017B, r25
    12aa:	a0 93 7c 01 	sts	0x017C, r26
    12ae:	b0 93 7d 01 	sts	0x017D, r27
	
	EthFrame[AckNumber0] = (uint8_t)(ack_number>>24); //Numer potwierdzenia ACK
    12b2:	20 91 89 01 	lds	r18, 0x0189
    12b6:	30 91 8a 01 	lds	r19, 0x018A
    12ba:	40 91 8b 01 	lds	r20, 0x018B
    12be:	50 91 8c 01 	lds	r21, 0x018C
    12c2:	85 2f       	mov	r24, r21
    12c4:	99 27       	eor	r25, r25
    12c6:	aa 27       	eor	r26, r26
    12c8:	bb 27       	eor	r27, r27
    12ca:	86 83       	std	Z+6, r24	; 0x06
	EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    12cc:	ca 01       	movw	r24, r20
    12ce:	aa 27       	eor	r26, r26
    12d0:	bb 27       	eor	r27, r27
    12d2:	87 83       	std	Z+7, r24	; 0x07
	EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    12d4:	bb 27       	eor	r27, r27
    12d6:	a5 2f       	mov	r26, r21
    12d8:	94 2f       	mov	r25, r20
    12da:	83 2f       	mov	r24, r19
    12dc:	80 87       	std	Z+8, r24	; 0x08
	EthFrame[AckNumber3] = (uint8_t)(ack_number);
    12de:	21 87       	std	Z+9, r18	; 0x09
	
	EthFrame[DataOffset] = 0x50;
    12e0:	80 e5       	ldi	r24, 0x50	; 80
    12e2:	82 87       	std	Z+10, r24	; 0x0a
	EthFrame[ControlBits] = (/*PSH|*/ACK);
    12e4:	80 e1       	ldi	r24, 0x10	; 16
    12e6:	83 87       	std	Z+11, r24	; 0x0b
	EthFrame[WindowSize] = 0xff;
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	85 87       	std	Z+13, r24	; 0x0d
		
	uint16_t CheckSum = TcpCheckSumCalc(data_lenght);
    12ec:	c7 01       	movw	r24, r14
    12ee:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
	EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    12f2:	f8 01       	movw	r30, r16
    12f4:	96 87       	std	Z+14, r25	; 0x0e
	EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    12f6:	87 87       	std	Z+15, r24	; 0x0f
		
	EthFrame[DataPointer0] = 0x00;
    12f8:	10 8a       	std	Z+16, r1	; 0x10
	EthFrame[DataPointer1] = 0x00;
    12fa:	11 8a       	std	Z+17, r1	; 0x11
		
	//Wysy³anie do RTL8019as
	PacketSize = 14+20+20+data_lenght;
    12fc:	86 e3       	ldi	r24, 0x36	; 54
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	e8 0e       	add	r14, r24
    1302:	f9 1e       	adc	r15, r25
    1304:	f0 92 92 01 	sts	0x0192, r15
    1308:	e0 92 91 01 	sts	0x0191, r14
	RTLsend_packet();	
    130c:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
}
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	df 90       	pop	r13
    131a:	cf 90       	pop	r12
    131c:	08 95       	ret

0000131e <Tcp_Send_Ack>:
	}
	return 2; //B³¹d odbierania danych
}

//Funkcja wysy³aj¹ca potwierdzenie otrzymania danych TCP na konkretny destport
uint16_t Tcp_Send_Ack(uint16_t destport) {
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	e8 2e       	mov	r14, r24
    132c:	f9 2e       	mov	r15, r25

		uint16_t receive_data = (EthFrame[IpTotalLength0]<<8); //iloœæ odebranych bajtów danych (20-nag³ówek IP, 20-nag³ówek TCP)
    132e:	00 e1       	ldi	r16, 0x10	; 16
    1330:	11 e1       	ldi	r17, 0x11	; 17
    1332:	f8 01       	movw	r30, r16
    1334:	91 91       	ld	r25, Z+
    1336:	80 e0       	ldi	r24, 0x00	; 0
		receive_data += EthFrame[IpTotalLength1];
    1338:	e0 81       	ld	r30, Z
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	b8 97       	sbiw	r30, 0x28	; 40
		receive_data -= (0x14+0x14);
    133e:	ef 01       	movw	r28, r30
    1340:	c8 0f       	add	r28, r24
    1342:	d9 1f       	adc	r29, r25
		
		MakeIpHeader(0x06,0x14);
    1344:	86 e0       	ldi	r24, 0x06	; 6
    1346:	64 e1       	ldi	r22, 0x14	; 20
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
		EthFrame[DestinPort0] = EthFrame[SourcePort0];
    134e:	d8 01       	movw	r26, r16
    1350:	52 96       	adiw	r26, 0x12	; 18
    1352:	8c 91       	ld	r24, X
    1354:	f8 01       	movw	r30, r16
    1356:	84 8b       	std	Z+20, r24	; 0x14
		EthFrame[DestinPort1] = EthFrame[SourcePort1];
    1358:	98 01       	movw	r18, r16
    135a:	2d 5e       	subi	r18, 0xED	; 237
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	f9 01       	movw	r30, r18
    1360:	80 81       	ld	r24, Z
    1362:	f8 01       	movw	r30, r16
    1364:	85 8b       	std	Z+21, r24	; 0x15
		
		EthFrame[SourcePort0] = (uint8_t)(destport>>8);
    1366:	fc 92       	st	X, r15
		EthFrame[SourcePort1] = (uint8_t)(destport);
    1368:	f9 01       	movw	r30, r18
    136a:	e0 82       	st	Z, r14
		
		ack_number+=receive_data;
    136c:	ce 01       	movw	r24, r28
    136e:	a0 e0       	ldi	r26, 0x00	; 0
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	20 91 89 01 	lds	r18, 0x0189
    1376:	30 91 8a 01 	lds	r19, 0x018A
    137a:	40 91 8b 01 	lds	r20, 0x018B
    137e:	50 91 8c 01 	lds	r21, 0x018C
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	a4 1f       	adc	r26, r20
    1388:	b5 1f       	adc	r27, r21
    138a:	80 93 89 01 	sts	0x0189, r24
    138e:	90 93 8a 01 	sts	0x018A, r25
    1392:	a0 93 8b 01 	sts	0x018B, r26
    1396:	b0 93 8c 01 	sts	0x018C, r27
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    139a:	2b 2f       	mov	r18, r27
    139c:	33 27       	eor	r19, r19
    139e:	44 27       	eor	r20, r20
    13a0:	55 27       	eor	r21, r21
    13a2:	f8 01       	movw	r30, r16
    13a4:	22 8f       	std	Z+26, r18	; 0x1a
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    13a6:	9d 01       	movw	r18, r26
    13a8:	44 27       	eor	r20, r20
    13aa:	55 27       	eor	r21, r21
    13ac:	23 8f       	std	Z+27, r18	; 0x1b
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    13ae:	29 2f       	mov	r18, r25
    13b0:	3a 2f       	mov	r19, r26
    13b2:	4b 2f       	mov	r20, r27
    13b4:	55 27       	eor	r21, r21
    13b6:	24 8f       	std	Z+28, r18	; 0x1c
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    13b8:	85 8f       	std	Z+29, r24	; 0x1d
		
		EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    13ba:	20 91 7a 01 	lds	r18, 0x017A
    13be:	30 91 7b 01 	lds	r19, 0x017B
    13c2:	40 91 7c 01 	lds	r20, 0x017C
    13c6:	50 91 7d 01 	lds	r21, 0x017D
    13ca:	85 2f       	mov	r24, r21
    13cc:	99 27       	eor	r25, r25
    13ce:	aa 27       	eor	r26, r26
    13d0:	bb 27       	eor	r27, r27
    13d2:	86 8b       	std	Z+22, r24	; 0x16
		EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    13d4:	ca 01       	movw	r24, r20
    13d6:	aa 27       	eor	r26, r26
    13d8:	bb 27       	eor	r27, r27
    13da:	87 8b       	std	Z+23, r24	; 0x17
		EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    13dc:	bb 27       	eor	r27, r27
    13de:	a5 2f       	mov	r26, r21
    13e0:	94 2f       	mov	r25, r20
    13e2:	83 2f       	mov	r24, r19
    13e4:	80 8f       	std	Z+24, r24	; 0x18
		EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    13e6:	21 8f       	std	Z+25, r18	; 0x19
		
		EthFrame[DataOffset] = 0x50;
    13e8:	80 e5       	ldi	r24, 0x50	; 80
    13ea:	86 8f       	std	Z+30, r24	; 0x1e
		EthFrame[ControlBits] = ACK;
    13ec:	80 e1       	ldi	r24, 0x10	; 16
    13ee:	87 8f       	std	Z+31, r24	; 0x1f
		EthFrame[WindowSize] = 0xff;
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	81 a3       	std	Z+33, r24	; 0x21
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    13fc:	f8 01       	movw	r30, r16
    13fe:	92 a3       	std	Z+34, r25	; 0x22
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1400:	83 a3       	std	Z+35, r24	; 0x23
		
		EthFrame[DataPointer0] = 0x00;
    1402:	14 a2       	std	Z+36, r1	; 0x24
		EthFrame[DataPointer1] = 0x00;
    1404:	15 a2       	std	Z+37, r1	; 0x25
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1406:	86 e3       	ldi	r24, 0x36	; 54
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	90 93 92 01 	sts	0x0192, r25
    140e:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
    1412:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
		return receive_data;
}
    1416:	8c 2f       	mov	r24, r28
    1418:	9d 2f       	mov	r25, r29
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	08 95       	ret

00001428 <Tcp_Fin_Http>:
	PacketSize = 14+20+20+data_lenght;
	RTLsend_packet();	
}

//Funkcja zamykaj¹ca po³¹czenie TCP na potrzeby HTTP
void Tcp_Fin_Http(uint16_t port) {
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	0f 93       	push	r16
    1432:	1f 93       	push	r17
    1434:	e8 2e       	mov	r14, r24
    1436:	09 2f       	mov	r16, r25
	printf("%x ", Tcp_Status);
    1438:	00 d0       	rcall	.+0      	; 0x143a <Tcp_Fin_Http+0x12>
    143a:	00 d0       	rcall	.+0      	; 0x143c <Tcp_Fin_Http+0x14>
    143c:	ed b7       	in	r30, 0x3d	; 61
    143e:	fe b7       	in	r31, 0x3e	; 62
    1440:	31 96       	adiw	r30, 0x01	; 1
    1442:	89 e6       	ldi	r24, 0x69	; 105
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
    144a:	80 91 76 01 	lds	r24, 0x0176
    144e:	82 83       	std	Z+2, r24	; 0x02
    1450:	13 82       	std	Z+3, r1	; 0x03
    1452:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
	if(Tcp_Status == Established) {
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	80 91 76 01 	lds	r24, 0x0176
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	09 f0       	breq	.+2      	; 0x1468 <Tcp_Fin_Http+0x40>
    1466:	50 c1       	rjmp	.+672    	; 0x1708 <Tcp_Fin_Http+0x2e0>
	//Wysy³anie Fin i Ack
	Tcp_Status = FinWait1;
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	80 93 76 01 	sts	0x0176, r24
	MakeIpHeader(0x06,0x14);
    146e:	86 e0       	ldi	r24, 0x06	; 6
    1470:	64 e1       	ldi	r22, 0x14	; 20
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
			
	EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1478:	d0 2e       	mov	r13, r16
    147a:	02 e2       	ldi	r16, 0x22	; 34
    147c:	11 e1       	ldi	r17, 0x11	; 17
    147e:	f8 01       	movw	r30, r16
    1480:	d1 92       	st	Z+, r13
	EthFrame[SourcePort1] = (uint8_t)(port);
    1482:	ce 2c       	mov	r12, r14
    1484:	e0 82       	st	Z, r14
		
	EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1486:	80 91 98 01 	lds	r24, 0x0198
    148a:	f8 01       	movw	r30, r16
    148c:	82 83       	std	Z+2, r24	; 0x02
	EthFrame[DestinPort1] = (uint8_t)(dest_port);
    148e:	80 91 97 01 	lds	r24, 0x0197
    1492:	83 83       	std	Z+3, r24	; 0x03
		
	EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1494:	80 91 7a 01 	lds	r24, 0x017A
    1498:	90 91 7b 01 	lds	r25, 0x017B
    149c:	a0 91 7c 01 	lds	r26, 0x017C
    14a0:	b0 91 7d 01 	lds	r27, 0x017D
    14a4:	2b 2f       	mov	r18, r27
    14a6:	33 27       	eor	r19, r19
    14a8:	44 27       	eor	r20, r20
    14aa:	55 27       	eor	r21, r21
    14ac:	24 83       	std	Z+4, r18	; 0x04
	EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    14ae:	9d 01       	movw	r18, r26
    14b0:	44 27       	eor	r20, r20
    14b2:	55 27       	eor	r21, r21
    14b4:	25 83       	std	Z+5, r18	; 0x05
	EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    14b6:	89 2f       	mov	r24, r25
    14b8:	9a 2f       	mov	r25, r26
    14ba:	ab 2f       	mov	r26, r27
    14bc:	bb 27       	eor	r27, r27
    14be:	86 83       	std	Z+6, r24	; 0x06
	EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    14c0:	80 91 7a 01 	lds	r24, 0x017A
    14c4:	87 83       	std	Z+7, r24	; 0x07
		
	EthFrame[DataOffset] = 0x50;
    14c6:	80 e5       	ldi	r24, 0x50	; 80
    14c8:	84 87       	std	Z+12, r24	; 0x0c
	EthFrame[ControlBits] = FIN|ACK;
    14ca:	81 e1       	ldi	r24, 0x11	; 17
    14cc:	85 87       	std	Z+13, r24	; 0x0d
	EthFrame[WindowSize] = 0xff;
    14ce:	8f ef       	ldi	r24, 0xFF	; 255
    14d0:	87 87       	std	Z+15, r24	; 0x0f
		
	uint16_t CheckSum = TcpCheckSumCalc(0x00);
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
	EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    14da:	f8 01       	movw	r30, r16
    14dc:	90 8b       	std	Z+16, r25	; 0x10
	EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    14de:	81 8b       	std	Z+17, r24	; 0x11
		
	EthFrame[DataPointer0] = 0x00;
    14e0:	12 8a       	std	Z+18, r1	; 0x12
	EthFrame[DataPointer1] = 0x00;
    14e2:	13 8a       	std	Z+19, r1	; 0x13
	printf("%x ", Tcp_Status);	
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <Tcp_Fin_Http+0xbe>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <Tcp_Fin_Http+0xc0>
    14e8:	ed b7       	in	r30, 0x3d	; 61
    14ea:	fe b7       	in	r31, 0x3e	; 62
    14ec:	31 96       	adiw	r30, 0x01	; 1
    14ee:	89 e6       	ldi	r24, 0x69	; 105
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	80 83       	st	Z, r24
    14f6:	80 91 76 01 	lds	r24, 0x0176
    14fa:	82 83       	std	Z+2, r24	; 0x02
    14fc:	13 82       	std	Z+3, r1	; 0x03
    14fe:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
	//Wysy³anie do RTL8019as
	PacketSize = 14+20+20;
    1502:	86 e3       	ldi	r24, 0x36	; 54
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	90 93 92 01 	sts	0x0192, r25
    150a:	80 93 91 01 	sts	0x0191, r24
	RTLsend_packet();
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>

	
	Tcp_Status = TimeWait;	
    151a:	87 e0       	ldi	r24, 0x07	; 7
    151c:	80 93 76 01 	sts	0x0176, r24
	//Czekanie na segment TCP z potwierdzeniem
	while(RTLreceive_packet()!=0x01) {}
    1520:	0e 94 af 03 	call	0x75e	; 0x75e <RTLreceive_packet>
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	e1 f7       	brne	.-8      	; 0x1520 <Tcp_Fin_Http+0xf8>
	printf("%x ", Tcp_Status);
    1528:	00 d0       	rcall	.+0      	; 0x152a <Tcp_Fin_Http+0x102>
    152a:	00 d0       	rcall	.+0      	; 0x152c <Tcp_Fin_Http+0x104>
    152c:	ed b7       	in	r30, 0x3d	; 61
    152e:	fe b7       	in	r31, 0x3e	; 62
    1530:	31 96       	adiw	r30, 0x01	; 1
    1532:	89 e6       	ldi	r24, 0x69	; 105
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	80 91 76 01 	lds	r24, 0x0176
    153e:	82 83       	std	Z+2, r24	; 0x02
    1540:	13 82       	std	Z+3, r1	; 0x03
    1542:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
	//Otrzymanie ACK	
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    1546:	20 91 97 01 	lds	r18, 0x0197
    154a:	90 91 98 01 	lds	r25, 0x0198
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	80 91 24 11 	lds	r24, 0x1124
    155a:	89 17       	cp	r24, r25
    155c:	09 f0       	breq	.+2      	; 0x1560 <Tcp_Fin_Http+0x138>
    155e:	d4 c0       	rjmp	.+424    	; 0x1708 <Tcp_Fin_Http+0x2e0>
    1560:	80 91 25 11 	lds	r24, 0x1125
    1564:	82 17       	cp	r24, r18
    1566:	09 f0       	breq	.+2      	; 0x156a <Tcp_Fin_Http+0x142>
    1568:	cf c0       	rjmp	.+414    	; 0x1708 <Tcp_Fin_Http+0x2e0>
    156a:	80 91 22 11 	lds	r24, 0x1122
    156e:	d8 16       	cp	r13, r24
    1570:	09 f0       	breq	.+2      	; 0x1574 <Tcp_Fin_Http+0x14c>
    1572:	ca c0       	rjmp	.+404    	; 0x1708 <Tcp_Fin_Http+0x2e0>
    1574:	80 91 23 11 	lds	r24, 0x1123
    1578:	c8 16       	cp	r12, r24
    157a:	09 f0       	breq	.+2      	; 0x157e <Tcp_Fin_Http+0x156>
    157c:	c5 c0       	rjmp	.+394    	; 0x1708 <Tcp_Fin_Http+0x2e0>
    157e:	80 91 2f 11 	lds	r24, 0x112F
    1582:	80 31       	cpi	r24, 0x10	; 16
    1584:	09 f0       	breq	.+2      	; 0x1588 <Tcp_Fin_Http+0x160>
    1586:	c0 c0       	rjmp	.+384    	; 0x1708 <Tcp_Fin_Http+0x2e0>
    1588:	80 91 76 01 	lds	r24, 0x0176
    158c:	87 30       	cpi	r24, 0x07	; 7
    158e:	09 f0       	breq	.+2      	; 0x1592 <Tcp_Fin_Http+0x16a>
    1590:	bb c0       	rjmp	.+374    	; 0x1708 <Tcp_Fin_Http+0x2e0>
		&& EthFrame[SourcePort0] == (uint8_t)(port>>8) && EthFrame[SourcePort1] == (uint8_t)(port)
		&& EthFrame[ControlBits] == (ACK) && Tcp_Status == TimeWait
		/*&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01*/) {
		
		//Przepisz ack_number
		ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
    1592:	06 e2       	ldi	r16, 0x26	; 38
    1594:	11 e1       	ldi	r17, 0x11	; 17
    1596:	f8 01       	movw	r30, r16
    1598:	81 91       	ld	r24, Z+
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a0 e0       	ldi	r26, 0x00	; 0
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	b8 2f       	mov	r27, r24
    15a2:	aa 27       	eor	r26, r26
    15a4:	99 27       	eor	r25, r25
    15a6:	88 27       	eor	r24, r24
		ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
    15a8:	20 81       	ld	r18, Z
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	a9 01       	movw	r20, r18
    15b2:	33 27       	eor	r19, r19
    15b4:	22 27       	eor	r18, r18
    15b6:	28 0f       	add	r18, r24
    15b8:	39 1f       	adc	r19, r25
    15ba:	4a 1f       	adc	r20, r26
    15bc:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
    15be:	f8 01       	movw	r30, r16
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	ba 2f       	mov	r27, r26
    15ca:	a9 2f       	mov	r26, r25
    15cc:	98 2f       	mov	r25, r24
    15ce:	88 27       	eor	r24, r24
    15d0:	28 0f       	add	r18, r24
    15d2:	39 1f       	adc	r19, r25
    15d4:	4a 1f       	adc	r20, r26
    15d6:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber3];
    15d8:	83 81       	ldd	r24, Z+3	; 0x03
    15da:	28 0f       	add	r18, r24
    15dc:	31 1d       	adc	r19, r1
    15de:	41 1d       	adc	r20, r1
    15e0:	51 1d       	adc	r21, r1
		
		//Wysy³anie potwierdzenia FIN i ACK
		Tcp_Status = Closing;
    15e2:	86 e0       	ldi	r24, 0x06	; 6
    15e4:	80 93 76 01 	sts	0x0176, r24
		ack_number+=0x01;
    15e8:	2f 5f       	subi	r18, 0xFF	; 255
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	4f 4f       	sbci	r20, 0xFF	; 255
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	20 93 89 01 	sts	0x0189, r18
    15f4:	30 93 8a 01 	sts	0x018A, r19
    15f8:	40 93 8b 01 	sts	0x018B, r20
    15fc:	50 93 8c 01 	sts	0x018C, r21
		
		MakeIpHeader(0x06,0x14);
    1600:	64 e1       	ldi	r22, 0x14	; 20
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1608:	d0 92 22 11 	sts	0x1122, r13
		EthFrame[SourcePort1] = (uint8_t)(port);
    160c:	c0 92 23 11 	sts	0x1123, r12
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1610:	0f 2e       	mov	r0, r31
    1612:	fe ef       	ldi	r31, 0xFE	; 254
    1614:	ef 2e       	mov	r14, r31
    1616:	ff ef       	ldi	r31, 0xFF	; 255
    1618:	ff 2e       	mov	r15, r31
    161a:	f0 2d       	mov	r31, r0
    161c:	e0 0e       	add	r14, r16
    161e:	f1 1e       	adc	r15, r17
    1620:	80 91 98 01 	lds	r24, 0x0198
    1624:	f7 01       	movw	r30, r14
    1626:	80 83       	st	Z, r24
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1628:	80 91 97 01 	lds	r24, 0x0197
    162c:	80 93 25 11 	sts	0x1125, r24
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    1630:	80 91 89 01 	lds	r24, 0x0189
    1634:	90 91 8a 01 	lds	r25, 0x018A
    1638:	a0 91 8b 01 	lds	r26, 0x018B
    163c:	b0 91 8c 01 	lds	r27, 0x018C
    1640:	2b 2f       	mov	r18, r27
    1642:	33 27       	eor	r19, r19
    1644:	44 27       	eor	r20, r20
    1646:	55 27       	eor	r21, r21
    1648:	f8 01       	movw	r30, r16
    164a:	24 83       	std	Z+4, r18	; 0x04
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    164c:	9d 01       	movw	r18, r26
    164e:	44 27       	eor	r20, r20
    1650:	55 27       	eor	r21, r21
    1652:	25 83       	std	Z+5, r18	; 0x05
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    1654:	89 2f       	mov	r24, r25
    1656:	9a 2f       	mov	r25, r26
    1658:	ab 2f       	mov	r26, r27
    165a:	bb 27       	eor	r27, r27
    165c:	86 83       	std	Z+6, r24	; 0x06
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    165e:	80 91 89 01 	lds	r24, 0x0189
    1662:	87 83       	std	Z+7, r24	; 0x07
				
		EthFrame[DataOffset] = 0x50;
    1664:	80 e5       	ldi	r24, 0x50	; 80
    1666:	80 87       	std	Z+8, r24	; 0x08
		EthFrame[ControlBits] = FIN|ACK;
    1668:	81 e1       	ldi	r24, 0x11	; 17
    166a:	81 87       	std	Z+9, r24	; 0x09
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	83 87       	std	Z+11, r24	; 0x0b
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1678:	f8 01       	movw	r30, r16
    167a:	94 87       	std	Z+12, r25	; 0x0c
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    167c:	85 87       	std	Z+13, r24	; 0x0d
		
		EthFrame[DataPointer0] = 0x00;
    167e:	16 86       	std	Z+14, r1	; 0x0e
		EthFrame[DataPointer1] = 0x00;
    1680:	17 86       	std	Z+15, r1	; 0x0f
		printf("%x ", Tcp_Status);
    1682:	00 d0       	rcall	.+0      	; 0x1684 <Tcp_Fin_Http+0x25c>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <Tcp_Fin_Http+0x25e>
    1686:	ed b7       	in	r30, 0x3d	; 61
    1688:	fe b7       	in	r31, 0x3e	; 62
    168a:	31 96       	adiw	r30, 0x01	; 1
    168c:	89 e6       	ldi	r24, 0x69	; 105
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	80 91 76 01 	lds	r24, 0x0176
    1698:	82 83       	std	Z+2, r24	; 0x02
    169a:	13 82       	std	Z+3, r1	; 0x03
    169c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <printf>
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    16a0:	86 e3       	ldi	r24, 0x36	; 54
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 93 92 01 	sts	0x0192, r25
    16a8:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
		
		//Otrzymanie ACK	
		if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    16b8:	20 91 97 01 	lds	r18, 0x0197
    16bc:	90 91 98 01 	lds	r25, 0x0198
    16c0:	f7 01       	movw	r30, r14
    16c2:	80 81       	ld	r24, Z
    16c4:	89 17       	cp	r24, r25
    16c6:	01 f5       	brne	.+64     	; 0x1708 <Tcp_Fin_Http+0x2e0>
    16c8:	80 91 25 11 	lds	r24, 0x1125
    16cc:	82 17       	cp	r24, r18
    16ce:	e1 f4       	brne	.+56     	; 0x1708 <Tcp_Fin_Http+0x2e0>
    16d0:	80 91 22 11 	lds	r24, 0x1122
    16d4:	d8 16       	cp	r13, r24
    16d6:	c1 f4       	brne	.+48     	; 0x1708 <Tcp_Fin_Http+0x2e0>
    16d8:	80 91 23 11 	lds	r24, 0x1123
    16dc:	c8 16       	cp	r12, r24
    16de:	a1 f4       	brne	.+40     	; 0x1708 <Tcp_Fin_Http+0x2e0>
    16e0:	80 91 2f 11 	lds	r24, 0x112F
    16e4:	80 31       	cpi	r24, 0x10	; 16
    16e6:	81 f4       	brne	.+32     	; 0x1708 <Tcp_Fin_Http+0x2e0>
    16e8:	80 91 76 01 	lds	r24, 0x0176
    16ec:	87 30       	cpi	r24, 0x07	; 7
    16ee:	61 f4       	brne	.+24     	; 0x1708 <Tcp_Fin_Http+0x2e0>
    16f0:	20 91 2d 11 	lds	r18, 0x112D
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	80 91 7a 01 	lds	r24, 0x017A
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	28 17       	cp	r18, r24
    1700:	39 07       	cpc	r19, r25
    1702:	11 f4       	brne	.+4      	; 0x1708 <Tcp_Fin_Http+0x2e0>
			&& EthFrame[SourcePort0] == (uint8_t)(port>>8) && EthFrame[SourcePort1] == (uint8_t)(port)
			&& EthFrame[ControlBits] == (ACK) && Tcp_Status == TimeWait
			&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) {
			//Zakoñczono po³¹czenie
			Tcp_Status = Closed;
    1704:	10 92 76 01 	sts	0x0176, r1
		}
	}
	}
}
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	08 95       	ret

00001716 <Tcp_Fin_Active>:
		}
	}
}

//Aktywne zakoñczenie wirtualnego po³¹czenia TCP
void Tcp_Fin_Active(uint16_t port) {
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	e8 2e       	mov	r14, r24
    1728:	09 2f       	mov	r16, r25

	if(Tcp_Status == Established) {
    172a:	80 91 76 01 	lds	r24, 0x0176
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	09 f0       	breq	.+2      	; 0x1734 <Tcp_Fin_Active+0x1e>
    1732:	ca c1       	rjmp	.+916    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
	//Wysy³anie Fin i Ack
	Tcp_Status = FinWait1;
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	80 93 76 01 	sts	0x0176, r24
	MakeIpHeader(0x06,0x14);
    173a:	86 e0       	ldi	r24, 0x06	; 6
    173c:	64 e1       	ldi	r22, 0x14	; 20
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
			
	EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1744:	d0 2e       	mov	r13, r16
    1746:	02 e2       	ldi	r16, 0x22	; 34
    1748:	11 e1       	ldi	r17, 0x11	; 17
    174a:	f8 01       	movw	r30, r16
    174c:	d1 92       	st	Z+, r13
	EthFrame[SourcePort1] = (uint8_t)(port);
    174e:	ce 2c       	mov	r12, r14
    1750:	e0 82       	st	Z, r14
		
	EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1752:	80 91 98 01 	lds	r24, 0x0198
    1756:	f8 01       	movw	r30, r16
    1758:	82 83       	std	Z+2, r24	; 0x02
	EthFrame[DestinPort1] = (uint8_t)(dest_port);
    175a:	80 91 97 01 	lds	r24, 0x0197
    175e:	83 83       	std	Z+3, r24	; 0x03
		
	EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1760:	80 91 7a 01 	lds	r24, 0x017A
    1764:	90 91 7b 01 	lds	r25, 0x017B
    1768:	a0 91 7c 01 	lds	r26, 0x017C
    176c:	b0 91 7d 01 	lds	r27, 0x017D
    1770:	2b 2f       	mov	r18, r27
    1772:	33 27       	eor	r19, r19
    1774:	44 27       	eor	r20, r20
    1776:	55 27       	eor	r21, r21
    1778:	24 83       	std	Z+4, r18	; 0x04
	EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    177a:	9d 01       	movw	r18, r26
    177c:	44 27       	eor	r20, r20
    177e:	55 27       	eor	r21, r21
    1780:	25 83       	std	Z+5, r18	; 0x05
	EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1782:	89 2f       	mov	r24, r25
    1784:	9a 2f       	mov	r25, r26
    1786:	ab 2f       	mov	r26, r27
    1788:	bb 27       	eor	r27, r27
    178a:	86 83       	std	Z+6, r24	; 0x06
	EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    178c:	80 91 7a 01 	lds	r24, 0x017A
    1790:	87 83       	std	Z+7, r24	; 0x07
		
	EthFrame[DataOffset] = 0x50;
    1792:	80 e5       	ldi	r24, 0x50	; 80
    1794:	84 87       	std	Z+12, r24	; 0x0c
	EthFrame[ControlBits] = FIN|ACK;
    1796:	81 e1       	ldi	r24, 0x11	; 17
    1798:	85 87       	std	Z+13, r24	; 0x0d
	EthFrame[WindowSize] = 0xff;
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	87 87       	std	Z+15, r24	; 0x0f
		
	uint16_t CheckSum = TcpCheckSumCalc(0x00);
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
	EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    17a6:	f8 01       	movw	r30, r16
    17a8:	90 8b       	std	Z+16, r25	; 0x10
	EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    17aa:	81 8b       	std	Z+17, r24	; 0x11
		
	EthFrame[DataPointer0] = 0x00;
    17ac:	12 8a       	std	Z+18, r1	; 0x12
	EthFrame[DataPointer1] = 0x00;
    17ae:	13 8a       	std	Z+19, r1	; 0x13
		
	//Wysy³anie do RTL8019as
	PacketSize = 14+20+20;
    17b0:	86 e3       	ldi	r24, 0x36	; 54
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	90 93 92 01 	sts	0x0192, r25
    17b8:	80 93 91 01 	sts	0x0191, r24
	RTLsend_packet();
    17bc:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>

	
	Tcp_Status = TimeWait;	
    17c0:	87 e0       	ldi	r24, 0x07	; 7
    17c2:	80 93 76 01 	sts	0x0176, r24
	//Czekanie na segment TCP z potwierdzeniem
	while(RTLreceive_packet()!=0x01) {}
    17c6:	0e 94 af 03 	call	0x75e	; 0x75e <RTLreceive_packet>
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <Tcp_Fin_Active+0xb0>
	
	//Otrzymanie FIN i ACK	
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    17ce:	20 91 97 01 	lds	r18, 0x0197
    17d2:	90 91 98 01 	lds	r25, 0x0198
    17d6:	80 91 24 11 	lds	r24, 0x1124
    17da:	89 17       	cp	r24, r25
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <Tcp_Fin_Active+0xca>
    17de:	74 c1       	rjmp	.+744    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
    17e0:	80 91 25 11 	lds	r24, 0x1125
    17e4:	82 17       	cp	r24, r18
    17e6:	09 f0       	breq	.+2      	; 0x17ea <Tcp_Fin_Active+0xd4>
    17e8:	6c c1       	rjmp	.+728    	; 0x1ac2 <Tcp_Fin_Active+0x3ac>
    17ea:	80 91 22 11 	lds	r24, 0x1122
    17ee:	d8 16       	cp	r13, r24
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <Tcp_Fin_Active+0xde>
    17f2:	67 c1       	rjmp	.+718    	; 0x1ac2 <Tcp_Fin_Active+0x3ac>
    17f4:	80 91 23 11 	lds	r24, 0x1123
    17f8:	c8 16       	cp	r12, r24
    17fa:	09 f0       	breq	.+2      	; 0x17fe <Tcp_Fin_Active+0xe8>
    17fc:	62 c1       	rjmp	.+708    	; 0x1ac2 <Tcp_Fin_Active+0x3ac>
    17fe:	80 91 2f 11 	lds	r24, 0x112F
    1802:	80 31       	cpi	r24, 0x10	; 16
    1804:	09 f0       	breq	.+2      	; 0x1808 <Tcp_Fin_Active+0xf2>
    1806:	5d c1       	rjmp	.+698    	; 0x1ac2 <Tcp_Fin_Active+0x3ac>
    1808:	80 91 76 01 	lds	r24, 0x0176
    180c:	87 30       	cpi	r24, 0x07	; 7
    180e:	09 f0       	breq	.+2      	; 0x1812 <Tcp_Fin_Active+0xfc>
    1810:	58 c1       	rjmp	.+688    	; 0x1ac2 <Tcp_Fin_Active+0x3ac>
    1812:	20 91 2d 11 	lds	r18, 0x112D
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	80 91 7a 01 	lds	r24, 0x017A
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	28 17       	cp	r18, r24
    1822:	39 07       	cpc	r19, r25
    1824:	09 f0       	breq	.+2      	; 0x1828 <Tcp_Fin_Active+0x112>
    1826:	4d c1       	rjmp	.+666    	; 0x1ac2 <Tcp_Fin_Active+0x3ac>
		&& EthFrame[SourcePort0] == (uint8_t)(port>>8) && EthFrame[SourcePort1] == (uint8_t)(port)
		&& EthFrame[ControlBits] == (/*FIN|*/ACK) && Tcp_Status == TimeWait
		&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) {
		
		//Przepisz ack_number
		ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
    1828:	06 e2       	ldi	r16, 0x26	; 38
    182a:	11 e1       	ldi	r17, 0x11	; 17
    182c:	f8 01       	movw	r30, r16
    182e:	81 91       	ld	r24, Z+
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e0       	ldi	r26, 0x00	; 0
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	b8 2f       	mov	r27, r24
    1838:	aa 27       	eor	r26, r26
    183a:	99 27       	eor	r25, r25
    183c:	88 27       	eor	r24, r24
		ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
    183e:	20 81       	ld	r18, Z
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	a9 01       	movw	r20, r18
    1848:	33 27       	eor	r19, r19
    184a:	22 27       	eor	r18, r18
    184c:	28 0f       	add	r18, r24
    184e:	39 1f       	adc	r19, r25
    1850:	4a 1f       	adc	r20, r26
    1852:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
    1854:	f8 01       	movw	r30, r16
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a0 e0       	ldi	r26, 0x00	; 0
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ba 2f       	mov	r27, r26
    1860:	a9 2f       	mov	r26, r25
    1862:	98 2f       	mov	r25, r24
    1864:	88 27       	eor	r24, r24
    1866:	28 0f       	add	r18, r24
    1868:	39 1f       	adc	r19, r25
    186a:	4a 1f       	adc	r20, r26
    186c:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber3];
    186e:	83 81       	ldd	r24, Z+3	; 0x03
    1870:	28 0f       	add	r18, r24
    1872:	31 1d       	adc	r19, r1
    1874:	41 1d       	adc	r20, r1
    1876:	51 1d       	adc	r21, r1
		
		//Wysy³anie potwierdzenia ACK
		Tcp_Status = Closing;
    1878:	86 e0       	ldi	r24, 0x06	; 6
    187a:	80 93 76 01 	sts	0x0176, r24
		ack_number+=0x01;
    187e:	2f 5f       	subi	r18, 0xFF	; 255
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
    1882:	4f 4f       	sbci	r20, 0xFF	; 255
    1884:	5f 4f       	sbci	r21, 0xFF	; 255
    1886:	20 93 89 01 	sts	0x0189, r18
    188a:	30 93 8a 01 	sts	0x018A, r19
    188e:	40 93 8b 01 	sts	0x018B, r20
    1892:	50 93 8c 01 	sts	0x018C, r21
		
		MakeIpHeader(0x06,0x14);
    1896:	64 e1       	ldi	r22, 0x14	; 20
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    189e:	d0 92 22 11 	sts	0x1122, r13
		EthFrame[SourcePort1] = (uint8_t)(port);
    18a2:	c0 92 23 11 	sts	0x1123, r12
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    18a6:	0f 2e       	mov	r0, r31
    18a8:	fe ef       	ldi	r31, 0xFE	; 254
    18aa:	ef 2e       	mov	r14, r31
    18ac:	ff ef       	ldi	r31, 0xFF	; 255
    18ae:	ff 2e       	mov	r15, r31
    18b0:	f0 2d       	mov	r31, r0
    18b2:	e0 0e       	add	r14, r16
    18b4:	f1 1e       	adc	r15, r17
    18b6:	80 91 98 01 	lds	r24, 0x0198
    18ba:	f7 01       	movw	r30, r14
    18bc:	80 83       	st	Z, r24
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    18be:	80 91 97 01 	lds	r24, 0x0197
    18c2:	80 93 25 11 	sts	0x1125, r24
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    18c6:	80 91 89 01 	lds	r24, 0x0189
    18ca:	90 91 8a 01 	lds	r25, 0x018A
    18ce:	a0 91 8b 01 	lds	r26, 0x018B
    18d2:	b0 91 8c 01 	lds	r27, 0x018C
    18d6:	2b 2f       	mov	r18, r27
    18d8:	33 27       	eor	r19, r19
    18da:	44 27       	eor	r20, r20
    18dc:	55 27       	eor	r21, r21
    18de:	f8 01       	movw	r30, r16
    18e0:	24 83       	std	Z+4, r18	; 0x04
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    18e2:	9d 01       	movw	r18, r26
    18e4:	44 27       	eor	r20, r20
    18e6:	55 27       	eor	r21, r21
    18e8:	25 83       	std	Z+5, r18	; 0x05
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    18ea:	89 2f       	mov	r24, r25
    18ec:	9a 2f       	mov	r25, r26
    18ee:	ab 2f       	mov	r26, r27
    18f0:	bb 27       	eor	r27, r27
    18f2:	86 83       	std	Z+6, r24	; 0x06
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    18f4:	80 91 89 01 	lds	r24, 0x0189
    18f8:	87 83       	std	Z+7, r24	; 0x07
				
		EthFrame[DataOffset] = 0x50;
    18fa:	80 e5       	ldi	r24, 0x50	; 80
    18fc:	80 87       	std	Z+8, r24	; 0x08
		EthFrame[ControlBits] = ACK;
    18fe:	80 e1       	ldi	r24, 0x10	; 16
    1900:	81 87       	std	Z+9, r24	; 0x09
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	83 87       	std	Z+11, r24	; 0x0b
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    190e:	f8 01       	movw	r30, r16
    1910:	94 87       	std	Z+12, r25	; 0x0c
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1912:	85 87       	std	Z+13, r24	; 0x0d
		
		EthFrame[DataPointer0] = 0x00;
    1914:	16 86       	std	Z+14, r1	; 0x0e
		EthFrame[DataPointer1] = 0x00;
    1916:	17 86       	std	Z+15, r1	; 0x0f
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1918:	86 e3       	ldi	r24, 0x36	; 54
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	90 93 92 01 	sts	0x0192, r25
    1920:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
    1924:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
		
		//Zakoñczono po³¹czenie
		Tcp_Status = Closed;
    1928:	10 92 76 01 	sts	0x0176, r1
	}
	
	//Otrzymanie ACK
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    192c:	20 91 97 01 	lds	r18, 0x0197
    1930:	90 91 98 01 	lds	r25, 0x0198
    1934:	f7 01       	movw	r30, r14
    1936:	80 81       	ld	r24, Z
    1938:	89 17       	cp	r24, r25
    193a:	09 f0       	breq	.+2      	; 0x193e <Tcp_Fin_Active+0x228>
    193c:	c5 c0       	rjmp	.+394    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
    193e:	80 91 25 11 	lds	r24, 0x1125
    1942:	82 17       	cp	r24, r18
    1944:	09 f0       	breq	.+2      	; 0x1948 <Tcp_Fin_Active+0x232>
    1946:	c0 c0       	rjmp	.+384    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
    1948:	80 91 22 11 	lds	r24, 0x1122
    194c:	d8 16       	cp	r13, r24
    194e:	09 f0       	breq	.+2      	; 0x1952 <Tcp_Fin_Active+0x23c>
    1950:	bb c0       	rjmp	.+374    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
    1952:	80 91 23 11 	lds	r24, 0x1123
    1956:	c8 16       	cp	r12, r24
    1958:	09 f0       	breq	.+2      	; 0x195c <Tcp_Fin_Active+0x246>
    195a:	b6 c0       	rjmp	.+364    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
    195c:	80 91 2f 11 	lds	r24, 0x112F
    1960:	80 31       	cpi	r24, 0x10	; 16
    1962:	09 f0       	breq	.+2      	; 0x1966 <Tcp_Fin_Active+0x250>
    1964:	b1 c0       	rjmp	.+354    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
    1966:	80 91 76 01 	lds	r24, 0x0176
    196a:	87 30       	cpi	r24, 0x07	; 7
    196c:	09 f0       	breq	.+2      	; 0x1970 <Tcp_Fin_Active+0x25a>
    196e:	ac c0       	rjmp	.+344    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
    1970:	20 91 2d 11 	lds	r18, 0x112D
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	80 91 7a 01 	lds	r24, 0x017A
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	28 17       	cp	r18, r24
    1980:	39 07       	cpc	r19, r25
    1982:	09 f0       	breq	.+2      	; 0x1986 <Tcp_Fin_Active+0x270>
    1984:	a1 c0       	rjmp	.+322    	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
		&& EthFrame[SourcePort0] == (uint8_t)(port>>8) && EthFrame[SourcePort1] == (uint8_t)(port)
		&& EthFrame[ControlBits] == ACK && Tcp_Status == TimeWait
		&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) {
		
		//Wysy³anie potwierdzenia ACK
		Tcp_Status = FinWait2;
    1986:	85 e0       	ldi	r24, 0x05	; 5
    1988:	80 93 76 01 	sts	0x0176, r24
		
		while(EthFrame[ControlBits] == (FIN|ACK) && Tcp_Status == TimeWait
    198c:	cf e2       	ldi	r28, 0x2F	; 47
    198e:	d1 e1       	ldi	r29, 0x11	; 17
    1990:	0d e2       	ldi	r16, 0x2D	; 45
    1992:	11 e1       	ldi	r17, 0x11	; 17
    1994:	0f 2e       	mov	r0, r31
    1996:	fa e7       	ldi	r31, 0x7A	; 122
    1998:	ef 2e       	mov	r14, r31
    199a:	f1 e0       	ldi	r31, 0x01	; 1
    199c:	ff 2e       	mov	r15, r31
    199e:	f0 2d       	mov	r31, r0
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <Tcp_Fin_Active+0x294>
		&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) 
		{
			//Czekanie na segment TCP z potwierdzeniem
			while(RTLreceive_packet()!=0x01) {}
    19a2:	0e 94 af 03 	call	0x75e	; 0x75e <RTLreceive_packet>
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	e1 f7       	brne	.-8      	; 0x19a2 <Tcp_Fin_Active+0x28c>
		&& EthFrame[AckNumber3] == (uint8_t)(seq_number)+0x01) {
		
		//Wysy³anie potwierdzenia ACK
		Tcp_Status = FinWait2;
		
		while(EthFrame[ControlBits] == (FIN|ACK) && Tcp_Status == TimeWait
    19aa:	88 81       	ld	r24, Y
    19ac:	81 31       	cpi	r24, 0x11	; 17
    19ae:	71 f4       	brne	.+28     	; 0x19cc <Tcp_Fin_Active+0x2b6>
    19b0:	80 91 76 01 	lds	r24, 0x0176
    19b4:	87 30       	cpi	r24, 0x07	; 7
    19b6:	51 f4       	brne	.+20     	; 0x19cc <Tcp_Fin_Active+0x2b6>
    19b8:	f8 01       	movw	r30, r16
    19ba:	20 81       	ld	r18, Z
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	f7 01       	movw	r30, r14
    19c0:	80 81       	ld	r24, Z
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	28 17       	cp	r18, r24
    19c8:	39 07       	cpc	r19, r25
    19ca:	59 f3       	breq	.-42     	; 0x19a2 <Tcp_Fin_Active+0x28c>
			//Czekanie na segment TCP z potwierdzeniem
			while(RTLreceive_packet()!=0x01) {}
		}
		
		//Przepisz ack_number
		ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
    19cc:	06 e2       	ldi	r16, 0x26	; 38
    19ce:	11 e1       	ldi	r17, 0x11	; 17
    19d0:	f8 01       	movw	r30, r16
    19d2:	81 91       	ld	r24, Z+
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e0       	ldi	r26, 0x00	; 0
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	b8 2f       	mov	r27, r24
    19dc:	aa 27       	eor	r26, r26
    19de:	99 27       	eor	r25, r25
    19e0:	88 27       	eor	r24, r24
		ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
    19e2:	20 81       	ld	r18, Z
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	33 27       	eor	r19, r19
    19ee:	22 27       	eor	r18, r18
    19f0:	28 0f       	add	r18, r24
    19f2:	39 1f       	adc	r19, r25
    19f4:	4a 1f       	adc	r20, r26
    19f6:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
    19f8:	f8 01       	movw	r30, r16
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e0       	ldi	r26, 0x00	; 0
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	ba 2f       	mov	r27, r26
    1a04:	a9 2f       	mov	r26, r25
    1a06:	98 2f       	mov	r25, r24
    1a08:	88 27       	eor	r24, r24
    1a0a:	28 0f       	add	r18, r24
    1a0c:	39 1f       	adc	r19, r25
    1a0e:	4a 1f       	adc	r20, r26
    1a10:	5b 1f       	adc	r21, r27
		ack_number += (uint32_t)EthFrame[SeqNumber3];
    1a12:	83 81       	ldd	r24, Z+3	; 0x03
    1a14:	28 0f       	add	r18, r24
    1a16:	31 1d       	adc	r19, r1
    1a18:	41 1d       	adc	r20, r1
    1a1a:	51 1d       	adc	r21, r1
		
		//Wysy³anie potwierdzenia ACK
		Tcp_Status = Closing;
    1a1c:	86 e0       	ldi	r24, 0x06	; 6
    1a1e:	80 93 76 01 	sts	0x0176, r24
		ack_number+=0x01;
    1a22:	2f 5f       	subi	r18, 0xFF	; 255
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	4f 4f       	sbci	r20, 0xFF	; 255
    1a28:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2a:	20 93 89 01 	sts	0x0189, r18
    1a2e:	30 93 8a 01 	sts	0x018A, r19
    1a32:	40 93 8b 01 	sts	0x018B, r20
    1a36:	50 93 8c 01 	sts	0x018C, r21
		
		MakeIpHeader(0x06,0x14);
    1a3a:	64 e1       	ldi	r22, 0x14	; 20
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1a42:	d0 92 22 11 	sts	0x1122, r13
		EthFrame[SourcePort1] = (uint8_t)(port);
    1a46:	c0 92 23 11 	sts	0x1123, r12
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1a4a:	80 91 98 01 	lds	r24, 0x0198
    1a4e:	80 93 24 11 	sts	0x1124, r24
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1a52:	80 91 97 01 	lds	r24, 0x0197
    1a56:	80 93 25 11 	sts	0x1125, r24
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    1a5a:	80 91 89 01 	lds	r24, 0x0189
    1a5e:	90 91 8a 01 	lds	r25, 0x018A
    1a62:	a0 91 8b 01 	lds	r26, 0x018B
    1a66:	b0 91 8c 01 	lds	r27, 0x018C
    1a6a:	2b 2f       	mov	r18, r27
    1a6c:	33 27       	eor	r19, r19
    1a6e:	44 27       	eor	r20, r20
    1a70:	55 27       	eor	r21, r21
    1a72:	f8 01       	movw	r30, r16
    1a74:	24 83       	std	Z+4, r18	; 0x04
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    1a76:	9d 01       	movw	r18, r26
    1a78:	44 27       	eor	r20, r20
    1a7a:	55 27       	eor	r21, r21
    1a7c:	25 83       	std	Z+5, r18	; 0x05
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    1a7e:	89 2f       	mov	r24, r25
    1a80:	9a 2f       	mov	r25, r26
    1a82:	ab 2f       	mov	r26, r27
    1a84:	bb 27       	eor	r27, r27
    1a86:	86 83       	std	Z+6, r24	; 0x06
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    1a88:	80 91 89 01 	lds	r24, 0x0189
    1a8c:	87 83       	std	Z+7, r24	; 0x07
				
		EthFrame[DataOffset] = 0x50;
    1a8e:	80 e5       	ldi	r24, 0x50	; 80
    1a90:	80 87       	std	Z+8, r24	; 0x08
		EthFrame[ControlBits] = ACK;
    1a92:	80 e1       	ldi	r24, 0x10	; 16
    1a94:	81 87       	std	Z+9, r24	; 0x09
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    1a96:	8f ef       	ldi	r24, 0xFF	; 255
    1a98:	83 87       	std	Z+11, r24	; 0x0b
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	94 87       	std	Z+12, r25	; 0x0c
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1aa6:	85 87       	std	Z+13, r24	; 0x0d
		
		EthFrame[DataPointer0] = 0x00;
    1aa8:	16 86       	std	Z+14, r1	; 0x0e
		EthFrame[DataPointer1] = 0x00;
    1aaa:	17 86       	std	Z+15, r1	; 0x0f
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1aac:	86 e3       	ldi	r24, 0x36	; 54
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	90 93 92 01 	sts	0x0192, r25
    1ab4:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
    1ab8:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
		
		//Zakoñczono po³¹czenie
		Tcp_Status = Closed;
    1abc:	10 92 76 01 	sts	0x0176, r1
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <Tcp_Fin_Active+0x3b2>
		//Zakoñczono po³¹czenie
		Tcp_Status = Closed;
	}
	
	//Otrzymanie ACK
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    1ac2:	20 91 97 01 	lds	r18, 0x0197
    1ac6:	3b cf       	rjmp	.-394    	; 0x193e <Tcp_Fin_Active+0x228>
		
		//Zakoñczono po³¹czenie
		Tcp_Status = Closed;
	}
	}
}
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	08 95       	ret

00001ada <Tcp_Fin_Pasive>:
		Tcp_Status = Established;
	}	
}

//Pasywne zakoñczenie wirtualnego po³¹czenia TCP
void Tcp_Fin_Pasive(uint16_t port) {
    1ada:	af 92       	push	r10
    1adc:	bf 92       	push	r11
    1ade:	cf 92       	push	r12
    1ae0:	df 92       	push	r13
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29

	if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    1aee:	b0 90 24 11 	lds	r11, 0x1124
    1af2:	b9 16       	cp	r11, r25
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <Tcp_Fin_Pasive+0x1e>
    1af6:	a2 c0       	rjmp	.+324    	; 0x1c3c <Tcp_Fin_Pasive+0x162>
    1af8:	a0 90 25 11 	lds	r10, 0x1125
    1afc:	a8 16       	cp	r10, r24
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <Tcp_Fin_Pasive+0x28>
    1b00:	9d c0       	rjmp	.+314    	; 0x1c3c <Tcp_Fin_Pasive+0x162>
    1b02:	80 91 2f 11 	lds	r24, 0x112F
    1b06:	81 31       	cpi	r24, 0x11	; 17
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <Tcp_Fin_Pasive+0x32>
    1b0a:	98 c0       	rjmp	.+304    	; 0x1c3c <Tcp_Fin_Pasive+0x162>
		&& EthFrame[ControlBits] == (FIN|ACK)) {
		Tcp_Status = CloseWait;
    1b0c:	88 e0       	ldi	r24, 0x08	; 8
    1b0e:	80 93 76 01 	sts	0x0176, r24

		MakeIpHeader(0x06,0x14);
    1b12:	86 e0       	ldi	r24, 0x06	; 6
    1b14:	64 e1       	ldi	r22, 0x14	; 20
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1b1c:	02 e2       	ldi	r16, 0x22	; 34
    1b1e:	11 e1       	ldi	r17, 0x11	; 17
    1b20:	f8 01       	movw	r30, r16
    1b22:	b1 92       	st	Z+, r11
		EthFrame[SourcePort1] = (uint8_t)(port);
    1b24:	a0 82       	st	Z, r10
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1b26:	90 91 97 01 	lds	r25, 0x0197
    1b2a:	80 91 98 01 	lds	r24, 0x0198
    1b2e:	d8 01       	movw	r26, r16
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	8c 93       	st	X, r24
    1b34:	12 97       	sbiw	r26, 0x02	; 2
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1b36:	13 96       	adiw	r26, 0x03	; 3
    1b38:	9c 93       	st	X, r25
    1b3a:	13 97       	sbiw	r26, 0x03	; 3
		
		EthFrame[AckNumber0] = EthFrame[SeqNumber0];
    1b3c:	cc 24       	eor	r12, r12
    1b3e:	dd 24       	eor	r13, r13
    1b40:	68 94       	set
    1b42:	c2 f8       	bld	r12, 2
    1b44:	c0 0e       	add	r12, r16
    1b46:	d1 1e       	adc	r13, r17
    1b48:	e6 01       	movw	r28, r12
    1b4a:	88 81       	ld	r24, Y
    1b4c:	18 96       	adiw	r26, 0x08	; 8
    1b4e:	8c 93       	st	X, r24
    1b50:	18 97       	sbiw	r26, 0x08	; 8
		EthFrame[AckNumber1] = EthFrame[SeqNumber1];
    1b52:	0f 2e       	mov	r0, r31
    1b54:	f5 e0       	ldi	r31, 0x05	; 5
    1b56:	ef 2e       	mov	r14, r31
    1b58:	ff 24       	eor	r15, r15
    1b5a:	f0 2d       	mov	r31, r0
    1b5c:	e0 0e       	add	r14, r16
    1b5e:	f1 1e       	adc	r15, r17
    1b60:	f7 01       	movw	r30, r14
    1b62:	80 81       	ld	r24, Z
    1b64:	19 96       	adiw	r26, 0x09	; 9
    1b66:	8c 93       	st	X, r24
		EthFrame[AckNumber2] = EthFrame[SeqNumber2];
    1b68:	b8 01       	movw	r22, r16
    1b6a:	6a 5f       	subi	r22, 0xFA	; 250
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	db 01       	movw	r26, r22
    1b70:	8c 91       	ld	r24, X
    1b72:	e8 01       	movw	r28, r16
    1b74:	8a 87       	std	Y+10, r24	; 0x0a
		EthFrame[AckNumber3] = (EthFrame[SeqNumber3] + 1);
    1b76:	f8 01       	movw	r30, r16
    1b78:	37 96       	adiw	r30, 0x07	; 7
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	d8 01       	movw	r26, r16
    1b80:	1b 96       	adiw	r26, 0x0b	; 11
    1b82:	8c 93       	st	X, r24
		
		EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1b84:	20 91 7a 01 	lds	r18, 0x017A
    1b88:	30 91 7b 01 	lds	r19, 0x017B
    1b8c:	40 91 7c 01 	lds	r20, 0x017C
    1b90:	50 91 7d 01 	lds	r21, 0x017D
    1b94:	85 2f       	mov	r24, r21
    1b96:	99 27       	eor	r25, r25
    1b98:	aa 27       	eor	r26, r26
    1b9a:	bb 27       	eor	r27, r27
    1b9c:	e6 01       	movw	r28, r12
    1b9e:	88 83       	st	Y, r24
		EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    1ba0:	ca 01       	movw	r24, r20
    1ba2:	aa 27       	eor	r26, r26
    1ba4:	bb 27       	eor	r27, r27
    1ba6:	e7 01       	movw	r28, r14
    1ba8:	88 83       	st	Y, r24
		EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1baa:	bb 27       	eor	r27, r27
    1bac:	a5 2f       	mov	r26, r21
    1bae:	94 2f       	mov	r25, r20
    1bb0:	83 2f       	mov	r24, r19
    1bb2:	eb 01       	movw	r28, r22
    1bb4:	88 83       	st	Y, r24
		EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    1bb6:	20 83       	st	Z, r18
		
		EthFrame[DataOffset] = 0x50;
    1bb8:	80 e5       	ldi	r24, 0x50	; 80
    1bba:	f8 01       	movw	r30, r16
    1bbc:	84 87       	std	Z+12, r24	; 0x0c
		EthFrame[ControlBits] = (FIN+ACK);
    1bbe:	81 e1       	ldi	r24, 0x11	; 17
    1bc0:	85 87       	std	Z+13, r24	; 0x0d
		EthFrame[WindowSize] = 0xff;
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	87 87       	std	Z+15, r24	; 0x0f
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1bce:	d8 01       	movw	r26, r16
    1bd0:	50 96       	adiw	r26, 0x10	; 16
    1bd2:	9c 93       	st	X, r25
    1bd4:	50 97       	sbiw	r26, 0x10	; 16
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1bd6:	51 96       	adiw	r26, 0x11	; 17
    1bd8:	8c 93       	st	X, r24
    1bda:	51 97       	sbiw	r26, 0x11	; 17
		
		EthFrame[DataPointer0] = 0x00;
    1bdc:	52 96       	adiw	r26, 0x12	; 18
    1bde:	1c 92       	st	X, r1
    1be0:	52 97       	sbiw	r26, 0x12	; 18
		EthFrame[DataPointer1] = 0x00;
    1be2:	53 96       	adiw	r26, 0x13	; 19
    1be4:	1c 92       	st	X, r1
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1be6:	86 e3       	ldi	r24, 0x36	; 54
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	90 93 92 01 	sts	0x0192, r25
    1bee:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
    1bf2:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
		
		Tcp_Status = LastAck;
    1bf6:	89 e0       	ldi	r24, 0x09	; 9
    1bf8:	80 93 76 01 	sts	0x0176, r24
		//Czekanie na segment TCP z potwierdzeniem
		while(RTLreceive_packet()!=0x01) {}
    1bfc:	0e 94 af 03 	call	0x75e	; 0x75e <RTLreceive_packet>
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	e1 f7       	brne	.-8      	; 0x1bfc <Tcp_Fin_Pasive+0x122>
		
		next_send_data=0;
    1c04:	10 92 8d 01 	sts	0x018D, r1
		next_ack=0;
    1c08:	10 92 79 01 	sts	0x0179, r1

		if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    1c0c:	80 91 24 11 	lds	r24, 0x1124
    1c10:	b8 16       	cp	r11, r24
    1c12:	a1 f4       	brne	.+40     	; 0x1c3c <Tcp_Fin_Pasive+0x162>
    1c14:	80 91 25 11 	lds	r24, 0x1125
    1c18:	a8 16       	cp	r10, r24
    1c1a:	81 f4       	brne	.+32     	; 0x1c3c <Tcp_Fin_Pasive+0x162>
    1c1c:	80 91 2f 11 	lds	r24, 0x112F
    1c20:	80 31       	cpi	r24, 0x10	; 16
    1c22:	61 f4       	brne	.+24     	; 0x1c3c <Tcp_Fin_Pasive+0x162>
    1c24:	20 91 2d 11 	lds	r18, 0x112D
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	80 91 29 11 	lds	r24, 0x1129
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	28 17       	cp	r18, r24
    1c34:	39 07       	cpc	r19, r25
    1c36:	11 f4       	brne	.+4      	; 0x1c3c <Tcp_Fin_Pasive+0x162>
			&& EthFrame[ControlBits] == ACK && EthFrame[AckNumber3] == (EthFrame[SeqNumber3]+0x01)) {
			//Zakoñczono po³¹czenie
			Tcp_Status = Closed;
    1c38:	10 92 76 01 	sts	0x0176, r1
		}
	}
}
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	bf 90       	pop	r11
    1c4e:	af 90       	pop	r10
    1c50:	08 95       	ret

00001c52 <Tcp_Open_Active>:
		
	}
}

//Aktywne otwarcie po³¹czenia TCP
void Tcp_Open_Active(uint16_t port) {
    1c52:	7f 92       	push	r7
    1c54:	8f 92       	push	r8
    1c56:	9f 92       	push	r9
    1c58:	af 92       	push	r10
    1c5a:	bf 92       	push	r11
    1c5c:	cf 92       	push	r12
    1c5e:	df 92       	push	r13
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	f8 2e       	mov	r15, r24
    1c6a:	19 2f       	mov	r17, r25
	
	//Wysy³anie flagi Syn
	Tcp_Status = SendSyn;
    1c6c:	ee 24       	eor	r14, r14
    1c6e:	68 94       	set
    1c70:	e1 f8       	bld	r14, 1
    1c72:	e0 92 76 01 	sts	0x0176, r14

	MakeIpHeader(0x06,0x14);
    1c76:	86 e0       	ldi	r24, 0x06	; 6
    1c78:	64 e1       	ldi	r22, 0x14	; 20
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
	EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1c80:	81 2e       	mov	r8, r17
    1c82:	02 e2       	ldi	r16, 0x22	; 34
    1c84:	11 e1       	ldi	r17, 0x11	; 17
    1c86:	f8 01       	movw	r30, r16
    1c88:	81 92       	st	Z+, r8
	EthFrame[SourcePort1] = (uint8_t)(port);
    1c8a:	7f 2c       	mov	r7, r15
    1c8c:	f0 82       	st	Z, r15
		
	EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1c8e:	90 91 97 01 	lds	r25, 0x0197
    1c92:	80 91 98 01 	lds	r24, 0x0198
    1c96:	f8 01       	movw	r30, r16
    1c98:	82 83       	std	Z+2, r24	; 0x02
	EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1c9a:	93 83       	std	Z+3, r25	; 0x03
		
	EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1c9c:	20 91 7a 01 	lds	r18, 0x017A
    1ca0:	30 91 7b 01 	lds	r19, 0x017B
    1ca4:	40 91 7c 01 	lds	r20, 0x017C
    1ca8:	50 91 7d 01 	lds	r21, 0x017D
    1cac:	85 2f       	mov	r24, r21
    1cae:	99 27       	eor	r25, r25
    1cb0:	aa 27       	eor	r26, r26
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	84 83       	std	Z+4, r24	; 0x04
	EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    1cb6:	ca 01       	movw	r24, r20
    1cb8:	aa 27       	eor	r26, r26
    1cba:	bb 27       	eor	r27, r27
    1cbc:	85 83       	std	Z+5, r24	; 0x05
	EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1cbe:	bb 27       	eor	r27, r27
    1cc0:	a5 2f       	mov	r26, r21
    1cc2:	94 2f       	mov	r25, r20
    1cc4:	83 2f       	mov	r24, r19
    1cc6:	86 83       	std	Z+6, r24	; 0x06
	EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    1cc8:	27 83       	std	Z+7, r18	; 0x07
		
	EthFrame[DataOffset] = 0x50;
    1cca:	80 e5       	ldi	r24, 0x50	; 80
    1ccc:	84 87       	std	Z+12, r24	; 0x0c
	EthFrame[ControlBits] = SYN;
    1cce:	e5 86       	std	Z+13, r14	; 0x0d
	//EthFrame[14] = 0x00;
	EthFrame[WindowSize] = 0xff;
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	87 87       	std	Z+15, r24	; 0x0f
		
	uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
	EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1cdc:	f8 01       	movw	r30, r16
    1cde:	90 8b       	std	Z+16, r25	; 0x10
	EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1ce0:	81 8b       	std	Z+17, r24	; 0x11
		
	EthFrame[DataPointer0] = 0x00;
    1ce2:	12 8a       	std	Z+18, r1	; 0x12
	EthFrame[DataPointer1] = 0x00;
    1ce4:	13 8a       	std	Z+19, r1	; 0x13
		
	//Wysy³anie do RTL8019as
	PacketSize = 14+20+20;
    1ce6:	86 e3       	ldi	r24, 0x36	; 54
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	90 93 92 01 	sts	0x0192, r25
    1cee:	80 93 91 01 	sts	0x0191, r24
	RTLsend_packet();
    1cf2:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
		
	//Czekanie na segment TCP z potwierdzeniem
	while((uint8_t)RTLreceive_packet()!=0x01) {}
    1cf6:	0e 94 af 03 	call	0x75e	; 0x75e <RTLreceive_packet>
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <Tcp_Open_Active+0xa4>
		
	if(EthFrame[DestinPort0] == (uint8_t)(dest_port>>8) && EthFrame[DestinPort1] == (uint8_t)(dest_port) 
    1cfe:	20 91 97 01 	lds	r18, 0x0197
    1d02:	90 91 98 01 	lds	r25, 0x0198
    1d06:	80 91 24 11 	lds	r24, 0x1124
    1d0a:	89 17       	cp	r24, r25
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <Tcp_Open_Active+0xbe>
    1d0e:	dd c0       	rjmp	.+442    	; 0x1eca <Tcp_Open_Active+0x278>
    1d10:	80 91 25 11 	lds	r24, 0x1125
    1d14:	82 17       	cp	r24, r18
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <Tcp_Open_Active+0xc8>
    1d18:	d8 c0       	rjmp	.+432    	; 0x1eca <Tcp_Open_Active+0x278>
    1d1a:	80 91 22 11 	lds	r24, 0x1122
    1d1e:	88 16       	cp	r8, r24
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <Tcp_Open_Active+0xd2>
    1d22:	d3 c0       	rjmp	.+422    	; 0x1eca <Tcp_Open_Active+0x278>
    1d24:	80 91 23 11 	lds	r24, 0x1123
    1d28:	78 16       	cp	r7, r24
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <Tcp_Open_Active+0xdc>
    1d2c:	ce c0       	rjmp	.+412    	; 0x1eca <Tcp_Open_Active+0x278>
    1d2e:	80 91 2f 11 	lds	r24, 0x112F
    1d32:	82 31       	cpi	r24, 0x12	; 18
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <Tcp_Open_Active+0xe6>
    1d36:	c9 c0       	rjmp	.+402    	; 0x1eca <Tcp_Open_Active+0x278>
    1d38:	80 91 76 01 	lds	r24, 0x0176
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <Tcp_Open_Active+0xf0>
    1d40:	c4 c0       	rjmp	.+392    	; 0x1eca <Tcp_Open_Active+0x278>
    1d42:	20 91 2d 11 	lds	r18, 0x112D
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	80 91 7a 01 	lds	r24, 0x017A
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	28 17       	cp	r18, r24
    1d52:	39 07       	cpc	r19, r25
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <Tcp_Open_Active+0x106>
    1d56:	b9 c0       	rjmp	.+370    	; 0x1eca <Tcp_Open_Active+0x278>
			
		//Przepisz ack_number
		ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
		ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
		ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
		ack_number += (uint32_t)EthFrame[SeqNumber3];
    1d58:	06 e2       	ldi	r16, 0x26	; 38
    1d5a:	11 e1       	ldi	r17, 0x11	; 17
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	21 91       	ld	r18, Z+
    1d60:	7f 01       	movw	r14, r30
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	52 2f       	mov	r21, r18
    1d6a:	44 27       	eor	r20, r20
    1d6c:	33 27       	eor	r19, r19
    1d6e:	22 27       	eor	r18, r18
    1d70:	80 81       	ld	r24, Z
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a0 e0       	ldi	r26, 0x00	; 0
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	dc 01       	movw	r26, r24
    1d7a:	99 27       	eor	r25, r25
    1d7c:	88 27       	eor	r24, r24
    1d7e:	28 0f       	add	r18, r24
    1d80:	39 1f       	adc	r19, r25
    1d82:	4a 1f       	adc	r20, r26
    1d84:	5b 1f       	adc	r21, r27
    1d86:	0f 2e       	mov	r0, r31
    1d88:	f3 e0       	ldi	r31, 0x03	; 3
    1d8a:	af 2e       	mov	r10, r31
    1d8c:	bb 24       	eor	r11, r11
    1d8e:	f0 2d       	mov	r31, r0
    1d90:	a0 0e       	add	r10, r16
    1d92:	b1 1e       	adc	r11, r17
    1d94:	f5 01       	movw	r30, r10
    1d96:	80 81       	ld	r24, Z
    1d98:	28 0f       	add	r18, r24
    1d9a:	31 1d       	adc	r19, r1
    1d9c:	41 1d       	adc	r20, r1
    1d9e:	51 1d       	adc	r21, r1
    1da0:	cc 24       	eor	r12, r12
    1da2:	dd 24       	eor	r13, r13
    1da4:	68 94       	set
    1da6:	c1 f8       	bld	r12, 1
    1da8:	c0 0e       	add	r12, r16
    1daa:	d1 1e       	adc	r13, r17
    1dac:	f6 01       	movw	r30, r12
    1dae:	80 81       	ld	r24, Z
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e0       	ldi	r26, 0x00	; 0
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ba 2f       	mov	r27, r26
    1db8:	a9 2f       	mov	r26, r25
    1dba:	98 2f       	mov	r25, r24
    1dbc:	88 27       	eor	r24, r24
    1dbe:	28 0f       	add	r18, r24
    1dc0:	39 1f       	adc	r19, r25
    1dc2:	4a 1f       	adc	r20, r26
    1dc4:	5b 1f       	adc	r21, r27
		
		//Wysy³anie potwierdzenia
		Tcp_Status = Established;
    1dc6:	0f 2e       	mov	r0, r31
    1dc8:	f3 e0       	ldi	r31, 0x03	; 3
    1dca:	9f 2e       	mov	r9, r31
    1dcc:	f0 2d       	mov	r31, r0
    1dce:	90 92 76 01 	sts	0x0176, r9
		seq_number+=0x01;
    1dd2:	80 91 7a 01 	lds	r24, 0x017A
    1dd6:	90 91 7b 01 	lds	r25, 0x017B
    1dda:	a0 91 7c 01 	lds	r26, 0x017C
    1dde:	b0 91 7d 01 	lds	r27, 0x017D
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	a1 1d       	adc	r26, r1
    1de6:	b1 1d       	adc	r27, r1
    1de8:	80 93 7a 01 	sts	0x017A, r24
    1dec:	90 93 7b 01 	sts	0x017B, r25
    1df0:	a0 93 7c 01 	sts	0x017C, r26
    1df4:	b0 93 7d 01 	sts	0x017D, r27
		ack_number+=0x01;
    1df8:	2f 5f       	subi	r18, 0xFF	; 255
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	4f 4f       	sbci	r20, 0xFF	; 255
    1dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1e00:	20 93 89 01 	sts	0x0189, r18
    1e04:	30 93 8a 01 	sts	0x018A, r19
    1e08:	40 93 8b 01 	sts	0x018B, r20
    1e0c:	50 93 8c 01 	sts	0x018C, r21
		
		MakeIpHeader(0x06,0x14);
    1e10:	86 e0       	ldi	r24, 0x06	; 6
    1e12:	64 e1       	ldi	r22, 0x14	; 20
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1e1a:	80 92 22 11 	sts	0x1122, r8
		EthFrame[SourcePort1] = (uint8_t)(port);
    1e1e:	70 92 23 11 	sts	0x1123, r7
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1e22:	90 91 97 01 	lds	r25, 0x0197
    1e26:	80 91 98 01 	lds	r24, 0x0198
    1e2a:	80 93 24 11 	sts	0x1124, r24
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1e2e:	90 93 25 11 	sts	0x1125, r25
		
		EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1e32:	20 91 7a 01 	lds	r18, 0x017A
    1e36:	30 91 7b 01 	lds	r19, 0x017B
    1e3a:	40 91 7c 01 	lds	r20, 0x017C
    1e3e:	50 91 7d 01 	lds	r21, 0x017D
    1e42:	85 2f       	mov	r24, r21
    1e44:	99 27       	eor	r25, r25
    1e46:	aa 27       	eor	r26, r26
    1e48:	bb 27       	eor	r27, r27
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	80 83       	st	Z, r24
		EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    1e4e:	ca 01       	movw	r24, r20
    1e50:	aa 27       	eor	r26, r26
    1e52:	bb 27       	eor	r27, r27
    1e54:	f7 01       	movw	r30, r14
    1e56:	80 83       	st	Z, r24
		EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1e58:	bb 27       	eor	r27, r27
    1e5a:	a5 2f       	mov	r26, r21
    1e5c:	94 2f       	mov	r25, r20
    1e5e:	83 2f       	mov	r24, r19
    1e60:	f6 01       	movw	r30, r12
    1e62:	80 83       	st	Z, r24
		EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    1e64:	f5 01       	movw	r30, r10
    1e66:	20 83       	st	Z, r18
		
		EthFrame[AckNumber0] = (uint8_t)(ack_number>>24);
    1e68:	20 91 89 01 	lds	r18, 0x0189
    1e6c:	30 91 8a 01 	lds	r19, 0x018A
    1e70:	40 91 8b 01 	lds	r20, 0x018B
    1e74:	50 91 8c 01 	lds	r21, 0x018C
    1e78:	85 2f       	mov	r24, r21
    1e7a:	99 27       	eor	r25, r25
    1e7c:	aa 27       	eor	r26, r26
    1e7e:	bb 27       	eor	r27, r27
    1e80:	f8 01       	movw	r30, r16
    1e82:	84 83       	std	Z+4, r24	; 0x04
		EthFrame[AckNumber1] = (uint8_t)(ack_number>>16);
    1e84:	ca 01       	movw	r24, r20
    1e86:	aa 27       	eor	r26, r26
    1e88:	bb 27       	eor	r27, r27
    1e8a:	85 83       	std	Z+5, r24	; 0x05
		EthFrame[AckNumber2] = (uint8_t)(ack_number>>8);
    1e8c:	bb 27       	eor	r27, r27
    1e8e:	a5 2f       	mov	r26, r21
    1e90:	94 2f       	mov	r25, r20
    1e92:	83 2f       	mov	r24, r19
    1e94:	86 83       	std	Z+6, r24	; 0x06
		EthFrame[AckNumber3] = (uint8_t)(ack_number);
    1e96:	27 83       	std	Z+7, r18	; 0x07
				
		EthFrame[DataOffset] = 0x50;
    1e98:	80 e5       	ldi	r24, 0x50	; 80
    1e9a:	80 87       	std	Z+8, r24	; 0x08
		EthFrame[ControlBits] = ACK;
    1e9c:	80 e1       	ldi	r24, 0x10	; 16
    1e9e:	81 87       	std	Z+9, r24	; 0x09
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255
    1ea2:	83 87       	std	Z+11, r24	; 0x0b
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1eac:	f8 01       	movw	r30, r16
    1eae:	94 87       	std	Z+12, r25	; 0x0c
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1eb0:	85 87       	std	Z+13, r24	; 0x0d
		
		EthFrame[DataPointer0] = 0x00;
    1eb2:	16 86       	std	Z+14, r1	; 0x0e
		EthFrame[DataPointer1] = 0x00;
    1eb4:	17 86       	std	Z+15, r1	; 0x0f
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1eb6:	86 e3       	ldi	r24, 0x36	; 54
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	90 93 92 01 	sts	0x0192, r25
    1ebe:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
    1ec2:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
		
		//Ustanowiono po³¹czenie
		Tcp_Status = Established;
    1ec6:	90 92 76 01 	sts	0x0176, r9
	}	
}
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	ff 90       	pop	r15
    1ed0:	ef 90       	pop	r14
    1ed2:	df 90       	pop	r13
    1ed4:	cf 90       	pop	r12
    1ed6:	bf 90       	pop	r11
    1ed8:	af 90       	pop	r10
    1eda:	9f 90       	pop	r9
    1edc:	8f 90       	pop	r8
    1ede:	7f 90       	pop	r7
    1ee0:	08 95       	ret

00001ee2 <Tcp_Open_Pasive>:
	return ((unsigned int)sum);
	
}//Koniec funkcji obliczaj¹cej sumê kontroln¹

//Oczekiwanie na pakiet TCP na konkretnym porcie (serwer w stanie LISTEN)
void Tcp_Open_Pasive(uint16_t port) {
    1ee2:	8f 92       	push	r8
    1ee4:	9f 92       	push	r9
    1ee6:	af 92       	push	r10
    1ee8:	bf 92       	push	r11
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
	if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    1efa:	b0 90 24 11 	lds	r11, 0x1124
    1efe:	b9 16       	cp	r11, r25
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <Tcp_Open_Pasive+0x22>
    1f02:	06 c1       	rjmp	.+524    	; 0x2110 <Tcp_Open_Pasive+0x22e>
    1f04:	a0 90 25 11 	lds	r10, 0x1125
    1f08:	a8 16       	cp	r10, r24
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <Tcp_Open_Pasive+0x2c>
    1f0c:	01 c1       	rjmp	.+514    	; 0x2110 <Tcp_Open_Pasive+0x22e>
    1f0e:	80 91 2f 11 	lds	r24, 0x112F
    1f12:	82 30       	cpi	r24, 0x02	; 2
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <Tcp_Open_Pasive+0x36>
    1f16:	fc c0       	rjmp	.+504    	; 0x2110 <Tcp_Open_Pasive+0x22e>
		&& EthFrame[ControlBits] == SYN) {
		//Odebrano flagê Syn
		Tcp_Status = SynReceived;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	80 93 76 01 	sts	0x0176, r24
		
		dest_port = (EthFrame[SourcePort0]<<8);
		dest_port += EthFrame[SourcePort1];
    1f1e:	02 e2       	ldi	r16, 0x22	; 34
    1f20:	11 e1       	ldi	r17, 0x11	; 17
    1f22:	d8 01       	movw	r26, r16
    1f24:	9d 91       	ld	r25, X+
    1f26:	7d 01       	movw	r14, r26
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	2c 91       	ld	r18, X
    1f2c:	82 0f       	add	r24, r18
    1f2e:	91 1d       	adc	r25, r1
    1f30:	90 93 98 01 	sts	0x0198, r25
    1f34:	80 93 97 01 	sts	0x0197, r24

		MakeIpHeader(0x06,0x14);
    1f38:	86 e0       	ldi	r24, 0x06	; 6
    1f3a:	64 e1       	ldi	r22, 0x14	; 20
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <MakeIpHeader>
		
		EthFrame[SourcePort0] = (uint8_t)(port>>8);
    1f42:	e8 01       	movw	r28, r16
    1f44:	b8 82       	st	Y, r11
		EthFrame[SourcePort1] = (uint8_t)(port);
    1f46:	f7 01       	movw	r30, r14
    1f48:	a0 82       	st	Z, r10
		
		EthFrame[DestinPort0] = (uint8_t)(dest_port>>8);
    1f4a:	90 91 97 01 	lds	r25, 0x0197
    1f4e:	80 91 98 01 	lds	r24, 0x0198
    1f52:	8a 83       	std	Y+2, r24	; 0x02
		EthFrame[DestinPort1] = (uint8_t)(dest_port);
    1f54:	9b 83       	std	Y+3, r25	; 0x03
		
		EthFrame[AckNumber0] = EthFrame[SeqNumber0];
    1f56:	cc 24       	eor	r12, r12
    1f58:	dd 24       	eor	r13, r13
    1f5a:	68 94       	set
    1f5c:	c2 f8       	bld	r12, 2
    1f5e:	c0 0e       	add	r12, r16
    1f60:	d1 1e       	adc	r13, r17
    1f62:	d6 01       	movw	r26, r12
    1f64:	8c 91       	ld	r24, X
    1f66:	88 87       	std	Y+8, r24	; 0x08
		EthFrame[AckNumber1] = EthFrame[SeqNumber1];
    1f68:	0f 2e       	mov	r0, r31
    1f6a:	f5 e0       	ldi	r31, 0x05	; 5
    1f6c:	ef 2e       	mov	r14, r31
    1f6e:	ff 24       	eor	r15, r15
    1f70:	f0 2d       	mov	r31, r0
    1f72:	e0 0e       	add	r14, r16
    1f74:	f1 1e       	adc	r15, r17
    1f76:	e7 01       	movw	r28, r14
    1f78:	88 81       	ld	r24, Y
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	81 87       	std	Z+9, r24	; 0x09
		EthFrame[AckNumber2] = EthFrame[SeqNumber2];
    1f7e:	b8 01       	movw	r22, r16
    1f80:	6a 5f       	subi	r22, 0xFA	; 250
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	db 01       	movw	r26, r22
    1f86:	8c 91       	ld	r24, X
    1f88:	82 87       	std	Z+10, r24	; 0x0a
		EthFrame[AckNumber3] = (EthFrame[SeqNumber3] + 1);
    1f8a:	37 96       	adiw	r30, 0x07	; 7
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	e8 01       	movw	r28, r16
    1f92:	8b 87       	std	Y+11, r24	; 0x0b
		
		EthFrame[SeqNumber0] = (uint8_t)(seq_number>>24); //Numer porz¹dkowy SEQ
    1f94:	20 91 7a 01 	lds	r18, 0x017A
    1f98:	30 91 7b 01 	lds	r19, 0x017B
    1f9c:	40 91 7c 01 	lds	r20, 0x017C
    1fa0:	50 91 7d 01 	lds	r21, 0x017D
    1fa4:	85 2f       	mov	r24, r21
    1fa6:	99 27       	eor	r25, r25
    1fa8:	aa 27       	eor	r26, r26
    1faa:	bb 27       	eor	r27, r27
    1fac:	e6 01       	movw	r28, r12
    1fae:	88 83       	st	Y, r24
		EthFrame[SeqNumber1] = (uint8_t)(seq_number>>16);
    1fb0:	ca 01       	movw	r24, r20
    1fb2:	aa 27       	eor	r26, r26
    1fb4:	bb 27       	eor	r27, r27
    1fb6:	e7 01       	movw	r28, r14
    1fb8:	88 83       	st	Y, r24
		EthFrame[SeqNumber2] = (uint8_t)(seq_number>>8);
    1fba:	bb 27       	eor	r27, r27
    1fbc:	a5 2f       	mov	r26, r21
    1fbe:	94 2f       	mov	r25, r20
    1fc0:	83 2f       	mov	r24, r19
    1fc2:	eb 01       	movw	r28, r22
    1fc4:	88 83       	st	Y, r24
		EthFrame[SeqNumber3] = (uint8_t)(seq_number);
    1fc6:	20 83       	st	Z, r18
		
		EthFrame[DataOffset] = 0x50;
    1fc8:	80 e5       	ldi	r24, 0x50	; 80
    1fca:	f8 01       	movw	r30, r16
    1fcc:	84 87       	std	Z+12, r24	; 0x0c
		EthFrame[ControlBits] = (SYN|ACK);
    1fce:	82 e1       	ldi	r24, 0x12	; 18
    1fd0:	85 87       	std	Z+13, r24	; 0x0d
		//EthFrame[14] = 0x00;
		EthFrame[WindowSize] = 0xff;
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	87 87       	std	Z+15, r24	; 0x0f
		
		uint16_t CheckSum = TcpCheckSumCalc(0x00);
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TcpCheckSumCalc>
		EthFrame[TcpCheckSum0] = (uint8_t)((CheckSum)>>8);
    1fde:	d8 01       	movw	r26, r16
    1fe0:	50 96       	adiw	r26, 0x10	; 16
    1fe2:	9c 93       	st	X, r25
    1fe4:	50 97       	sbiw	r26, 0x10	; 16
		EthFrame[TcpCheckSum1] = (uint8_t)(CheckSum);
    1fe6:	51 96       	adiw	r26, 0x11	; 17
    1fe8:	8c 93       	st	X, r24
    1fea:	51 97       	sbiw	r26, 0x11	; 17
		
		EthFrame[DataPointer0] = 0x00;
    1fec:	52 96       	adiw	r26, 0x12	; 18
    1fee:	1c 92       	st	X, r1
    1ff0:	52 97       	sbiw	r26, 0x12	; 18
		EthFrame[DataPointer1] = 0x00;
    1ff2:	53 96       	adiw	r26, 0x13	; 19
    1ff4:	1c 92       	st	X, r1
		
		//Wysy³anie do RTL8019as
		PacketSize = 14+20+20;
    1ff6:	86 e3       	ldi	r24, 0x36	; 54
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	90 93 92 01 	sts	0x0192, r25
    1ffe:	80 93 91 01 	sts	0x0191, r24
		RTLsend_packet();
    2002:	0e 94 14 03 	call	0x628	; 0x628 <RTLsend_packet>
    2006:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t i=0x00;
		
		for(i=0x00; i<10; i++) { //Je¿eli nie bêdzie ACK w 10 nastêpnych pakietach po³¹czenie nie zostanie ustanowione
			while((uint8_t)RTLreceive_packet()!=0x01) {}
			
			if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    2008:	c4 e2       	ldi	r28, 0x24	; 36
    200a:	d1 e1       	ldi	r29, 0x11	; 17
    200c:	0f 2e       	mov	r0, r31
    200e:	f5 e2       	ldi	r31, 0x25	; 37
    2010:	ef 2e       	mov	r14, r31
    2012:	f1 e1       	ldi	r31, 0x11	; 17
    2014:	ff 2e       	mov	r15, r31
    2016:	f0 2d       	mov	r31, r0
    2018:	0f 2e       	mov	r0, r31
    201a:	ff e2       	ldi	r31, 0x2F	; 47
    201c:	cf 2e       	mov	r12, r31
    201e:	f1 e1       	ldi	r31, 0x11	; 17
    2020:	df 2e       	mov	r13, r31
    2022:	f0 2d       	mov	r31, r0
    2024:	0f 2e       	mov	r0, r31
    2026:	fd e2       	ldi	r31, 0x2D	; 45
    2028:	8f 2e       	mov	r8, r31
    202a:	f1 e1       	ldi	r31, 0x11	; 17
    202c:	9f 2e       	mov	r9, r31
    202e:	f0 2d       	mov	r31, r0
		
		//Czekanie na segment TCP z potwierdzeniem
		uint8_t i=0x00;
		
		for(i=0x00; i<10; i++) { //Je¿eli nie bêdzie ACK w 10 nastêpnych pakietach po³¹czenie nie zostanie ustanowione
			while((uint8_t)RTLreceive_packet()!=0x01) {}
    2030:	0e 94 af 03 	call	0x75e	; 0x75e <RTLreceive_packet>
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	e1 f7       	brne	.-8      	; 0x2030 <Tcp_Open_Pasive+0x14e>
			
			if(EthFrame[DestinPort0] == (uint8_t)(port>>8) && EthFrame[DestinPort1] == (uint8_t)(port) 
    2038:	88 81       	ld	r24, Y
    203a:	b8 16       	cp	r11, r24
    203c:	09 f0       	breq	.+2      	; 0x2040 <Tcp_Open_Pasive+0x15e>
    203e:	64 c0       	rjmp	.+200    	; 0x2108 <Tcp_Open_Pasive+0x226>
    2040:	f7 01       	movw	r30, r14
    2042:	80 81       	ld	r24, Z
    2044:	a8 16       	cp	r10, r24
    2046:	09 f0       	breq	.+2      	; 0x204a <Tcp_Open_Pasive+0x168>
    2048:	5f c0       	rjmp	.+190    	; 0x2108 <Tcp_Open_Pasive+0x226>
    204a:	d6 01       	movw	r26, r12
    204c:	8c 91       	ld	r24, X
    204e:	80 31       	cpi	r24, 0x10	; 16
    2050:	09 f0       	breq	.+2      	; 0x2054 <Tcp_Open_Pasive+0x172>
    2052:	5a c0       	rjmp	.+180    	; 0x2108 <Tcp_Open_Pasive+0x226>
    2054:	80 91 76 01 	lds	r24, 0x0176
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	09 f0       	breq	.+2      	; 0x205e <Tcp_Open_Pasive+0x17c>
    205c:	55 c0       	rjmp	.+170    	; 0x2108 <Tcp_Open_Pasive+0x226>
    205e:	f4 01       	movw	r30, r8
    2060:	20 81       	ld	r18, Z
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	80 91 8d 01 	lds	r24, 0x018D
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	28 17       	cp	r18, r24
    206e:	39 07       	cpc	r19, r25
    2070:	09 f0       	breq	.+2      	; 0x2074 <Tcp_Open_Pasive+0x192>
    2072:	4a c0       	rjmp	.+148    	; 0x2108 <Tcp_Open_Pasive+0x226>
				
				//Przepisz ack_number
				ack_number  = (uint32_t)EthFrame[SeqNumber0]<<24;			//Numer potwierdzenia ACK
				ack_number += (uint32_t)EthFrame[SeqNumber1]<<16;
				ack_number += (uint32_t)EthFrame[SeqNumber2]<<8;	
				ack_number += (uint32_t)EthFrame[SeqNumber3];
    2074:	66 e2       	ldi	r22, 0x26	; 38
    2076:	71 e1       	ldi	r23, 0x11	; 17
    2078:	fb 01       	movw	r30, r22
    207a:	21 91       	ld	r18, Z+
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	52 2f       	mov	r21, r18
    2084:	44 27       	eor	r20, r20
    2086:	33 27       	eor	r19, r19
    2088:	22 27       	eor	r18, r18
    208a:	80 81       	ld	r24, Z
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e0       	ldi	r26, 0x00	; 0
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	dc 01       	movw	r26, r24
    2094:	99 27       	eor	r25, r25
    2096:	88 27       	eor	r24, r24
    2098:	28 0f       	add	r18, r24
    209a:	39 1f       	adc	r19, r25
    209c:	4a 1f       	adc	r20, r26
    209e:	5b 1f       	adc	r21, r27
    20a0:	db 01       	movw	r26, r22
    20a2:	13 96       	adiw	r26, 0x03	; 3
    20a4:	8c 91       	ld	r24, X
    20a6:	13 97       	sbiw	r26, 0x03	; 3
    20a8:	28 0f       	add	r18, r24
    20aa:	31 1d       	adc	r19, r1
    20ac:	41 1d       	adc	r20, r1
    20ae:	51 1d       	adc	r21, r1
    20b0:	12 96       	adiw	r26, 0x02	; 2
    20b2:	8c 91       	ld	r24, X
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a0 e0       	ldi	r26, 0x00	; 0
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	ba 2f       	mov	r27, r26
    20bc:	a9 2f       	mov	r26, r25
    20be:	98 2f       	mov	r25, r24
    20c0:	88 27       	eor	r24, r24
    20c2:	28 0f       	add	r18, r24
    20c4:	39 1f       	adc	r19, r25
    20c6:	4a 1f       	adc	r20, r26
    20c8:	5b 1f       	adc	r21, r27
    20ca:	20 93 89 01 	sts	0x0189, r18
    20ce:	30 93 8a 01 	sts	0x018A, r19
    20d2:	40 93 8b 01 	sts	0x018B, r20
    20d6:	50 93 8c 01 	sts	0x018C, r21
			
				//Ustanowiono po³¹czenie
				Tcp_Status = Established;
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	80 93 76 01 	sts	0x0176, r24
				seq_number+=0x01;
    20e0:	80 91 7a 01 	lds	r24, 0x017A
    20e4:	90 91 7b 01 	lds	r25, 0x017B
    20e8:	a0 91 7c 01 	lds	r26, 0x017C
    20ec:	b0 91 7d 01 	lds	r27, 0x017D
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	a1 1d       	adc	r26, r1
    20f4:	b1 1d       	adc	r27, r1
    20f6:	80 93 7a 01 	sts	0x017A, r24
    20fa:	90 93 7b 01 	sts	0x017B, r25
    20fe:	a0 93 7c 01 	sts	0x017C, r26
    2102:	b0 93 7d 01 	sts	0x017D, r27
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <Tcp_Open_Pasive+0x22e>
		RTLsend_packet();
		
		//Czekanie na segment TCP z potwierdzeniem
		uint8_t i=0x00;
		
		for(i=0x00; i<10; i++) { //Je¿eli nie bêdzie ACK w 10 nastêpnych pakietach po³¹czenie nie zostanie ustanowione
    2108:	0f 5f       	subi	r16, 0xFF	; 255
    210a:	0a 30       	cpi	r16, 0x0A	; 10
    210c:	08 f4       	brcc	.+2      	; 0x2110 <Tcp_Open_Pasive+0x22e>
    210e:	90 cf       	rjmp	.-224    	; 0x2030 <Tcp_Open_Pasive+0x14e>
				break;
			}
		}
		
	}
}
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	cf 90       	pop	r12
    2120:	bf 90       	pop	r11
    2122:	af 90       	pop	r10
    2124:	9f 90       	pop	r9
    2126:	8f 90       	pop	r8
    2128:	08 95       	ret

0000212a <Tcp_Check>:
		}
	}
	}
}
	
void Tcp_Check(uint16_t port) {
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	8c 01       	movw	r16, r24
	
	//Nas³uch na porcie
	Tcp_Open_Pasive(port);
    2130:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Tcp_Open_Pasive>
	//Zamkniêcie po³¹czenia na porcie 
	Tcp_Fin_Pasive(port);
    2134:	c8 01       	movw	r24, r16
    2136:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <Tcp_Fin_Pasive>
		Tcp_Send_Data(port,0x03);
		EthFrame[14+20+20] = 0x0d;
		EthFrame[14+20+21] = 0x0a;
		Tcp_Send_Data(port,0x02);
	}*/
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	08 95       	ret

00002140 <Http_Check>:
#include "protocols/_all_protocols.h"
#include "page_data.h"

#include "RTL8019as.h"

void Http_Check(void) {
    2140:	ef 92       	push	r14
    2142:	ff 92       	push	r15
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
	//while(RTLreceive_packet()!=0x01) {}
	if(EthFrame[HttpData+0] == 'G' && EthFrame[HttpData+1] == 'E' && EthFrame[HttpData+2] == 'T'
    2148:	80 91 36 11 	lds	r24, 0x1136
    214c:	87 34       	cpi	r24, 0x47	; 71
    214e:	b1 f5       	brne	.+108    	; 0x21bc <Http_Check+0x7c>
    2150:	80 91 37 11 	lds	r24, 0x1137
    2154:	85 34       	cpi	r24, 0x45	; 69
    2156:	91 f5       	brne	.+100    	; 0x21bc <Http_Check+0x7c>
    2158:	80 91 38 11 	lds	r24, 0x1138
    215c:	84 35       	cpi	r24, 0x54	; 84
    215e:	71 f5       	brne	.+92     	; 0x21bc <Http_Check+0x7c>
    2160:	80 91 76 01 	lds	r24, 0x0176
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	51 f5       	brne	.+84     	; 0x21bc <Http_Check+0x7c>
		&& Tcp_Status == Established) {
		Tcp_Send_Ack(0x1F90);
    2168:	80 e9       	ldi	r24, 0x90	; 144
    216a:	9f e1       	ldi	r25, 0x1F	; 31
    216c:	0e 94 8f 09 	call	0x131e	; 0x131e <Tcp_Send_Ack>
		
		strcpy_P(&EthFrame[14+20+20],content);
    2170:	0f 2e       	mov	r0, r31
    2172:	f6 e3       	ldi	r31, 0x36	; 54
    2174:	ef 2e       	mov	r14, r31
    2176:	f1 e1       	ldi	r31, 0x11	; 17
    2178:	ff 2e       	mov	r15, r31
    217a:	f0 2d       	mov	r31, r0
    217c:	00 e7       	ldi	r16, 0x70	; 112
    217e:	10 e0       	ldi	r17, 0x00	; 0
    2180:	c7 01       	movw	r24, r14
    2182:	b8 01       	movw	r22, r16
    2184:	0e 94 00 11 	call	0x2200	; 0x2200 <strcpy_P>
		Tcp_Send_Data(0x1F90, strlen_P(content));
    2188:	c8 01       	movw	r24, r16
    218a:	0e 94 07 11 	call	0x220e	; 0x220e <strlen_P>
    218e:	bc 01       	movw	r22, r24
    2190:	80 e9       	ldi	r24, 0x90	; 144
    2192:	9f e1       	ldi	r25, 0x1F	; 31
    2194:	0e 94 17 09 	call	0x122e	; 0x122e <Tcp_Send_Data>
		
		strcpy_P(&EthFrame[14+20+20],index1);
    2198:	0d e9       	ldi	r16, 0x9D	; 157
    219a:	10 e0       	ldi	r17, 0x00	; 0
    219c:	c7 01       	movw	r24, r14
    219e:	b8 01       	movw	r22, r16
    21a0:	0e 94 00 11 	call	0x2200	; 0x2200 <strcpy_P>
		Tcp_Send_Data(0x1F90, strlen_P(index1));
    21a4:	c8 01       	movw	r24, r16
    21a6:	0e 94 07 11 	call	0x220e	; 0x220e <strlen_P>
    21aa:	bc 01       	movw	r22, r24
    21ac:	80 e9       	ldi	r24, 0x90	; 144
    21ae:	9f e1       	ldi	r25, 0x1F	; 31
    21b0:	0e 94 17 09 	call	0x122e	; 0x122e <Tcp_Send_Data>
		
		Tcp_Fin_Http(0x1F90);
    21b4:	80 e9       	ldi	r24, 0x90	; 144
    21b6:	9f e1       	ldi	r25, 0x1F	; 31
    21b8:	0e 94 14 0a 	call	0x1428	; 0x1428 <Tcp_Fin_Http>
	}
}
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	08 95       	ret

000021c6 <strcopy>:
//Zbiór funkcji dzia³aj¹cych na pamiêci zewnêtrznej

void strcopy(char *d, char *s) {
    21c6:	dc 01       	movw	r26, r24
    21c8:	fb 01       	movw	r30, r22
	while(*d++ = *s++);
    21ca:	81 91       	ld	r24, Z+
    21cc:	8d 93       	st	X+, r24
    21ce:	88 23       	and	r24, r24
    21d0:	e1 f7       	brne	.-8      	; 0x21ca <strcopy+0x4>
}
    21d2:	08 95       	ret

000021d4 <strleng>:

int strleng(unsigned char *s) {
    21d4:	dc 01       	movw	r26, r24
	int n=0;
	while(*s++) {
    21d6:	8c 91       	ld	r24, X
    21d8:	88 23       	and	r24, r24
    21da:	19 f4       	brne	.+6      	; 0x21e2 <strleng+0xe>
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	0a c0       	rjmp	.+20     	; 0x21f6 <strleng+0x22>
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
		n++;
    21e6:	2f 5f       	subi	r18, 0xFF	; 255
    21e8:	3f 4f       	sbci	r19, 0xFF	; 255
	while(*d++ = *s++);
}

int strleng(unsigned char *s) {
	int n=0;
	while(*s++) {
    21ea:	fd 01       	movw	r30, r26
    21ec:	e2 0f       	add	r30, r18
    21ee:	f3 1f       	adc	r31, r19
    21f0:	80 81       	ld	r24, Z
    21f2:	88 23       	and	r24, r24
    21f4:	c1 f7       	brne	.-16     	; 0x21e6 <strleng+0x12>
    21f6:	2f 5f       	subi	r18, 0xFF	; 255
    21f8:	3f 4f       	sbci	r19, 0xFF	; 255
		n++;
	}
	return ++n;
    21fa:	82 2f       	mov	r24, r18
    21fc:	93 2f       	mov	r25, r19
    21fe:	08 95       	ret

00002200 <strcpy_P>:
    2200:	fb 01       	movw	r30, r22
    2202:	dc 01       	movw	r26, r24
    2204:	05 90       	lpm	r0, Z+
    2206:	0d 92       	st	X+, r0
    2208:	00 20       	and	r0, r0
    220a:	e1 f7       	brne	.-8      	; 0x2204 <strcpy_P+0x4>
    220c:	08 95       	ret

0000220e <strlen_P>:
    220e:	fc 01       	movw	r30, r24
    2210:	05 90       	lpm	r0, Z+
    2212:	00 20       	and	r0, r0
    2214:	e9 f7       	brne	.-6      	; 0x2210 <strlen_P+0x2>
    2216:	80 95       	com	r24
    2218:	90 95       	com	r25
    221a:	8e 0f       	add	r24, r30
    221c:	9f 1f       	adc	r25, r31
    221e:	08 95       	ret

00002220 <fdevopen>:
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	8c 01       	movw	r16, r24
    222a:	eb 01       	movw	r28, r22
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	31 f4       	brne	.+12     	; 0x223c <fdevopen+0x1c>
    2230:	61 15       	cp	r22, r1
    2232:	71 05       	cpc	r23, r1
    2234:	19 f4       	brne	.+6      	; 0x223c <fdevopen+0x1c>
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	38 c0       	rjmp	.+112    	; 0x22ac <fdevopen+0x8c>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	6e e0       	ldi	r22, 0x0E	; 14
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	0e 94 8a 13 	call	0x2714	; 0x2714 <calloc>
    2248:	fc 01       	movw	r30, r24
    224a:	9c 01       	movw	r18, r24
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	71 f1       	breq	.+92     	; 0x22ac <fdevopen+0x8c>
    2250:	80 e8       	ldi	r24, 0x80	; 128
    2252:	83 83       	std	Z+3, r24	; 0x03
    2254:	20 97       	sbiw	r28, 0x00	; 0
    2256:	71 f0       	breq	.+28     	; 0x2274 <fdevopen+0x54>
    2258:	d3 87       	std	Z+11, r29	; 0x0b
    225a:	c2 87       	std	Z+10, r28	; 0x0a
    225c:	81 e8       	ldi	r24, 0x81	; 129
    225e:	83 83       	std	Z+3, r24	; 0x03
    2260:	80 91 9b 01 	lds	r24, 0x019B
    2264:	90 91 9c 01 	lds	r25, 0x019C
    2268:	89 2b       	or	r24, r25
    226a:	21 f4       	brne	.+8      	; 0x2274 <fdevopen+0x54>
    226c:	f0 93 9c 01 	sts	0x019C, r31
    2270:	e0 93 9b 01 	sts	0x019B, r30
    2274:	01 15       	cp	r16, r1
    2276:	11 05       	cpc	r17, r1
    2278:	c9 f0       	breq	.+50     	; 0x22ac <fdevopen+0x8c>
    227a:	11 87       	std	Z+9, r17	; 0x09
    227c:	00 87       	std	Z+8, r16	; 0x08
    227e:	83 81       	ldd	r24, Z+3	; 0x03
    2280:	82 60       	ori	r24, 0x02	; 2
    2282:	83 83       	std	Z+3, r24	; 0x03
    2284:	80 91 9d 01 	lds	r24, 0x019D
    2288:	90 91 9e 01 	lds	r25, 0x019E
    228c:	89 2b       	or	r24, r25
    228e:	71 f4       	brne	.+28     	; 0x22ac <fdevopen+0x8c>
    2290:	f0 93 9e 01 	sts	0x019E, r31
    2294:	e0 93 9d 01 	sts	0x019D, r30
    2298:	80 91 9f 01 	lds	r24, 0x019F
    229c:	90 91 a0 01 	lds	r25, 0x01A0
    22a0:	89 2b       	or	r24, r25
    22a2:	21 f4       	brne	.+8      	; 0x22ac <fdevopen+0x8c>
    22a4:	f0 93 a0 01 	sts	0x01A0, r31
    22a8:	e0 93 9f 01 	sts	0x019F, r30
    22ac:	c9 01       	movw	r24, r18
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	08 95       	ret

000022b8 <printf>:
    22b8:	a0 e0       	ldi	r26, 0x00	; 0
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e2 e6       	ldi	r30, 0x62	; 98
    22be:	f1 e1       	ldi	r31, 0x11	; 17
    22c0:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__prologue_saves__+0x20>
    22c4:	fe 01       	movw	r30, r28
    22c6:	35 96       	adiw	r30, 0x05	; 5
    22c8:	61 91       	ld	r22, Z+
    22ca:	71 91       	ld	r23, Z+
    22cc:	80 91 9d 01 	lds	r24, 0x019D
    22d0:	90 91 9e 01 	lds	r25, 0x019E
    22d4:	af 01       	movw	r20, r30
    22d6:	0e 94 ad 11 	call	0x235a	; 0x235a <vfprintf>
    22da:	20 96       	adiw	r28, 0x00	; 0
    22dc:	e2 e0       	ldi	r30, 0x02	; 2
    22de:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x20>

000022e2 <putchar>:
    22e2:	60 91 9d 01 	lds	r22, 0x019D
    22e6:	70 91 9e 01 	lds	r23, 0x019E
    22ea:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    22ee:	08 95       	ret

000022f0 <puts>:
    22f0:	0f 93       	push	r16
    22f2:	1f 93       	push	r17
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	8c 01       	movw	r16, r24
    22fa:	e0 91 9d 01 	lds	r30, 0x019D
    22fe:	f0 91 9e 01 	lds	r31, 0x019E
    2302:	83 81       	ldd	r24, Z+3	; 0x03
    2304:	81 ff       	sbrs	r24, 1
    2306:	21 c0       	rjmp	.+66     	; 0x234a <puts+0x5a>
    2308:	c0 e0       	ldi	r28, 0x00	; 0
    230a:	d0 e0       	ldi	r29, 0x00	; 0
    230c:	0d c0       	rjmp	.+26     	; 0x2328 <puts+0x38>
    230e:	e0 91 9d 01 	lds	r30, 0x019D
    2312:	f0 91 9e 01 	lds	r31, 0x019E
    2316:	20 85       	ldd	r18, Z+8	; 0x08
    2318:	31 85       	ldd	r19, Z+9	; 0x09
    231a:	bf 01       	movw	r22, r30
    231c:	f9 01       	movw	r30, r18
    231e:	09 95       	icall
    2320:	89 2b       	or	r24, r25
    2322:	11 f0       	breq	.+4      	; 0x2328 <puts+0x38>
    2324:	cf ef       	ldi	r28, 0xFF	; 255
    2326:	df ef       	ldi	r29, 0xFF	; 255
    2328:	f8 01       	movw	r30, r16
    232a:	81 91       	ld	r24, Z+
    232c:	8f 01       	movw	r16, r30
    232e:	88 23       	and	r24, r24
    2330:	71 f7       	brne	.-36     	; 0x230e <puts+0x1e>
    2332:	e0 91 9d 01 	lds	r30, 0x019D
    2336:	f0 91 9e 01 	lds	r31, 0x019E
    233a:	20 85       	ldd	r18, Z+8	; 0x08
    233c:	31 85       	ldd	r19, Z+9	; 0x09
    233e:	8a e0       	ldi	r24, 0x0A	; 10
    2340:	bf 01       	movw	r22, r30
    2342:	f9 01       	movw	r30, r18
    2344:	09 95       	icall
    2346:	89 2b       	or	r24, r25
    2348:	11 f0       	breq	.+4      	; 0x234e <puts+0x5e>
    234a:	cf ef       	ldi	r28, 0xFF	; 255
    234c:	df ef       	ldi	r29, 0xFF	; 255
    234e:	ce 01       	movw	r24, r28
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret

0000235a <vfprintf>:
    235a:	ab e0       	ldi	r26, 0x0B	; 11
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e3 eb       	ldi	r30, 0xB3	; 179
    2360:	f1 e1       	ldi	r31, 0x11	; 17
    2362:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__>
    2366:	3c 01       	movw	r6, r24
    2368:	2b 01       	movw	r4, r22
    236a:	5a 01       	movw	r10, r20
    236c:	fc 01       	movw	r30, r24
    236e:	17 82       	std	Z+7, r1	; 0x07
    2370:	16 82       	std	Z+6, r1	; 0x06
    2372:	83 81       	ldd	r24, Z+3	; 0x03
    2374:	81 fd       	sbrc	r24, 1
    2376:	03 c0       	rjmp	.+6      	; 0x237e <vfprintf+0x24>
    2378:	6f ef       	ldi	r22, 0xFF	; 255
    237a:	7f ef       	ldi	r23, 0xFF	; 255
    237c:	c6 c1       	rjmp	.+908    	; 0x270a <vfprintf+0x3b0>
    237e:	9a e0       	ldi	r25, 0x0A	; 10
    2380:	89 2e       	mov	r8, r25
    2382:	1e 01       	movw	r2, r28
    2384:	08 94       	sec
    2386:	21 1c       	adc	r2, r1
    2388:	31 1c       	adc	r3, r1
    238a:	f3 01       	movw	r30, r6
    238c:	23 81       	ldd	r18, Z+3	; 0x03
    238e:	f2 01       	movw	r30, r4
    2390:	23 fd       	sbrc	r18, 3
    2392:	85 91       	lpm	r24, Z+
    2394:	23 ff       	sbrs	r18, 3
    2396:	81 91       	ld	r24, Z+
    2398:	2f 01       	movw	r4, r30
    239a:	88 23       	and	r24, r24
    239c:	09 f4       	brne	.+2      	; 0x23a0 <vfprintf+0x46>
    239e:	b2 c1       	rjmp	.+868    	; 0x2704 <vfprintf+0x3aa>
    23a0:	85 32       	cpi	r24, 0x25	; 37
    23a2:	39 f4       	brne	.+14     	; 0x23b2 <vfprintf+0x58>
    23a4:	23 fd       	sbrc	r18, 3
    23a6:	85 91       	lpm	r24, Z+
    23a8:	23 ff       	sbrs	r18, 3
    23aa:	81 91       	ld	r24, Z+
    23ac:	2f 01       	movw	r4, r30
    23ae:	85 32       	cpi	r24, 0x25	; 37
    23b0:	29 f4       	brne	.+10     	; 0x23bc <vfprintf+0x62>
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	b3 01       	movw	r22, r6
    23b6:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    23ba:	e7 cf       	rjmp	.-50     	; 0x238a <vfprintf+0x30>
    23bc:	98 2f       	mov	r25, r24
    23be:	ff 24       	eor	r15, r15
    23c0:	ee 24       	eor	r14, r14
    23c2:	99 24       	eor	r9, r9
    23c4:	ff e1       	ldi	r31, 0x1F	; 31
    23c6:	ff 15       	cp	r31, r15
    23c8:	d0 f0       	brcs	.+52     	; 0x23fe <vfprintf+0xa4>
    23ca:	9b 32       	cpi	r25, 0x2B	; 43
    23cc:	69 f0       	breq	.+26     	; 0x23e8 <vfprintf+0x8e>
    23ce:	9c 32       	cpi	r25, 0x2C	; 44
    23d0:	28 f4       	brcc	.+10     	; 0x23dc <vfprintf+0x82>
    23d2:	90 32       	cpi	r25, 0x20	; 32
    23d4:	59 f0       	breq	.+22     	; 0x23ec <vfprintf+0x92>
    23d6:	93 32       	cpi	r25, 0x23	; 35
    23d8:	91 f4       	brne	.+36     	; 0x23fe <vfprintf+0xa4>
    23da:	0e c0       	rjmp	.+28     	; 0x23f8 <vfprintf+0x9e>
    23dc:	9d 32       	cpi	r25, 0x2D	; 45
    23de:	49 f0       	breq	.+18     	; 0x23f2 <vfprintf+0x98>
    23e0:	90 33       	cpi	r25, 0x30	; 48
    23e2:	69 f4       	brne	.+26     	; 0x23fe <vfprintf+0xa4>
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	24 c0       	rjmp	.+72     	; 0x2430 <vfprintf+0xd6>
    23e8:	52 e0       	ldi	r21, 0x02	; 2
    23ea:	f5 2a       	or	r15, r21
    23ec:	84 e0       	ldi	r24, 0x04	; 4
    23ee:	f8 2a       	or	r15, r24
    23f0:	28 c0       	rjmp	.+80     	; 0x2442 <vfprintf+0xe8>
    23f2:	98 e0       	ldi	r25, 0x08	; 8
    23f4:	f9 2a       	or	r15, r25
    23f6:	25 c0       	rjmp	.+74     	; 0x2442 <vfprintf+0xe8>
    23f8:	e0 e1       	ldi	r30, 0x10	; 16
    23fa:	fe 2a       	or	r15, r30
    23fc:	22 c0       	rjmp	.+68     	; 0x2442 <vfprintf+0xe8>
    23fe:	f7 fc       	sbrc	r15, 7
    2400:	29 c0       	rjmp	.+82     	; 0x2454 <vfprintf+0xfa>
    2402:	89 2f       	mov	r24, r25
    2404:	80 53       	subi	r24, 0x30	; 48
    2406:	8a 30       	cpi	r24, 0x0A	; 10
    2408:	70 f4       	brcc	.+28     	; 0x2426 <vfprintf+0xcc>
    240a:	f6 fe       	sbrs	r15, 6
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <vfprintf+0xbe>
    240e:	98 9c       	mul	r9, r8
    2410:	90 2c       	mov	r9, r0
    2412:	11 24       	eor	r1, r1
    2414:	98 0e       	add	r9, r24
    2416:	15 c0       	rjmp	.+42     	; 0x2442 <vfprintf+0xe8>
    2418:	e8 9c       	mul	r14, r8
    241a:	e0 2c       	mov	r14, r0
    241c:	11 24       	eor	r1, r1
    241e:	e8 0e       	add	r14, r24
    2420:	f0 e2       	ldi	r31, 0x20	; 32
    2422:	ff 2a       	or	r15, r31
    2424:	0e c0       	rjmp	.+28     	; 0x2442 <vfprintf+0xe8>
    2426:	9e 32       	cpi	r25, 0x2E	; 46
    2428:	29 f4       	brne	.+10     	; 0x2434 <vfprintf+0xda>
    242a:	f6 fc       	sbrc	r15, 6
    242c:	6b c1       	rjmp	.+726    	; 0x2704 <vfprintf+0x3aa>
    242e:	40 e4       	ldi	r20, 0x40	; 64
    2430:	f4 2a       	or	r15, r20
    2432:	07 c0       	rjmp	.+14     	; 0x2442 <vfprintf+0xe8>
    2434:	9c 36       	cpi	r25, 0x6C	; 108
    2436:	19 f4       	brne	.+6      	; 0x243e <vfprintf+0xe4>
    2438:	50 e8       	ldi	r21, 0x80	; 128
    243a:	f5 2a       	or	r15, r21
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <vfprintf+0xe8>
    243e:	98 36       	cpi	r25, 0x68	; 104
    2440:	49 f4       	brne	.+18     	; 0x2454 <vfprintf+0xfa>
    2442:	f2 01       	movw	r30, r4
    2444:	23 fd       	sbrc	r18, 3
    2446:	95 91       	lpm	r25, Z+
    2448:	23 ff       	sbrs	r18, 3
    244a:	91 91       	ld	r25, Z+
    244c:	2f 01       	movw	r4, r30
    244e:	99 23       	and	r25, r25
    2450:	09 f0       	breq	.+2      	; 0x2454 <vfprintf+0xfa>
    2452:	b8 cf       	rjmp	.-144    	; 0x23c4 <vfprintf+0x6a>
    2454:	89 2f       	mov	r24, r25
    2456:	85 54       	subi	r24, 0x45	; 69
    2458:	83 30       	cpi	r24, 0x03	; 3
    245a:	18 f0       	brcs	.+6      	; 0x2462 <vfprintf+0x108>
    245c:	80 52       	subi	r24, 0x20	; 32
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	38 f4       	brcc	.+14     	; 0x2470 <vfprintf+0x116>
    2462:	44 e0       	ldi	r20, 0x04	; 4
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	a4 0e       	add	r10, r20
    2468:	b5 1e       	adc	r11, r21
    246a:	5f e3       	ldi	r21, 0x3F	; 63
    246c:	59 83       	std	Y+1, r21	; 0x01
    246e:	0f c0       	rjmp	.+30     	; 0x248e <vfprintf+0x134>
    2470:	93 36       	cpi	r25, 0x63	; 99
    2472:	31 f0       	breq	.+12     	; 0x2480 <vfprintf+0x126>
    2474:	93 37       	cpi	r25, 0x73	; 115
    2476:	79 f0       	breq	.+30     	; 0x2496 <vfprintf+0x13c>
    2478:	93 35       	cpi	r25, 0x53	; 83
    247a:	09 f0       	breq	.+2      	; 0x247e <vfprintf+0x124>
    247c:	56 c0       	rjmp	.+172    	; 0x252a <vfprintf+0x1d0>
    247e:	20 c0       	rjmp	.+64     	; 0x24c0 <vfprintf+0x166>
    2480:	f5 01       	movw	r30, r10
    2482:	80 81       	ld	r24, Z
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	42 e0       	ldi	r20, 0x02	; 2
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	a4 0e       	add	r10, r20
    248c:	b5 1e       	adc	r11, r21
    248e:	61 01       	movw	r12, r2
    2490:	01 e0       	ldi	r16, 0x01	; 1
    2492:	10 e0       	ldi	r17, 0x00	; 0
    2494:	12 c0       	rjmp	.+36     	; 0x24ba <vfprintf+0x160>
    2496:	f5 01       	movw	r30, r10
    2498:	c0 80       	ld	r12, Z
    249a:	d1 80       	ldd	r13, Z+1	; 0x01
    249c:	f6 fc       	sbrc	r15, 6
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <vfprintf+0x14c>
    24a0:	6f ef       	ldi	r22, 0xFF	; 255
    24a2:	7f ef       	ldi	r23, 0xFF	; 255
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <vfprintf+0x150>
    24a6:	69 2d       	mov	r22, r9
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	42 e0       	ldi	r20, 0x02	; 2
    24ac:	50 e0       	ldi	r21, 0x00	; 0
    24ae:	a4 0e       	add	r10, r20
    24b0:	b5 1e       	adc	r11, r21
    24b2:	c6 01       	movw	r24, r12
    24b4:	0e 94 bd 14 	call	0x297a	; 0x297a <strnlen>
    24b8:	8c 01       	movw	r16, r24
    24ba:	5f e7       	ldi	r21, 0x7F	; 127
    24bc:	f5 22       	and	r15, r21
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <vfprintf+0x18e>
    24c0:	f5 01       	movw	r30, r10
    24c2:	c0 80       	ld	r12, Z
    24c4:	d1 80       	ldd	r13, Z+1	; 0x01
    24c6:	f6 fc       	sbrc	r15, 6
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <vfprintf+0x176>
    24ca:	6f ef       	ldi	r22, 0xFF	; 255
    24cc:	7f ef       	ldi	r23, 0xFF	; 255
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <vfprintf+0x17a>
    24d0:	69 2d       	mov	r22, r9
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	42 e0       	ldi	r20, 0x02	; 2
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	a4 0e       	add	r10, r20
    24da:	b5 1e       	adc	r11, r21
    24dc:	c6 01       	movw	r24, r12
    24de:	0e 94 ab 14 	call	0x2956	; 0x2956 <strnlen_P>
    24e2:	8c 01       	movw	r16, r24
    24e4:	50 e8       	ldi	r21, 0x80	; 128
    24e6:	f5 2a       	or	r15, r21
    24e8:	f3 fe       	sbrs	r15, 3
    24ea:	07 c0       	rjmp	.+14     	; 0x24fa <vfprintf+0x1a0>
    24ec:	1a c0       	rjmp	.+52     	; 0x2522 <vfprintf+0x1c8>
    24ee:	80 e2       	ldi	r24, 0x20	; 32
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	b3 01       	movw	r22, r6
    24f4:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    24f8:	ea 94       	dec	r14
    24fa:	8e 2d       	mov	r24, r14
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	08 17       	cp	r16, r24
    2500:	19 07       	cpc	r17, r25
    2502:	a8 f3       	brcs	.-22     	; 0x24ee <vfprintf+0x194>
    2504:	0e c0       	rjmp	.+28     	; 0x2522 <vfprintf+0x1c8>
    2506:	f6 01       	movw	r30, r12
    2508:	f7 fc       	sbrc	r15, 7
    250a:	85 91       	lpm	r24, Z+
    250c:	f7 fe       	sbrs	r15, 7
    250e:	81 91       	ld	r24, Z+
    2510:	6f 01       	movw	r12, r30
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	b3 01       	movw	r22, r6
    2516:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    251a:	e1 10       	cpse	r14, r1
    251c:	ea 94       	dec	r14
    251e:	01 50       	subi	r16, 0x01	; 1
    2520:	10 40       	sbci	r17, 0x00	; 0
    2522:	01 15       	cp	r16, r1
    2524:	11 05       	cpc	r17, r1
    2526:	79 f7       	brne	.-34     	; 0x2506 <vfprintf+0x1ac>
    2528:	ea c0       	rjmp	.+468    	; 0x26fe <vfprintf+0x3a4>
    252a:	94 36       	cpi	r25, 0x64	; 100
    252c:	11 f0       	breq	.+4      	; 0x2532 <vfprintf+0x1d8>
    252e:	99 36       	cpi	r25, 0x69	; 105
    2530:	69 f5       	brne	.+90     	; 0x258c <vfprintf+0x232>
    2532:	f7 fe       	sbrs	r15, 7
    2534:	08 c0       	rjmp	.+16     	; 0x2546 <vfprintf+0x1ec>
    2536:	f5 01       	movw	r30, r10
    2538:	20 81       	ld	r18, Z
    253a:	31 81       	ldd	r19, Z+1	; 0x01
    253c:	42 81       	ldd	r20, Z+2	; 0x02
    253e:	53 81       	ldd	r21, Z+3	; 0x03
    2540:	84 e0       	ldi	r24, 0x04	; 4
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0a c0       	rjmp	.+20     	; 0x255a <vfprintf+0x200>
    2546:	f5 01       	movw	r30, r10
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	9c 01       	movw	r18, r24
    254e:	44 27       	eor	r20, r20
    2550:	37 fd       	sbrc	r19, 7
    2552:	40 95       	com	r20
    2554:	54 2f       	mov	r21, r20
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a8 0e       	add	r10, r24
    255c:	b9 1e       	adc	r11, r25
    255e:	9f e6       	ldi	r25, 0x6F	; 111
    2560:	f9 22       	and	r15, r25
    2562:	57 ff       	sbrs	r21, 7
    2564:	09 c0       	rjmp	.+18     	; 0x2578 <vfprintf+0x21e>
    2566:	50 95       	com	r21
    2568:	40 95       	com	r20
    256a:	30 95       	com	r19
    256c:	21 95       	neg	r18
    256e:	3f 4f       	sbci	r19, 0xFF	; 255
    2570:	4f 4f       	sbci	r20, 0xFF	; 255
    2572:	5f 4f       	sbci	r21, 0xFF	; 255
    2574:	e0 e8       	ldi	r30, 0x80	; 128
    2576:	fe 2a       	or	r15, r30
    2578:	ca 01       	movw	r24, r20
    257a:	b9 01       	movw	r22, r18
    257c:	a1 01       	movw	r20, r2
    257e:	2a e0       	ldi	r18, 0x0A	; 10
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__ultoa_invert>
    2586:	d8 2e       	mov	r13, r24
    2588:	d2 18       	sub	r13, r2
    258a:	40 c0       	rjmp	.+128    	; 0x260c <vfprintf+0x2b2>
    258c:	95 37       	cpi	r25, 0x75	; 117
    258e:	29 f4       	brne	.+10     	; 0x259a <vfprintf+0x240>
    2590:	1f 2d       	mov	r17, r15
    2592:	1f 7e       	andi	r17, 0xEF	; 239
    2594:	2a e0       	ldi	r18, 0x0A	; 10
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	1d c0       	rjmp	.+58     	; 0x25d4 <vfprintf+0x27a>
    259a:	1f 2d       	mov	r17, r15
    259c:	19 7f       	andi	r17, 0xF9	; 249
    259e:	9f 36       	cpi	r25, 0x6F	; 111
    25a0:	61 f0       	breq	.+24     	; 0x25ba <vfprintf+0x260>
    25a2:	90 37       	cpi	r25, 0x70	; 112
    25a4:	20 f4       	brcc	.+8      	; 0x25ae <vfprintf+0x254>
    25a6:	98 35       	cpi	r25, 0x58	; 88
    25a8:	09 f0       	breq	.+2      	; 0x25ac <vfprintf+0x252>
    25aa:	ac c0       	rjmp	.+344    	; 0x2704 <vfprintf+0x3aa>
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <vfprintf+0x272>
    25ae:	90 37       	cpi	r25, 0x70	; 112
    25b0:	39 f0       	breq	.+14     	; 0x25c0 <vfprintf+0x266>
    25b2:	98 37       	cpi	r25, 0x78	; 120
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <vfprintf+0x25e>
    25b6:	a6 c0       	rjmp	.+332    	; 0x2704 <vfprintf+0x3aa>
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <vfprintf+0x268>
    25ba:	28 e0       	ldi	r18, 0x08	; 8
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	0a c0       	rjmp	.+20     	; 0x25d4 <vfprintf+0x27a>
    25c0:	10 61       	ori	r17, 0x10	; 16
    25c2:	14 fd       	sbrc	r17, 4
    25c4:	14 60       	ori	r17, 0x04	; 4
    25c6:	20 e1       	ldi	r18, 0x10	; 16
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	04 c0       	rjmp	.+8      	; 0x25d4 <vfprintf+0x27a>
    25cc:	14 fd       	sbrc	r17, 4
    25ce:	16 60       	ori	r17, 0x06	; 6
    25d0:	20 e1       	ldi	r18, 0x10	; 16
    25d2:	32 e0       	ldi	r19, 0x02	; 2
    25d4:	17 ff       	sbrs	r17, 7
    25d6:	08 c0       	rjmp	.+16     	; 0x25e8 <vfprintf+0x28e>
    25d8:	f5 01       	movw	r30, r10
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	44 e0       	ldi	r20, 0x04	; 4
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <vfprintf+0x29e>
    25e8:	f5 01       	movw	r30, r10
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	bc 01       	movw	r22, r24
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	42 e0       	ldi	r20, 0x02	; 2
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	a4 0e       	add	r10, r20
    25fa:	b5 1e       	adc	r11, r21
    25fc:	a1 01       	movw	r20, r2
    25fe:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__ultoa_invert>
    2602:	d8 2e       	mov	r13, r24
    2604:	d2 18       	sub	r13, r2
    2606:	8f e7       	ldi	r24, 0x7F	; 127
    2608:	f8 2e       	mov	r15, r24
    260a:	f1 22       	and	r15, r17
    260c:	f6 fe       	sbrs	r15, 6
    260e:	0b c0       	rjmp	.+22     	; 0x2626 <vfprintf+0x2cc>
    2610:	5e ef       	ldi	r21, 0xFE	; 254
    2612:	f5 22       	and	r15, r21
    2614:	d9 14       	cp	r13, r9
    2616:	38 f4       	brcc	.+14     	; 0x2626 <vfprintf+0x2cc>
    2618:	f4 fe       	sbrs	r15, 4
    261a:	07 c0       	rjmp	.+14     	; 0x262a <vfprintf+0x2d0>
    261c:	f2 fc       	sbrc	r15, 2
    261e:	05 c0       	rjmp	.+10     	; 0x262a <vfprintf+0x2d0>
    2620:	8f ee       	ldi	r24, 0xEF	; 239
    2622:	f8 22       	and	r15, r24
    2624:	02 c0       	rjmp	.+4      	; 0x262a <vfprintf+0x2d0>
    2626:	1d 2d       	mov	r17, r13
    2628:	01 c0       	rjmp	.+2      	; 0x262c <vfprintf+0x2d2>
    262a:	19 2d       	mov	r17, r9
    262c:	f4 fe       	sbrs	r15, 4
    262e:	0d c0       	rjmp	.+26     	; 0x264a <vfprintf+0x2f0>
    2630:	fe 01       	movw	r30, r28
    2632:	ed 0d       	add	r30, r13
    2634:	f1 1d       	adc	r31, r1
    2636:	80 81       	ld	r24, Z
    2638:	80 33       	cpi	r24, 0x30	; 48
    263a:	19 f4       	brne	.+6      	; 0x2642 <vfprintf+0x2e8>
    263c:	99 ee       	ldi	r25, 0xE9	; 233
    263e:	f9 22       	and	r15, r25
    2640:	08 c0       	rjmp	.+16     	; 0x2652 <vfprintf+0x2f8>
    2642:	1f 5f       	subi	r17, 0xFF	; 255
    2644:	f2 fe       	sbrs	r15, 2
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <vfprintf+0x2f8>
    2648:	03 c0       	rjmp	.+6      	; 0x2650 <vfprintf+0x2f6>
    264a:	8f 2d       	mov	r24, r15
    264c:	86 78       	andi	r24, 0x86	; 134
    264e:	09 f0       	breq	.+2      	; 0x2652 <vfprintf+0x2f8>
    2650:	1f 5f       	subi	r17, 0xFF	; 255
    2652:	0f 2d       	mov	r16, r15
    2654:	f3 fc       	sbrc	r15, 3
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <vfprintf+0x326>
    2658:	f0 fe       	sbrs	r15, 0
    265a:	0f c0       	rjmp	.+30     	; 0x267a <vfprintf+0x320>
    265c:	1e 15       	cp	r17, r14
    265e:	10 f0       	brcs	.+4      	; 0x2664 <vfprintf+0x30a>
    2660:	9d 2c       	mov	r9, r13
    2662:	0b c0       	rjmp	.+22     	; 0x267a <vfprintf+0x320>
    2664:	9d 2c       	mov	r9, r13
    2666:	9e 0c       	add	r9, r14
    2668:	91 1a       	sub	r9, r17
    266a:	1e 2d       	mov	r17, r14
    266c:	06 c0       	rjmp	.+12     	; 0x267a <vfprintf+0x320>
    266e:	80 e2       	ldi	r24, 0x20	; 32
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	b3 01       	movw	r22, r6
    2674:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    2678:	1f 5f       	subi	r17, 0xFF	; 255
    267a:	1e 15       	cp	r17, r14
    267c:	c0 f3       	brcs	.-16     	; 0x266e <vfprintf+0x314>
    267e:	04 c0       	rjmp	.+8      	; 0x2688 <vfprintf+0x32e>
    2680:	1e 15       	cp	r17, r14
    2682:	10 f4       	brcc	.+4      	; 0x2688 <vfprintf+0x32e>
    2684:	e1 1a       	sub	r14, r17
    2686:	01 c0       	rjmp	.+2      	; 0x268a <vfprintf+0x330>
    2688:	ee 24       	eor	r14, r14
    268a:	04 ff       	sbrs	r16, 4
    268c:	0f c0       	rjmp	.+30     	; 0x26ac <vfprintf+0x352>
    268e:	80 e3       	ldi	r24, 0x30	; 48
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	b3 01       	movw	r22, r6
    2694:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    2698:	02 ff       	sbrs	r16, 2
    269a:	1d c0       	rjmp	.+58     	; 0x26d6 <vfprintf+0x37c>
    269c:	01 fd       	sbrc	r16, 1
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <vfprintf+0x34c>
    26a0:	88 e7       	ldi	r24, 0x78	; 120
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e c0       	rjmp	.+28     	; 0x26c2 <vfprintf+0x368>
    26a6:	88 e5       	ldi	r24, 0x58	; 88
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0b c0       	rjmp	.+22     	; 0x26c2 <vfprintf+0x368>
    26ac:	80 2f       	mov	r24, r16
    26ae:	86 78       	andi	r24, 0x86	; 134
    26b0:	91 f0       	breq	.+36     	; 0x26d6 <vfprintf+0x37c>
    26b2:	01 ff       	sbrs	r16, 1
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <vfprintf+0x360>
    26b6:	8b e2       	ldi	r24, 0x2B	; 43
    26b8:	01 c0       	rjmp	.+2      	; 0x26bc <vfprintf+0x362>
    26ba:	80 e2       	ldi	r24, 0x20	; 32
    26bc:	f7 fc       	sbrc	r15, 7
    26be:	8d e2       	ldi	r24, 0x2D	; 45
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	b3 01       	movw	r22, r6
    26c4:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    26c8:	06 c0       	rjmp	.+12     	; 0x26d6 <vfprintf+0x37c>
    26ca:	80 e3       	ldi	r24, 0x30	; 48
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	b3 01       	movw	r22, r6
    26d0:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    26d4:	9a 94       	dec	r9
    26d6:	d9 14       	cp	r13, r9
    26d8:	c0 f3       	brcs	.-16     	; 0x26ca <vfprintf+0x370>
    26da:	da 94       	dec	r13
    26dc:	f1 01       	movw	r30, r2
    26de:	ed 0d       	add	r30, r13
    26e0:	f1 1d       	adc	r31, r1
    26e2:	80 81       	ld	r24, Z
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	b3 01       	movw	r22, r6
    26e8:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    26ec:	dd 20       	and	r13, r13
    26ee:	a9 f7       	brne	.-22     	; 0x26da <vfprintf+0x380>
    26f0:	06 c0       	rjmp	.+12     	; 0x26fe <vfprintf+0x3a4>
    26f2:	80 e2       	ldi	r24, 0x20	; 32
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	b3 01       	movw	r22, r6
    26f8:	0e 94 c8 14 	call	0x2990	; 0x2990 <fputc>
    26fc:	ea 94       	dec	r14
    26fe:	ee 20       	and	r14, r14
    2700:	c1 f7       	brne	.-16     	; 0x26f2 <vfprintf+0x398>
    2702:	43 ce       	rjmp	.-890    	; 0x238a <vfprintf+0x30>
    2704:	f3 01       	movw	r30, r6
    2706:	66 81       	ldd	r22, Z+6	; 0x06
    2708:	77 81       	ldd	r23, Z+7	; 0x07
    270a:	cb 01       	movw	r24, r22
    270c:	2b 96       	adiw	r28, 0x0b	; 11
    270e:	e2 e1       	ldi	r30, 0x12	; 18
    2710:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__>

00002714 <calloc>:
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	68 9f       	mul	r22, r24
    271e:	80 01       	movw	r16, r0
    2720:	69 9f       	mul	r22, r25
    2722:	10 0d       	add	r17, r0
    2724:	78 9f       	mul	r23, r24
    2726:	10 0d       	add	r17, r0
    2728:	11 24       	eor	r1, r1
    272a:	c8 01       	movw	r24, r16
    272c:	0e 94 a6 13 	call	0x274c	; 0x274c <malloc>
    2730:	ec 01       	movw	r28, r24
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	29 f0       	breq	.+10     	; 0x2740 <calloc+0x2c>
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	70 e0       	ldi	r23, 0x00	; 0
    273a:	a8 01       	movw	r20, r16
    273c:	0e 94 b6 14 	call	0x296c	; 0x296c <memset>
    2740:	ce 01       	movw	r24, r28
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	08 95       	ret

0000274c <malloc>:
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	bc 01       	movw	r22, r24
    2752:	82 30       	cpi	r24, 0x02	; 2
    2754:	91 05       	cpc	r25, r1
    2756:	10 f4       	brcc	.+4      	; 0x275c <malloc+0x10>
    2758:	62 e0       	ldi	r22, 0x02	; 2
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	a0 91 a3 01 	lds	r26, 0x01A3
    2760:	b0 91 a4 01 	lds	r27, 0x01A4
    2764:	ed 01       	movw	r28, r26
    2766:	e0 e0       	ldi	r30, 0x00	; 0
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	21 c0       	rjmp	.+66     	; 0x27b2 <malloc+0x66>
    2770:	88 81       	ld	r24, Y
    2772:	99 81       	ldd	r25, Y+1	; 0x01
    2774:	86 17       	cp	r24, r22
    2776:	97 07       	cpc	r25, r23
    2778:	69 f4       	brne	.+26     	; 0x2794 <malloc+0x48>
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	30 97       	sbiw	r30, 0x00	; 0
    2780:	19 f0       	breq	.+6      	; 0x2788 <malloc+0x3c>
    2782:	93 83       	std	Z+3, r25	; 0x03
    2784:	82 83       	std	Z+2, r24	; 0x02
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <malloc+0x44>
    2788:	90 93 a4 01 	sts	0x01A4, r25
    278c:	80 93 a3 01 	sts	0x01A3, r24
    2790:	fe 01       	movw	r30, r28
    2792:	34 c0       	rjmp	.+104    	; 0x27fc <malloc+0xb0>
    2794:	68 17       	cp	r22, r24
    2796:	79 07       	cpc	r23, r25
    2798:	38 f4       	brcc	.+14     	; 0x27a8 <malloc+0x5c>
    279a:	41 15       	cp	r20, r1
    279c:	51 05       	cpc	r21, r1
    279e:	19 f0       	breq	.+6      	; 0x27a6 <malloc+0x5a>
    27a0:	84 17       	cp	r24, r20
    27a2:	95 07       	cpc	r25, r21
    27a4:	08 f4       	brcc	.+2      	; 0x27a8 <malloc+0x5c>
    27a6:	ac 01       	movw	r20, r24
    27a8:	fe 01       	movw	r30, r28
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	9b 81       	ldd	r25, Y+3	; 0x03
    27ae:	9c 01       	movw	r18, r24
    27b0:	e9 01       	movw	r28, r18
    27b2:	20 97       	sbiw	r28, 0x00	; 0
    27b4:	e9 f6       	brne	.-70     	; 0x2770 <malloc+0x24>
    27b6:	41 15       	cp	r20, r1
    27b8:	51 05       	cpc	r21, r1
    27ba:	a9 f1       	breq	.+106    	; 0x2826 <malloc+0xda>
    27bc:	ca 01       	movw	r24, r20
    27be:	86 1b       	sub	r24, r22
    27c0:	97 0b       	sbc	r25, r23
    27c2:	04 97       	sbiw	r24, 0x04	; 4
    27c4:	08 f4       	brcc	.+2      	; 0x27c8 <malloc+0x7c>
    27c6:	ba 01       	movw	r22, r20
    27c8:	e0 e0       	ldi	r30, 0x00	; 0
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	2a c0       	rjmp	.+84     	; 0x2822 <malloc+0xd6>
    27ce:	8d 91       	ld	r24, X+
    27d0:	9c 91       	ld	r25, X
    27d2:	11 97       	sbiw	r26, 0x01	; 1
    27d4:	84 17       	cp	r24, r20
    27d6:	95 07       	cpc	r25, r21
    27d8:	f9 f4       	brne	.+62     	; 0x2818 <malloc+0xcc>
    27da:	64 17       	cp	r22, r20
    27dc:	75 07       	cpc	r23, r21
    27de:	81 f4       	brne	.+32     	; 0x2800 <malloc+0xb4>
    27e0:	12 96       	adiw	r26, 0x02	; 2
    27e2:	8d 91       	ld	r24, X+
    27e4:	9c 91       	ld	r25, X
    27e6:	13 97       	sbiw	r26, 0x03	; 3
    27e8:	30 97       	sbiw	r30, 0x00	; 0
    27ea:	19 f0       	breq	.+6      	; 0x27f2 <malloc+0xa6>
    27ec:	93 83       	std	Z+3, r25	; 0x03
    27ee:	82 83       	std	Z+2, r24	; 0x02
    27f0:	04 c0       	rjmp	.+8      	; 0x27fa <malloc+0xae>
    27f2:	90 93 a4 01 	sts	0x01A4, r25
    27f6:	80 93 a3 01 	sts	0x01A3, r24
    27fa:	fd 01       	movw	r30, r26
    27fc:	32 96       	adiw	r30, 0x02	; 2
    27fe:	4f c0       	rjmp	.+158    	; 0x289e <malloc+0x152>
    2800:	ca 01       	movw	r24, r20
    2802:	86 1b       	sub	r24, r22
    2804:	97 0b       	sbc	r25, r23
    2806:	fd 01       	movw	r30, r26
    2808:	e8 0f       	add	r30, r24
    280a:	f9 1f       	adc	r31, r25
    280c:	61 93       	st	Z+, r22
    280e:	71 93       	st	Z+, r23
    2810:	02 97       	sbiw	r24, 0x02	; 2
    2812:	8d 93       	st	X+, r24
    2814:	9c 93       	st	X, r25
    2816:	43 c0       	rjmp	.+134    	; 0x289e <malloc+0x152>
    2818:	fd 01       	movw	r30, r26
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	9c 01       	movw	r18, r24
    2820:	d9 01       	movw	r26, r18
    2822:	10 97       	sbiw	r26, 0x00	; 0
    2824:	a1 f6       	brne	.-88     	; 0x27ce <malloc+0x82>
    2826:	80 91 a1 01 	lds	r24, 0x01A1
    282a:	90 91 a2 01 	lds	r25, 0x01A2
    282e:	89 2b       	or	r24, r25
    2830:	41 f4       	brne	.+16     	; 0x2842 <malloc+0xf6>
    2832:	80 91 6f 01 	lds	r24, 0x016F
    2836:	90 91 70 01 	lds	r25, 0x0170
    283a:	90 93 a2 01 	sts	0x01A2, r25
    283e:	80 93 a1 01 	sts	0x01A1, r24
    2842:	40 91 71 01 	lds	r20, 0x0171
    2846:	50 91 72 01 	lds	r21, 0x0172
    284a:	41 15       	cp	r20, r1
    284c:	51 05       	cpc	r21, r1
    284e:	41 f4       	brne	.+16     	; 0x2860 <malloc+0x114>
    2850:	4d b7       	in	r20, 0x3d	; 61
    2852:	5e b7       	in	r21, 0x3e	; 62
    2854:	80 91 6d 01 	lds	r24, 0x016D
    2858:	90 91 6e 01 	lds	r25, 0x016E
    285c:	48 1b       	sub	r20, r24
    285e:	59 0b       	sbc	r21, r25
    2860:	20 91 a1 01 	lds	r18, 0x01A1
    2864:	30 91 a2 01 	lds	r19, 0x01A2
    2868:	24 17       	cp	r18, r20
    286a:	35 07       	cpc	r19, r21
    286c:	b0 f4       	brcc	.+44     	; 0x289a <malloc+0x14e>
    286e:	ca 01       	movw	r24, r20
    2870:	82 1b       	sub	r24, r18
    2872:	93 0b       	sbc	r25, r19
    2874:	86 17       	cp	r24, r22
    2876:	97 07       	cpc	r25, r23
    2878:	80 f0       	brcs	.+32     	; 0x289a <malloc+0x14e>
    287a:	ab 01       	movw	r20, r22
    287c:	4e 5f       	subi	r20, 0xFE	; 254
    287e:	5f 4f       	sbci	r21, 0xFF	; 255
    2880:	84 17       	cp	r24, r20
    2882:	95 07       	cpc	r25, r21
    2884:	50 f0       	brcs	.+20     	; 0x289a <malloc+0x14e>
    2886:	42 0f       	add	r20, r18
    2888:	53 1f       	adc	r21, r19
    288a:	50 93 a2 01 	sts	0x01A2, r21
    288e:	40 93 a1 01 	sts	0x01A1, r20
    2892:	f9 01       	movw	r30, r18
    2894:	61 93       	st	Z+, r22
    2896:	71 93       	st	Z+, r23
    2898:	02 c0       	rjmp	.+4      	; 0x289e <malloc+0x152>
    289a:	e0 e0       	ldi	r30, 0x00	; 0
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	cf 01       	movw	r24, r30
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <free>:
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <free+0xa>
    28ae:	50 c0       	rjmp	.+160    	; 0x2950 <free+0xaa>
    28b0:	ec 01       	movw	r28, r24
    28b2:	22 97       	sbiw	r28, 0x02	; 2
    28b4:	1b 82       	std	Y+3, r1	; 0x03
    28b6:	1a 82       	std	Y+2, r1	; 0x02
    28b8:	a0 91 a3 01 	lds	r26, 0x01A3
    28bc:	b0 91 a4 01 	lds	r27, 0x01A4
    28c0:	10 97       	sbiw	r26, 0x00	; 0
    28c2:	09 f1       	breq	.+66     	; 0x2906 <free+0x60>
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	ac 17       	cp	r26, r28
    28ca:	bd 07       	cpc	r27, r29
    28cc:	08 f1       	brcs	.+66     	; 0x2910 <free+0x6a>
    28ce:	bb 83       	std	Y+3, r27	; 0x03
    28d0:	aa 83       	std	Y+2, r26	; 0x02
    28d2:	fe 01       	movw	r30, r28
    28d4:	21 91       	ld	r18, Z+
    28d6:	31 91       	ld	r19, Z+
    28d8:	e2 0f       	add	r30, r18
    28da:	f3 1f       	adc	r31, r19
    28dc:	ae 17       	cp	r26, r30
    28de:	bf 07       	cpc	r27, r31
    28e0:	79 f4       	brne	.+30     	; 0x2900 <free+0x5a>
    28e2:	8d 91       	ld	r24, X+
    28e4:	9c 91       	ld	r25, X
    28e6:	11 97       	sbiw	r26, 0x01	; 1
    28e8:	28 0f       	add	r18, r24
    28ea:	39 1f       	adc	r19, r25
    28ec:	2e 5f       	subi	r18, 0xFE	; 254
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	39 83       	std	Y+1, r19	; 0x01
    28f2:	28 83       	st	Y, r18
    28f4:	12 96       	adiw	r26, 0x02	; 2
    28f6:	8d 91       	ld	r24, X+
    28f8:	9c 91       	ld	r25, X
    28fa:	13 97       	sbiw	r26, 0x03	; 3
    28fc:	9b 83       	std	Y+3, r25	; 0x03
    28fe:	8a 83       	std	Y+2, r24	; 0x02
    2900:	41 15       	cp	r20, r1
    2902:	51 05       	cpc	r21, r1
    2904:	71 f4       	brne	.+28     	; 0x2922 <free+0x7c>
    2906:	d0 93 a4 01 	sts	0x01A4, r29
    290a:	c0 93 a3 01 	sts	0x01A3, r28
    290e:	20 c0       	rjmp	.+64     	; 0x2950 <free+0xaa>
    2910:	12 96       	adiw	r26, 0x02	; 2
    2912:	8d 91       	ld	r24, X+
    2914:	9c 91       	ld	r25, X
    2916:	13 97       	sbiw	r26, 0x03	; 3
    2918:	ad 01       	movw	r20, r26
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	11 f0       	breq	.+4      	; 0x2922 <free+0x7c>
    291e:	dc 01       	movw	r26, r24
    2920:	d3 cf       	rjmp	.-90     	; 0x28c8 <free+0x22>
    2922:	fa 01       	movw	r30, r20
    2924:	d3 83       	std	Z+3, r29	; 0x03
    2926:	c2 83       	std	Z+2, r28	; 0x02
    2928:	21 91       	ld	r18, Z+
    292a:	31 91       	ld	r19, Z+
    292c:	e2 0f       	add	r30, r18
    292e:	f3 1f       	adc	r31, r19
    2930:	ce 17       	cp	r28, r30
    2932:	df 07       	cpc	r29, r31
    2934:	69 f4       	brne	.+26     	; 0x2950 <free+0xaa>
    2936:	88 81       	ld	r24, Y
    2938:	99 81       	ldd	r25, Y+1	; 0x01
    293a:	28 0f       	add	r18, r24
    293c:	39 1f       	adc	r19, r25
    293e:	2e 5f       	subi	r18, 0xFE	; 254
    2940:	3f 4f       	sbci	r19, 0xFF	; 255
    2942:	fa 01       	movw	r30, r20
    2944:	31 83       	std	Z+1, r19	; 0x01
    2946:	20 83       	st	Z, r18
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	9b 81       	ldd	r25, Y+3	; 0x03
    294c:	93 83       	std	Z+3, r25	; 0x03
    294e:	82 83       	std	Z+2, r24	; 0x02
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	08 95       	ret

00002956 <strnlen_P>:
    2956:	fc 01       	movw	r30, r24
    2958:	05 90       	lpm	r0, Z+
    295a:	61 50       	subi	r22, 0x01	; 1
    295c:	70 40       	sbci	r23, 0x00	; 0
    295e:	01 10       	cpse	r0, r1
    2960:	d8 f7       	brcc	.-10     	; 0x2958 <strnlen_P+0x2>
    2962:	80 95       	com	r24
    2964:	90 95       	com	r25
    2966:	8e 0f       	add	r24, r30
    2968:	9f 1f       	adc	r25, r31
    296a:	08 95       	ret

0000296c <memset>:
    296c:	dc 01       	movw	r26, r24
    296e:	01 c0       	rjmp	.+2      	; 0x2972 <memset+0x6>
    2970:	6d 93       	st	X+, r22
    2972:	41 50       	subi	r20, 0x01	; 1
    2974:	50 40       	sbci	r21, 0x00	; 0
    2976:	e0 f7       	brcc	.-8      	; 0x2970 <memset+0x4>
    2978:	08 95       	ret

0000297a <strnlen>:
    297a:	fc 01       	movw	r30, r24
    297c:	61 50       	subi	r22, 0x01	; 1
    297e:	70 40       	sbci	r23, 0x00	; 0
    2980:	01 90       	ld	r0, Z+
    2982:	01 10       	cpse	r0, r1
    2984:	d8 f7       	brcc	.-10     	; 0x297c <strnlen+0x2>
    2986:	80 95       	com	r24
    2988:	90 95       	com	r25
    298a:	8e 0f       	add	r24, r30
    298c:	9f 1f       	adc	r25, r31
    298e:	08 95       	ret

00002990 <fputc>:
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	8c 01       	movw	r16, r24
    299a:	eb 01       	movw	r28, r22
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	81 ff       	sbrs	r24, 1
    29a0:	1b c0       	rjmp	.+54     	; 0x29d8 <fputc+0x48>
    29a2:	82 ff       	sbrs	r24, 2
    29a4:	0d c0       	rjmp	.+26     	; 0x29c0 <fputc+0x30>
    29a6:	2e 81       	ldd	r18, Y+6	; 0x06
    29a8:	3f 81       	ldd	r19, Y+7	; 0x07
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	9d 81       	ldd	r25, Y+5	; 0x05
    29ae:	28 17       	cp	r18, r24
    29b0:	39 07       	cpc	r19, r25
    29b2:	64 f4       	brge	.+24     	; 0x29cc <fputc+0x3c>
    29b4:	e8 81       	ld	r30, Y
    29b6:	f9 81       	ldd	r31, Y+1	; 0x01
    29b8:	01 93       	st	Z+, r16
    29ba:	f9 83       	std	Y+1, r31	; 0x01
    29bc:	e8 83       	st	Y, r30
    29be:	06 c0       	rjmp	.+12     	; 0x29cc <fputc+0x3c>
    29c0:	e8 85       	ldd	r30, Y+8	; 0x08
    29c2:	f9 85       	ldd	r31, Y+9	; 0x09
    29c4:	80 2f       	mov	r24, r16
    29c6:	09 95       	icall
    29c8:	89 2b       	or	r24, r25
    29ca:	31 f4       	brne	.+12     	; 0x29d8 <fputc+0x48>
    29cc:	8e 81       	ldd	r24, Y+6	; 0x06
    29ce:	9f 81       	ldd	r25, Y+7	; 0x07
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	9f 83       	std	Y+7, r25	; 0x07
    29d4:	8e 83       	std	Y+6, r24	; 0x06
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <fputc+0x4c>
    29d8:	0f ef       	ldi	r16, 0xFF	; 255
    29da:	1f ef       	ldi	r17, 0xFF	; 255
    29dc:	c8 01       	movw	r24, r16
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	08 95       	ret

000029e8 <__ultoa_invert>:
    29e8:	fa 01       	movw	r30, r20
    29ea:	aa 27       	eor	r26, r26
    29ec:	28 30       	cpi	r18, 0x08	; 8
    29ee:	51 f1       	breq	.+84     	; 0x2a44 <__ultoa_invert+0x5c>
    29f0:	20 31       	cpi	r18, 0x10	; 16
    29f2:	81 f1       	breq	.+96     	; 0x2a54 <__ultoa_invert+0x6c>
    29f4:	e8 94       	clt
    29f6:	6f 93       	push	r22
    29f8:	6e 7f       	andi	r22, 0xFE	; 254
    29fa:	6e 5f       	subi	r22, 0xFE	; 254
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    29fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2a00:	9f 4f       	sbci	r25, 0xFF	; 255
    2a02:	af 4f       	sbci	r26, 0xFF	; 255
    2a04:	b1 e0       	ldi	r27, 0x01	; 1
    2a06:	3e d0       	rcall	.+124    	; 0x2a84 <__ultoa_invert+0x9c>
    2a08:	b4 e0       	ldi	r27, 0x04	; 4
    2a0a:	3c d0       	rcall	.+120    	; 0x2a84 <__ultoa_invert+0x9c>
    2a0c:	67 0f       	add	r22, r23
    2a0e:	78 1f       	adc	r23, r24
    2a10:	89 1f       	adc	r24, r25
    2a12:	9a 1f       	adc	r25, r26
    2a14:	a1 1d       	adc	r26, r1
    2a16:	68 0f       	add	r22, r24
    2a18:	79 1f       	adc	r23, r25
    2a1a:	8a 1f       	adc	r24, r26
    2a1c:	91 1d       	adc	r25, r1
    2a1e:	a1 1d       	adc	r26, r1
    2a20:	6a 0f       	add	r22, r26
    2a22:	71 1d       	adc	r23, r1
    2a24:	81 1d       	adc	r24, r1
    2a26:	91 1d       	adc	r25, r1
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	20 d0       	rcall	.+64     	; 0x2a6c <__ultoa_invert+0x84>
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <__ultoa_invert+0x48>
    2a2e:	68 94       	set
    2a30:	3f 91       	pop	r19
    2a32:	2a e0       	ldi	r18, 0x0A	; 10
    2a34:	26 9f       	mul	r18, r22
    2a36:	11 24       	eor	r1, r1
    2a38:	30 19       	sub	r19, r0
    2a3a:	30 5d       	subi	r19, 0xD0	; 208
    2a3c:	31 93       	st	Z+, r19
    2a3e:	de f6       	brtc	.-74     	; 0x29f6 <__ultoa_invert+0xe>
    2a40:	cf 01       	movw	r24, r30
    2a42:	08 95       	ret
    2a44:	46 2f       	mov	r20, r22
    2a46:	47 70       	andi	r20, 0x07	; 7
    2a48:	40 5d       	subi	r20, 0xD0	; 208
    2a4a:	41 93       	st	Z+, r20
    2a4c:	b3 e0       	ldi	r27, 0x03	; 3
    2a4e:	0f d0       	rcall	.+30     	; 0x2a6e <__ultoa_invert+0x86>
    2a50:	c9 f7       	brne	.-14     	; 0x2a44 <__ultoa_invert+0x5c>
    2a52:	f6 cf       	rjmp	.-20     	; 0x2a40 <__ultoa_invert+0x58>
    2a54:	46 2f       	mov	r20, r22
    2a56:	4f 70       	andi	r20, 0x0F	; 15
    2a58:	40 5d       	subi	r20, 0xD0	; 208
    2a5a:	4a 33       	cpi	r20, 0x3A	; 58
    2a5c:	18 f0       	brcs	.+6      	; 0x2a64 <__ultoa_invert+0x7c>
    2a5e:	49 5d       	subi	r20, 0xD9	; 217
    2a60:	31 fd       	sbrc	r19, 1
    2a62:	40 52       	subi	r20, 0x20	; 32
    2a64:	41 93       	st	Z+, r20
    2a66:	02 d0       	rcall	.+4      	; 0x2a6c <__ultoa_invert+0x84>
    2a68:	a9 f7       	brne	.-22     	; 0x2a54 <__ultoa_invert+0x6c>
    2a6a:	ea cf       	rjmp	.-44     	; 0x2a40 <__ultoa_invert+0x58>
    2a6c:	b4 e0       	ldi	r27, 0x04	; 4
    2a6e:	a6 95       	lsr	r26
    2a70:	97 95       	ror	r25
    2a72:	87 95       	ror	r24
    2a74:	77 95       	ror	r23
    2a76:	67 95       	ror	r22
    2a78:	ba 95       	dec	r27
    2a7a:	c9 f7       	brne	.-14     	; 0x2a6e <__ultoa_invert+0x86>
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	61 05       	cpc	r22, r1
    2a80:	71 05       	cpc	r23, r1
    2a82:	08 95       	ret
    2a84:	9b 01       	movw	r18, r22
    2a86:	ac 01       	movw	r20, r24
    2a88:	0a 2e       	mov	r0, r26
    2a8a:	06 94       	lsr	r0
    2a8c:	57 95       	ror	r21
    2a8e:	47 95       	ror	r20
    2a90:	37 95       	ror	r19
    2a92:	27 95       	ror	r18
    2a94:	ba 95       	dec	r27
    2a96:	c9 f7       	brne	.-14     	; 0x2a8a <__ultoa_invert+0xa2>
    2a98:	62 0f       	add	r22, r18
    2a9a:	73 1f       	adc	r23, r19
    2a9c:	84 1f       	adc	r24, r20
    2a9e:	95 1f       	adc	r25, r21
    2aa0:	a0 1d       	adc	r26, r0
    2aa2:	08 95       	ret

00002aa4 <__prologue_saves__>:
    2aa4:	2f 92       	push	r2
    2aa6:	3f 92       	push	r3
    2aa8:	4f 92       	push	r4
    2aaa:	5f 92       	push	r5
    2aac:	6f 92       	push	r6
    2aae:	7f 92       	push	r7
    2ab0:	8f 92       	push	r8
    2ab2:	9f 92       	push	r9
    2ab4:	af 92       	push	r10
    2ab6:	bf 92       	push	r11
    2ab8:	cf 92       	push	r12
    2aba:	df 92       	push	r13
    2abc:	ef 92       	push	r14
    2abe:	ff 92       	push	r15
    2ac0:	0f 93       	push	r16
    2ac2:	1f 93       	push	r17
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	ca 1b       	sub	r28, r26
    2ace:	db 0b       	sbc	r29, r27
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	09 94       	ijmp

00002adc <__epilogue_restores__>:
    2adc:	2a 88       	ldd	r2, Y+18	; 0x12
    2ade:	39 88       	ldd	r3, Y+17	; 0x11
    2ae0:	48 88       	ldd	r4, Y+16	; 0x10
    2ae2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ae4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ae6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ae8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aea:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aec:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aee:	b9 84       	ldd	r11, Y+9	; 0x09
    2af0:	c8 84       	ldd	r12, Y+8	; 0x08
    2af2:	df 80       	ldd	r13, Y+7	; 0x07
    2af4:	ee 80       	ldd	r14, Y+6	; 0x06
    2af6:	fd 80       	ldd	r15, Y+5	; 0x05
    2af8:	0c 81       	ldd	r16, Y+4	; 0x04
    2afa:	1b 81       	ldd	r17, Y+3	; 0x03
    2afc:	aa 81       	ldd	r26, Y+2	; 0x02
    2afe:	b9 81       	ldd	r27, Y+1	; 0x01
    2b00:	ce 0f       	add	r28, r30
    2b02:	d1 1d       	adc	r29, r1
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	ed 01       	movw	r28, r26
    2b10:	08 95       	ret

00002b12 <_exit>:
    2b12:	f8 94       	cli

00002b14 <__stop_program>:
    2b14:	ff cf       	rjmp	.-2      	; 0x2b14 <__stop_program>
