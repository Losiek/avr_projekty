
lis35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000be0  00000c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014c  0080014c  00000cc0  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f3  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000509  00000000  00000000  00000e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b5  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ed  00000000  00000000  000015d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b4  00000000  00000000  00001d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ee       	ldi	r30, 0xE0	; 224
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	ac 34       	cpi	r26, 0x4C	; 76
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	ac e4       	ldi	r26, 0x4C	; 76
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 35       	cpi	r26, 0x56	; 86
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
#include "rs.h"
#include "harddef.h"
#include "lis35.h"

int main(void)
{
  ae:	2f 92       	push	r2
  b0:	3f 92       	push	r3
  b2:	4f 92       	push	r4
  b4:	5f 92       	push	r5
  b6:	6f 92       	push	r6
  b8:	7f 92       	push	r7
  ba:	8f 92       	push	r8
  bc:	9f 92       	push	r9
  be:	af 92       	push	r10
  c0:	bf 92       	push	r11
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <main+0x26>
  d4:	0f 92       	push	r0
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	signed char XPos, YPos, ZPos;
	signed char iXPos, iYPos, iZPos;
	
	///////////////////////////////////////////////////
	//Inicjacja portu szeregowego
	RS_SET_BAUD(DEF_BAUD);
  da:	10 bc       	out	0x20, r1	; 32
  dc:	87 e6       	ldi	r24, 0x67	; 103
  de:	89 b9       	out	0x09, r24	; 9
	UCSR0C = 1<<URSEL0 | 1<<UCSZ01 | 1<<UCSZ00;
  e0:	86 e8       	ldi	r24, 0x86	; 134
  e2:	80 bd       	out	0x20, r24	; 32
	UCSR0B = 1<<RXEN0 | 1<<TXEN0;
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;
  e8:	1b b8       	out	0x0b, r1	; 11
	//Inicjacja akcelerometru LIS35DE
	InitializeLIS35();
  ea:	0e 94 20 01 	call	0x240	; 0x240 <InitializeLIS35>
	//Koniec inicjacji
	//////////////////////////////////////////////////
	
	//inicjacja funkcji domyœlnych strumieni
	fdevopen(rs_put, rs_get);
  ee:	8d ed       	ldi	r24, 0xDD	; 221
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	63 ee       	ldi	r22, 0xE3	; 227
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <fdevopen>
	
	//Wiadomoœæ powitalna
	puts( "Akcelerometr LIS35\r\n");
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <puts>

	if (InitializeLIS35()!=LIS35_OK)
 102:	0e 94 20 01 	call	0x240	; 0x240 <InitializeLIS35>
 106:	88 23       	and	r24, r24
 108:	71 f0       	breq	.+28     	; 0x126 <main+0x78>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10a:	00 e9       	ldi	r16, 0x90	; 144
 10c:	11 e0       	ldi	r17, 0x01	; 1
	{
		while(1)
		{
			// When initialization fails send message
			printf("LIS35 inicjalisation is fail\r\n");
 10e:	85 e1       	ldi	r24, 0x15	; 21
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 dd 01 	call	0x3ba	; 0x3ba <puts>
 116:	84 ec       	ldi	r24, 0xC4	; 196
 118:	99 e0       	ldi	r25, 0x09	; 9
 11a:	f8 01       	movw	r30, r16
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x6e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 122:	d9 f7       	brne	.-10     	; 0x11a <main+0x6c>
 124:	f4 cf       	rjmp	.-24     	; 0x10e <main+0x60>
		}
	}

	while(1)
	{
		LIS35_GetPosition(&XPos, &YPos, &ZPos);
 126:	22 e0       	ldi	r18, 0x02	; 2
 128:	22 2e       	mov	r2, r18
 12a:	31 2c       	mov	r3, r1
 12c:	2c 0e       	add	r2, r28
 12e:	3d 1e       	adc	r3, r29
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	49 2e       	mov	r4, r25
 134:	51 2c       	mov	r5, r1
 136:	4c 0e       	add	r4, r28
 138:	5d 1e       	adc	r5, r29
 13a:	3e 01       	movw	r6, r28
 13c:	08 94       	sec
 13e:	61 1c       	adc	r6, r1
 140:	71 1c       	adc	r7, r1

		//Send angle values
		printf( "X=%d\r\n"
 142:	83 e3       	ldi	r24, 0x33	; 51
 144:	88 2e       	mov	r8, r24
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	98 2e       	mov	r9, r24
 14a:	aa 24       	eor	r10, r10
 14c:	bb 24       	eor	r11, r11
 14e:	cc 24       	eor	r12, r12
 150:	dd 24       	eor	r13, r13
 152:	ee 24       	eor	r14, r14
 154:	ff 24       	eor	r15, r15
 156:	00 e9       	ldi	r16, 0x90	; 144
 158:	11 e0       	ldi	r17, 0x01	; 1
		}
	}

	while(1)
	{
		LIS35_GetPosition(&XPos, &YPos, &ZPos);
 15a:	c3 01       	movw	r24, r6
 15c:	b1 01       	movw	r22, r2
 15e:	a2 01       	movw	r20, r4
 160:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LIS35_GetPosition>

		//Send angle values
		printf( "X=%d\r\n"
 164:	2d b7       	in	r18, 0x3d	; 61
 166:	3e b7       	in	r19, 0x3e	; 62
 168:	28 50       	subi	r18, 0x08	; 8
 16a:	30 40       	sbci	r19, 0x00	; 0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	3e bf       	out	0x3e, r19	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	2d bf       	out	0x3d, r18	; 61
 176:	ed b7       	in	r30, 0x3d	; 61
 178:	fe b7       	in	r31, 0x3e	; 62
 17a:	31 96       	adiw	r30, 0x01	; 1
 17c:	ad b7       	in	r26, 0x3d	; 61
 17e:	be b7       	in	r27, 0x3e	; 62
 180:	12 96       	adiw	r26, 0x02	; 2
 182:	9c 92       	st	X, r9
 184:	8e 92       	st	-X, r8
 186:	11 97       	sbiw	r26, 0x01	; 1
 188:	b3 82       	std	Z+3, r11	; 0x03
 18a:	a2 82       	std	Z+2, r10	; 0x02
 18c:	d5 82       	std	Z+5, r13	; 0x05
 18e:	c4 82       	std	Z+4, r12	; 0x04
 190:	f7 82       	std	Z+7, r15	; 0x07
 192:	e6 82       	std	Z+6, r14	; 0x06
 194:	0e 94 c8 01 	call	0x390	; 0x390 <printf>
 198:	88 e8       	ldi	r24, 0x88	; 136
 19a:	93 e1       	ldi	r25, 0x13	; 19
 19c:	2d b7       	in	r18, 0x3d	; 61
 19e:	3e b7       	in	r19, 0x3e	; 62
 1a0:	28 5f       	subi	r18, 0xF8	; 248
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	3e bf       	out	0x3e, r19	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	2d bf       	out	0x3d, r18	; 61
 1ae:	f8 01       	movw	r30, r16
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b6:	d9 f7       	brne	.-10     	; 0x1ae <main+0x100>
 1b8:	d0 cf       	rjmp	.-96     	; 0x15a <main+0xac>

000001ba <rs_put>:
#include "rs.h"

int rs_put(char znak)
{
	//Oczekiwanie a¿ bufor nadajnika jest pusty
	while(!(1<<UDRE0 & UCSR0A)) {}
 1ba:	5d 9b       	sbis	0x0b, 5	; 11
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <rs_put>
	UDR0 = znak;
 1be:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <rs_get>:

int rs_get(void)
{
	char znak;
	//Oczekiwanie na pojawienie siê danej
	while(!(1<<RXC0 & UCSR0A)) {}
 1c6:	5f 9b       	sbis	0x0b, 7	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <rs_get>
	znak = UDR0;
 1ca:	8c b1       	in	r24, 0x0c	; 12
	return znak;
}
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret

000001d0 <SPI_Init>:

/************************* SPI Functions **********************************************/
void SPI_Init(void)
{
	
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK);
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	80 6a       	ori	r24, 0xA0	; 160
 1d4:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~(1 << DD_MISO)|(1<<DD_SS);
 1d6:	be 98       	cbi	0x17, 6	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA) | (1<<DORD)|(1<<SPR0)|(1<<SPR1);
 1d8:	8f e7       	ldi	r24, 0x7F	; 127
 1da:	8d b9       	out	0x0d, r24	; 13
	SPSR = 1<<SPI2X;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	8e b9       	out	0x0e, r24	; 14
}
 1e0:	08 95       	ret

000001e2 <SPI_Transmit>:


void SPI_Transmit(char cData)
{
	SPDR = cData;
 1e2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 1e4:	77 9b       	sbis	0x0e, 7	; 14
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <SPI_Transmit+0x2>
}
 1e8:	08 95       	ret

000001ea <SPI_Receive>:


char SPI_Receive(void)
{
	SPDR = 0xFF;
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 1ee:	77 9b       	sbis	0x0e, 7	; 14
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <SPI_Receive+0x4>
	return SPDR;
 1f2:	8f b1       	in	r24, 0x0f	; 15
}
 1f4:	08 95       	ret

000001f6 <LIS35_RebootMemory>:



void LIS35_RebootMemory()
{
	PORTB&=!(1<<DD_SS);
 1f6:	88 b3       	in	r24, 0x18	; 24
 1f8:	18 ba       	out	0x18, r1	; 24
}


void SPI_Transmit(char cData)
{
	SPDR = cData;
 1fa:	81 e2       	ldi	r24, 0x21	; 33
 1fc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 1fe:	77 9b       	sbis	0x0e, 7	; 14
 200:	fe cf       	rjmp	.-4      	; 0x1fe <LIS35_RebootMemory+0x8>
}


void SPI_Transmit(char cData)
{
	SPDR = cData;
 202:	80 e4       	ldi	r24, 0x40	; 64
 204:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 206:	77 9b       	sbis	0x0e, 7	; 14
 208:	fe cf       	rjmp	.-4      	; 0x206 <LIS35_RebootMemory+0x10>
void LIS35_RebootMemory()
{
	PORTB&=!(1<<DD_SS);
	SPI_Transmit(LIS35_WRITE|LIS35_ADDR_NO_INC|LIS35_REG_CR2);
	SPI_Transmit(LIS35_REG_CR2_BOOT);
	PORTB|=(1<<DD_SS);
 20a:	c4 9a       	sbi	0x18, 4	; 24
}
 20c:	08 95       	ret

0000020e <LIS35_ReadRegister>:
	return LIS35_ERROR;
}


void LIS35_ReadRegister(char addr,char * v)
{
 20e:	fb 01       	movw	r30, r22
	PORTB&=!(1<<DD_SS);
 210:	98 b3       	in	r25, 0x18	; 24
 212:	18 ba       	out	0x18, r1	; 24
	SPI_Transmit(LIS35_READ|LIS35_ADDR_NO_INC|addr);
 214:	80 68       	ori	r24, 0x80	; 128
}


void SPI_Transmit(char cData)
{
	SPDR = cData;
 216:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 218:	77 9b       	sbis	0x0e, 7	; 14
 21a:	fe cf       	rjmp	.-4      	; 0x218 <LIS35_ReadRegister+0xa>
}


char SPI_Receive(void)
{
	SPDR = 0xFF;
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 220:	77 9b       	sbis	0x0e, 7	; 14
 222:	fe cf       	rjmp	.-4      	; 0x220 <LIS35_ReadRegister+0x12>
	return SPDR;
 224:	8f b1       	in	r24, 0x0f	; 15

void LIS35_ReadRegister(char addr,char * v)
{
	PORTB&=!(1<<DD_SS);
	SPI_Transmit(LIS35_READ|LIS35_ADDR_NO_INC|addr);
	*v=SPI_Receive();
 226:	80 83       	st	Z, r24
	PORTB|=(1<<DD_SS);
 228:	c4 9a       	sbi	0x18, 4	; 24
}
 22a:	08 95       	ret

0000022c <LIS35_WriteRegister>:


void LIS35_WriteRegister(char addr,char v)
{
	PORTB&=!(1<<DD_SS);
 22c:	98 b3       	in	r25, 0x18	; 24
 22e:	18 ba       	out	0x18, r1	; 24
}


void SPI_Transmit(char cData)
{
	SPDR = cData;
 230:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 232:	77 9b       	sbis	0x0e, 7	; 14
 234:	fe cf       	rjmp	.-4      	; 0x232 <LIS35_WriteRegister+0x6>
}


void SPI_Transmit(char cData)
{
	SPDR = cData;
 236:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
 238:	77 9b       	sbis	0x0e, 7	; 14
 23a:	fe cf       	rjmp	.-4      	; 0x238 <LIS35_WriteRegister+0xc>
void LIS35_WriteRegister(char addr,char v)
{
	PORTB&=!(1<<DD_SS);
	SPI_Transmit(LIS35_WRITE|LIS35_ADDR_NO_INC|addr);
	SPI_Transmit(v);
	PORTB|=(1<<DD_SS);
 23c:	c4 9a       	sbi	0x18, 4	; 24
}
 23e:	08 95       	ret

00000240 <InitializeLIS35>:
	PORTB|=(1<<DD_SS);
}


char InitializeLIS35()
{
 240:	df 93       	push	r29
 242:	cf 93       	push	r28
 244:	0f 92       	push	r0
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	char RegVal;

	//Inititalize SPI
	SPI_Init();
 24a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <SPI_Init>

	//Reset LIS35 configuration
    LIS35_RebootMemory(); 
 24e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LIS35_RebootMemory>

	//Power up
	LIS35_WriteRegister(LIS35_REG_CR1, LIS35_REG_CR1_XEN | LIS35_REG_CR1_YEN | LIS35_REG_CR1_ZEN | LIS35_REG_CR1_ACTIVE);// | LIS35_REG_CR1_FULL_SCALE);
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	67 e4       	ldi	r22, 0x47	; 71
 256:	0e 94 16 01 	call	0x22c	; 0x22c <LIS35_WriteRegister>
	LIS35_ReadRegister(LIS35_REG_CR1, &RegVal);
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	be 01       	movw	r22, r28
 25e:	6f 5f       	subi	r22, 0xFF	; 255
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	0e 94 07 01 	call	0x20e	; 0x20e <LIS35_ReadRegister>



	//Configure click interrupt (enable all sigle clicks)
	LIS35_WriteRegister(LIS35_CLICK_CFG, 0x1);
 266:	88 e3       	ldi	r24, 0x38	; 56
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	0e 94 16 01 	call	0x22c	; 0x22c <LIS35_WriteRegister>
	LIS35_WriteRegister(LIS35_CLICK_THSY_X, 0x77);
 26e:	8b e3       	ldi	r24, 0x3B	; 59
 270:	67 e7       	ldi	r22, 0x77	; 119
 272:	0e 94 16 01 	call	0x22c	; 0x22c <LIS35_WriteRegister>
	LIS35_WriteRegister(LIS35_CLICK_THSZ, 0x7);
 276:	8c e3       	ldi	r24, 0x3C	; 60
 278:	67 e0       	ldi	r22, 0x07	; 7
 27a:	0e 94 16 01 	call	0x22c	; 0x22c <LIS35_WriteRegister>
	LIS35_WriteRegister(LIS35_CLICK_TIME_LIMIT, 0xFF);
 27e:	8d e3       	ldi	r24, 0x3D	; 61
 280:	6f ef       	ldi	r22, 0xFF	; 255
 282:	0e 94 16 01 	call	0x22c	; 0x22c <LIS35_WriteRegister>
	
	//Enable interrupts
	// LIS35 int 1 - click
	// LIS32_CR3_IHL - interrupt is low pulse
	 LIS35_WriteRegister(LIS35_CR3, LIS35_CR3_IHL | LIS35_CR3_CLICK_INT);
 286:	82 e2       	ldi	r24, 0x22	; 34
 288:	67 e8       	ldi	r22, 0x87	; 135
 28a:	0e 94 16 01 	call	0x22c	; 0x22c <LIS35_WriteRegister>
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	87 34       	cpi	r24, 0x47	; 71
 294:	09 f0       	breq	.+2      	; 0x298 <InitializeLIS35+0x58>
 296:	91 e0       	ldi	r25, 0x01	; 1

	//Check whether power up is set
	if (RegVal==(LIS35_REG_CR1_XEN | LIS35_REG_CR1_YEN | LIS35_REG_CR1_ZEN | LIS35_REG_CR1_ACTIVE  /*| LIS35_REG_CR1_FULL_SCALE*/)) return LIS35_OK;

	return LIS35_ERROR;
}
 298:	89 2f       	mov	r24, r25
 29a:	0f 90       	pop	r0
 29c:	cf 91       	pop	r28
 29e:	df 91       	pop	r29
 2a0:	08 95       	ret

000002a2 <LIS35_GetPosition>:
	SPI_Transmit(v);
	PORTB|=(1<<DD_SS);
}

void LIS35_GetPosition(signed char * x, signed char * y, signed char * z)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	fc 01       	movw	r30, r24
 2a8:	db 01       	movw	r26, r22
 2aa:	ea 01       	movw	r28, r20
	PORTB&=!(1<<DD_SS);
 2ac:	88 b3       	in	r24, 0x18	; 24
 2ae:	18 ba       	out	0x18, r1	; 24
}


void SPI_Transmit(char cData)
{
	SPDR = cData;
 2b0:	89 ee       	ldi	r24, 0xE9	; 233
 2b2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 2b4:	77 9b       	sbis	0x0e, 7	; 14
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <LIS35_GetPosition+0x12>
}


char SPI_Receive(void)
{
	SPDR = 0xFF;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 2bc:	77 9b       	sbis	0x0e, 7	; 14
 2be:	fe cf       	rjmp	.-4      	; 0x2bc <LIS35_GetPosition+0x1a>
	return SPDR;
 2c0:	8f b1       	in	r24, 0x0f	; 15

void LIS35_GetPosition(signed char * x, signed char * y, signed char * z)
{
	PORTB&=!(1<<DD_SS);
	SPI_Transmit(LIS35_READ|LIS35_ADDR_INC|LIS35_REG_OUTX);
	*x=SPI_Receive();
 2c2:	80 83       	st	Z, r24
}


char SPI_Receive(void)
{
	SPDR = 0xFF;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 2c8:	77 9b       	sbis	0x0e, 7	; 14
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <LIS35_GetPosition+0x26>
	return SPDR;
 2cc:	8f b1       	in	r24, 0x0f	; 15
}


char SPI_Receive(void)
{
	SPDR = 0xFF;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 2d2:	77 9b       	sbis	0x0e, 7	; 14
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <LIS35_GetPosition+0x30>
	return SPDR;
 2d6:	8f b1       	in	r24, 0x0f	; 15
{
	PORTB&=!(1<<DD_SS);
	SPI_Transmit(LIS35_READ|LIS35_ADDR_INC|LIS35_REG_OUTX);
	*x=SPI_Receive();
	SPI_Receive();
	*y=SPI_Receive();
 2d8:	8c 93       	st	X, r24
}


char SPI_Receive(void)
{
	SPDR = 0xFF;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 2de:	77 9b       	sbis	0x0e, 7	; 14
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <LIS35_GetPosition+0x3c>
	return SPDR;
 2e2:	8f b1       	in	r24, 0x0f	; 15
}


char SPI_Receive(void)
{
	SPDR = 0xFF;
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 2e8:	77 9b       	sbis	0x0e, 7	; 14
 2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <LIS35_GetPosition+0x46>
	return SPDR;
 2ec:	8f b1       	in	r24, 0x0f	; 15
	SPI_Transmit(LIS35_READ|LIS35_ADDR_INC|LIS35_REG_OUTX);
	*x=SPI_Receive();
	SPI_Receive();
	*y=SPI_Receive();
	SPI_Receive();
	*z=SPI_Receive();
 2ee:	88 83       	st	Y, r24
	PORTB|=(1<<DD_SS);
 2f0:	c4 9a       	sbi	0x18, 4	; 24
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <fdevopen>:
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	8c 01       	movw	r16, r24
 302:	eb 01       	movw	r28, r22
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	31 f4       	brne	.+12     	; 0x314 <fdevopen+0x1c>
 308:	61 15       	cp	r22, r1
 30a:	71 05       	cpc	r23, r1
 30c:	19 f4       	brne	.+6      	; 0x314 <fdevopen+0x1c>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	38 c0       	rjmp	.+112    	; 0x384 <fdevopen+0x8c>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	6e e0       	ldi	r22, 0x0E	; 14
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 ef 03 	call	0x7de	; 0x7de <calloc>
 320:	fc 01       	movw	r30, r24
 322:	9c 01       	movw	r18, r24
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	71 f1       	breq	.+92     	; 0x384 <fdevopen+0x8c>
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	83 83       	std	Z+3, r24	; 0x03
 32c:	20 97       	sbiw	r28, 0x00	; 0
 32e:	71 f0       	breq	.+28     	; 0x34c <fdevopen+0x54>
 330:	d3 87       	std	Z+11, r29	; 0x0b
 332:	c2 87       	std	Z+10, r28	; 0x0a
 334:	81 e8       	ldi	r24, 0x81	; 129
 336:	83 83       	std	Z+3, r24	; 0x03
 338:	80 91 4c 01 	lds	r24, 0x014C
 33c:	90 91 4d 01 	lds	r25, 0x014D
 340:	89 2b       	or	r24, r25
 342:	21 f4       	brne	.+8      	; 0x34c <fdevopen+0x54>
 344:	f0 93 4d 01 	sts	0x014D, r31
 348:	e0 93 4c 01 	sts	0x014C, r30
 34c:	01 15       	cp	r16, r1
 34e:	11 05       	cpc	r17, r1
 350:	c9 f0       	breq	.+50     	; 0x384 <fdevopen+0x8c>
 352:	11 87       	std	Z+9, r17	; 0x09
 354:	00 87       	std	Z+8, r16	; 0x08
 356:	83 81       	ldd	r24, Z+3	; 0x03
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	83 83       	std	Z+3, r24	; 0x03
 35c:	80 91 4e 01 	lds	r24, 0x014E
 360:	90 91 4f 01 	lds	r25, 0x014F
 364:	89 2b       	or	r24, r25
 366:	71 f4       	brne	.+28     	; 0x384 <fdevopen+0x8c>
 368:	f0 93 4f 01 	sts	0x014F, r31
 36c:	e0 93 4e 01 	sts	0x014E, r30
 370:	80 91 50 01 	lds	r24, 0x0150
 374:	90 91 51 01 	lds	r25, 0x0151
 378:	89 2b       	or	r24, r25
 37a:	21 f4       	brne	.+8      	; 0x384 <fdevopen+0x8c>
 37c:	f0 93 51 01 	sts	0x0151, r31
 380:	e0 93 50 01 	sts	0x0150, r30
 384:	c9 01       	movw	r24, r18
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <printf>:
 390:	a0 e0       	ldi	r26, 0x00	; 0
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	ee ec       	ldi	r30, 0xCE	; 206
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__prologue_saves__+0x20>
 39c:	fe 01       	movw	r30, r28
 39e:	35 96       	adiw	r30, 0x05	; 5
 3a0:	61 91       	ld	r22, Z+
 3a2:	71 91       	ld	r23, Z+
 3a4:	80 91 4e 01 	lds	r24, 0x014E
 3a8:	90 91 4f 01 	lds	r25, 0x014F
 3ac:	af 01       	movw	r20, r30
 3ae:	0e 94 12 02 	call	0x424	; 0x424 <vfprintf>
 3b2:	20 96       	adiw	r28, 0x00	; 0
 3b4:	e2 e0       	ldi	r30, 0x02	; 2
 3b6:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__epilogue_restores__+0x20>

000003ba <puts>:
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	8c 01       	movw	r16, r24
 3c4:	e0 91 4e 01 	lds	r30, 0x014E
 3c8:	f0 91 4f 01 	lds	r31, 0x014F
 3cc:	83 81       	ldd	r24, Z+3	; 0x03
 3ce:	81 ff       	sbrs	r24, 1
 3d0:	21 c0       	rjmp	.+66     	; 0x414 <puts+0x5a>
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	d0 e0       	ldi	r29, 0x00	; 0
 3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <puts+0x38>
 3d8:	e0 91 4e 01 	lds	r30, 0x014E
 3dc:	f0 91 4f 01 	lds	r31, 0x014F
 3e0:	20 85       	ldd	r18, Z+8	; 0x08
 3e2:	31 85       	ldd	r19, Z+9	; 0x09
 3e4:	bf 01       	movw	r22, r30
 3e6:	f9 01       	movw	r30, r18
 3e8:	09 95       	icall
 3ea:	89 2b       	or	r24, r25
 3ec:	11 f0       	breq	.+4      	; 0x3f2 <puts+0x38>
 3ee:	cf ef       	ldi	r28, 0xFF	; 255
 3f0:	df ef       	ldi	r29, 0xFF	; 255
 3f2:	f8 01       	movw	r30, r16
 3f4:	81 91       	ld	r24, Z+
 3f6:	8f 01       	movw	r16, r30
 3f8:	88 23       	and	r24, r24
 3fa:	71 f7       	brne	.-36     	; 0x3d8 <puts+0x1e>
 3fc:	e0 91 4e 01 	lds	r30, 0x014E
 400:	f0 91 4f 01 	lds	r31, 0x014F
 404:	20 85       	ldd	r18, Z+8	; 0x08
 406:	31 85       	ldd	r19, Z+9	; 0x09
 408:	8a e0       	ldi	r24, 0x0A	; 10
 40a:	bf 01       	movw	r22, r30
 40c:	f9 01       	movw	r30, r18
 40e:	09 95       	icall
 410:	89 2b       	or	r24, r25
 412:	11 f0       	breq	.+4      	; 0x418 <puts+0x5e>
 414:	cf ef       	ldi	r28, 0xFF	; 255
 416:	df ef       	ldi	r29, 0xFF	; 255
 418:	ce 01       	movw	r24, r28
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	08 95       	ret

00000424 <vfprintf>:
 424:	ab e0       	ldi	r26, 0x0B	; 11
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e8 e1       	ldi	r30, 0x18	; 24
 42a:	f2 e0       	ldi	r31, 0x02	; 2
 42c:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__prologue_saves__>
 430:	3c 01       	movw	r6, r24
 432:	2b 01       	movw	r4, r22
 434:	5a 01       	movw	r10, r20
 436:	fc 01       	movw	r30, r24
 438:	17 82       	std	Z+7, r1	; 0x07
 43a:	16 82       	std	Z+6, r1	; 0x06
 43c:	83 81       	ldd	r24, Z+3	; 0x03
 43e:	81 fd       	sbrc	r24, 1
 440:	03 c0       	rjmp	.+6      	; 0x448 <vfprintf+0x24>
 442:	6f ef       	ldi	r22, 0xFF	; 255
 444:	7f ef       	ldi	r23, 0xFF	; 255
 446:	c6 c1       	rjmp	.+908    	; 0x7d4 <__stack+0x2d5>
 448:	9a e0       	ldi	r25, 0x0A	; 10
 44a:	89 2e       	mov	r8, r25
 44c:	1e 01       	movw	r2, r28
 44e:	08 94       	sec
 450:	21 1c       	adc	r2, r1
 452:	31 1c       	adc	r3, r1
 454:	f3 01       	movw	r30, r6
 456:	23 81       	ldd	r18, Z+3	; 0x03
 458:	f2 01       	movw	r30, r4
 45a:	23 fd       	sbrc	r18, 3
 45c:	85 91       	lpm	r24, Z+
 45e:	23 ff       	sbrs	r18, 3
 460:	81 91       	ld	r24, Z+
 462:	2f 01       	movw	r4, r30
 464:	88 23       	and	r24, r24
 466:	09 f4       	brne	.+2      	; 0x46a <vfprintf+0x46>
 468:	b2 c1       	rjmp	.+868    	; 0x7ce <__stack+0x2cf>
 46a:	85 32       	cpi	r24, 0x25	; 37
 46c:	39 f4       	brne	.+14     	; 0x47c <vfprintf+0x58>
 46e:	23 fd       	sbrc	r18, 3
 470:	85 91       	lpm	r24, Z+
 472:	23 ff       	sbrs	r18, 3
 474:	81 91       	ld	r24, Z+
 476:	2f 01       	movw	r4, r30
 478:	85 32       	cpi	r24, 0x25	; 37
 47a:	29 f4       	brne	.+10     	; 0x486 <vfprintf+0x62>
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	b3 01       	movw	r22, r6
 480:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 484:	e7 cf       	rjmp	.-50     	; 0x454 <vfprintf+0x30>
 486:	98 2f       	mov	r25, r24
 488:	ff 24       	eor	r15, r15
 48a:	ee 24       	eor	r14, r14
 48c:	99 24       	eor	r9, r9
 48e:	ff e1       	ldi	r31, 0x1F	; 31
 490:	ff 15       	cp	r31, r15
 492:	d0 f0       	brcs	.+52     	; 0x4c8 <vfprintf+0xa4>
 494:	9b 32       	cpi	r25, 0x2B	; 43
 496:	69 f0       	breq	.+26     	; 0x4b2 <vfprintf+0x8e>
 498:	9c 32       	cpi	r25, 0x2C	; 44
 49a:	28 f4       	brcc	.+10     	; 0x4a6 <vfprintf+0x82>
 49c:	90 32       	cpi	r25, 0x20	; 32
 49e:	59 f0       	breq	.+22     	; 0x4b6 <vfprintf+0x92>
 4a0:	93 32       	cpi	r25, 0x23	; 35
 4a2:	91 f4       	brne	.+36     	; 0x4c8 <vfprintf+0xa4>
 4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <vfprintf+0x9e>
 4a6:	9d 32       	cpi	r25, 0x2D	; 45
 4a8:	49 f0       	breq	.+18     	; 0x4bc <vfprintf+0x98>
 4aa:	90 33       	cpi	r25, 0x30	; 48
 4ac:	69 f4       	brne	.+26     	; 0x4c8 <vfprintf+0xa4>
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	24 c0       	rjmp	.+72     	; 0x4fa <vfprintf+0xd6>
 4b2:	52 e0       	ldi	r21, 0x02	; 2
 4b4:	f5 2a       	or	r15, r21
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	f8 2a       	or	r15, r24
 4ba:	28 c0       	rjmp	.+80     	; 0x50c <__stack+0xd>
 4bc:	98 e0       	ldi	r25, 0x08	; 8
 4be:	f9 2a       	or	r15, r25
 4c0:	25 c0       	rjmp	.+74     	; 0x50c <__stack+0xd>
 4c2:	e0 e1       	ldi	r30, 0x10	; 16
 4c4:	fe 2a       	or	r15, r30
 4c6:	22 c0       	rjmp	.+68     	; 0x50c <__stack+0xd>
 4c8:	f7 fc       	sbrc	r15, 7
 4ca:	29 c0       	rjmp	.+82     	; 0x51e <__stack+0x1f>
 4cc:	89 2f       	mov	r24, r25
 4ce:	80 53       	subi	r24, 0x30	; 48
 4d0:	8a 30       	cpi	r24, 0x0A	; 10
 4d2:	70 f4       	brcc	.+28     	; 0x4f0 <vfprintf+0xcc>
 4d4:	f6 fe       	sbrs	r15, 6
 4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <vfprintf+0xbe>
 4d8:	98 9c       	mul	r9, r8
 4da:	90 2c       	mov	r9, r0
 4dc:	11 24       	eor	r1, r1
 4de:	98 0e       	add	r9, r24
 4e0:	15 c0       	rjmp	.+42     	; 0x50c <__stack+0xd>
 4e2:	e8 9c       	mul	r14, r8
 4e4:	e0 2c       	mov	r14, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	e8 0e       	add	r14, r24
 4ea:	f0 e2       	ldi	r31, 0x20	; 32
 4ec:	ff 2a       	or	r15, r31
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <__stack+0xd>
 4f0:	9e 32       	cpi	r25, 0x2E	; 46
 4f2:	29 f4       	brne	.+10     	; 0x4fe <vfprintf+0xda>
 4f4:	f6 fc       	sbrc	r15, 6
 4f6:	6b c1       	rjmp	.+726    	; 0x7ce <__stack+0x2cf>
 4f8:	40 e4       	ldi	r20, 0x40	; 64
 4fa:	f4 2a       	or	r15, r20
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <__stack+0xd>
 4fe:	9c 36       	cpi	r25, 0x6C	; 108
 500:	19 f4       	brne	.+6      	; 0x508 <__stack+0x9>
 502:	50 e8       	ldi	r21, 0x80	; 128
 504:	f5 2a       	or	r15, r21
 506:	02 c0       	rjmp	.+4      	; 0x50c <__stack+0xd>
 508:	98 36       	cpi	r25, 0x68	; 104
 50a:	49 f4       	brne	.+18     	; 0x51e <__stack+0x1f>
 50c:	f2 01       	movw	r30, r4
 50e:	23 fd       	sbrc	r18, 3
 510:	95 91       	lpm	r25, Z+
 512:	23 ff       	sbrs	r18, 3
 514:	91 91       	ld	r25, Z+
 516:	2f 01       	movw	r4, r30
 518:	99 23       	and	r25, r25
 51a:	09 f0       	breq	.+2      	; 0x51e <__stack+0x1f>
 51c:	b8 cf       	rjmp	.-144    	; 0x48e <vfprintf+0x6a>
 51e:	89 2f       	mov	r24, r25
 520:	85 54       	subi	r24, 0x45	; 69
 522:	83 30       	cpi	r24, 0x03	; 3
 524:	18 f0       	brcs	.+6      	; 0x52c <__stack+0x2d>
 526:	80 52       	subi	r24, 0x20	; 32
 528:	83 30       	cpi	r24, 0x03	; 3
 52a:	38 f4       	brcc	.+14     	; 0x53a <__stack+0x3b>
 52c:	44 e0       	ldi	r20, 0x04	; 4
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	a4 0e       	add	r10, r20
 532:	b5 1e       	adc	r11, r21
 534:	5f e3       	ldi	r21, 0x3F	; 63
 536:	59 83       	std	Y+1, r21	; 0x01
 538:	0f c0       	rjmp	.+30     	; 0x558 <__stack+0x59>
 53a:	93 36       	cpi	r25, 0x63	; 99
 53c:	31 f0       	breq	.+12     	; 0x54a <__stack+0x4b>
 53e:	93 37       	cpi	r25, 0x73	; 115
 540:	79 f0       	breq	.+30     	; 0x560 <__stack+0x61>
 542:	93 35       	cpi	r25, 0x53	; 83
 544:	09 f0       	breq	.+2      	; 0x548 <__stack+0x49>
 546:	56 c0       	rjmp	.+172    	; 0x5f4 <__stack+0xf5>
 548:	20 c0       	rjmp	.+64     	; 0x58a <__stack+0x8b>
 54a:	f5 01       	movw	r30, r10
 54c:	80 81       	ld	r24, Z
 54e:	89 83       	std	Y+1, r24	; 0x01
 550:	42 e0       	ldi	r20, 0x02	; 2
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	a4 0e       	add	r10, r20
 556:	b5 1e       	adc	r11, r21
 558:	61 01       	movw	r12, r2
 55a:	01 e0       	ldi	r16, 0x01	; 1
 55c:	10 e0       	ldi	r17, 0x00	; 0
 55e:	12 c0       	rjmp	.+36     	; 0x584 <__stack+0x85>
 560:	f5 01       	movw	r30, r10
 562:	c0 80       	ld	r12, Z
 564:	d1 80       	ldd	r13, Z+1	; 0x01
 566:	f6 fc       	sbrc	r15, 6
 568:	03 c0       	rjmp	.+6      	; 0x570 <__stack+0x71>
 56a:	6f ef       	ldi	r22, 0xFF	; 255
 56c:	7f ef       	ldi	r23, 0xFF	; 255
 56e:	02 c0       	rjmp	.+4      	; 0x574 <__stack+0x75>
 570:	69 2d       	mov	r22, r9
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	42 e0       	ldi	r20, 0x02	; 2
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	a4 0e       	add	r10, r20
 57a:	b5 1e       	adc	r11, r21
 57c:	c6 01       	movw	r24, r12
 57e:	0e 94 22 05 	call	0xa44	; 0xa44 <strnlen>
 582:	8c 01       	movw	r16, r24
 584:	5f e7       	ldi	r21, 0x7F	; 127
 586:	f5 22       	and	r15, r21
 588:	14 c0       	rjmp	.+40     	; 0x5b2 <__stack+0xb3>
 58a:	f5 01       	movw	r30, r10
 58c:	c0 80       	ld	r12, Z
 58e:	d1 80       	ldd	r13, Z+1	; 0x01
 590:	f6 fc       	sbrc	r15, 6
 592:	03 c0       	rjmp	.+6      	; 0x59a <__stack+0x9b>
 594:	6f ef       	ldi	r22, 0xFF	; 255
 596:	7f ef       	ldi	r23, 0xFF	; 255
 598:	02 c0       	rjmp	.+4      	; 0x59e <__stack+0x9f>
 59a:	69 2d       	mov	r22, r9
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	42 e0       	ldi	r20, 0x02	; 2
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	a4 0e       	add	r10, r20
 5a4:	b5 1e       	adc	r11, r21
 5a6:	c6 01       	movw	r24, r12
 5a8:	0e 94 10 05 	call	0xa20	; 0xa20 <strnlen_P>
 5ac:	8c 01       	movw	r16, r24
 5ae:	50 e8       	ldi	r21, 0x80	; 128
 5b0:	f5 2a       	or	r15, r21
 5b2:	f3 fe       	sbrs	r15, 3
 5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <__stack+0xc5>
 5b6:	1a c0       	rjmp	.+52     	; 0x5ec <__stack+0xed>
 5b8:	80 e2       	ldi	r24, 0x20	; 32
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	b3 01       	movw	r22, r6
 5be:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 5c2:	ea 94       	dec	r14
 5c4:	8e 2d       	mov	r24, r14
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	08 17       	cp	r16, r24
 5ca:	19 07       	cpc	r17, r25
 5cc:	a8 f3       	brcs	.-22     	; 0x5b8 <__stack+0xb9>
 5ce:	0e c0       	rjmp	.+28     	; 0x5ec <__stack+0xed>
 5d0:	f6 01       	movw	r30, r12
 5d2:	f7 fc       	sbrc	r15, 7
 5d4:	85 91       	lpm	r24, Z+
 5d6:	f7 fe       	sbrs	r15, 7
 5d8:	81 91       	ld	r24, Z+
 5da:	6f 01       	movw	r12, r30
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	b3 01       	movw	r22, r6
 5e0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 5e4:	e1 10       	cpse	r14, r1
 5e6:	ea 94       	dec	r14
 5e8:	01 50       	subi	r16, 0x01	; 1
 5ea:	10 40       	sbci	r17, 0x00	; 0
 5ec:	01 15       	cp	r16, r1
 5ee:	11 05       	cpc	r17, r1
 5f0:	79 f7       	brne	.-34     	; 0x5d0 <__stack+0xd1>
 5f2:	ea c0       	rjmp	.+468    	; 0x7c8 <__stack+0x2c9>
 5f4:	94 36       	cpi	r25, 0x64	; 100
 5f6:	11 f0       	breq	.+4      	; 0x5fc <__stack+0xfd>
 5f8:	99 36       	cpi	r25, 0x69	; 105
 5fa:	69 f5       	brne	.+90     	; 0x656 <__stack+0x157>
 5fc:	f7 fe       	sbrs	r15, 7
 5fe:	08 c0       	rjmp	.+16     	; 0x610 <__stack+0x111>
 600:	f5 01       	movw	r30, r10
 602:	20 81       	ld	r18, Z
 604:	31 81       	ldd	r19, Z+1	; 0x01
 606:	42 81       	ldd	r20, Z+2	; 0x02
 608:	53 81       	ldd	r21, Z+3	; 0x03
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0a c0       	rjmp	.+20     	; 0x624 <__stack+0x125>
 610:	f5 01       	movw	r30, r10
 612:	80 81       	ld	r24, Z
 614:	91 81       	ldd	r25, Z+1	; 0x01
 616:	9c 01       	movw	r18, r24
 618:	44 27       	eor	r20, r20
 61a:	37 fd       	sbrc	r19, 7
 61c:	40 95       	com	r20
 61e:	54 2f       	mov	r21, r20
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	a8 0e       	add	r10, r24
 626:	b9 1e       	adc	r11, r25
 628:	9f e6       	ldi	r25, 0x6F	; 111
 62a:	f9 22       	and	r15, r25
 62c:	57 ff       	sbrs	r21, 7
 62e:	09 c0       	rjmp	.+18     	; 0x642 <__stack+0x143>
 630:	50 95       	com	r21
 632:	40 95       	com	r20
 634:	30 95       	com	r19
 636:	21 95       	neg	r18
 638:	3f 4f       	sbci	r19, 0xFF	; 255
 63a:	4f 4f       	sbci	r20, 0xFF	; 255
 63c:	5f 4f       	sbci	r21, 0xFF	; 255
 63e:	e0 e8       	ldi	r30, 0x80	; 128
 640:	fe 2a       	or	r15, r30
 642:	ca 01       	movw	r24, r20
 644:	b9 01       	movw	r22, r18
 646:	a1 01       	movw	r20, r2
 648:	2a e0       	ldi	r18, 0x0A	; 10
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	0e 94 59 05 	call	0xab2	; 0xab2 <__ultoa_invert>
 650:	d8 2e       	mov	r13, r24
 652:	d2 18       	sub	r13, r2
 654:	40 c0       	rjmp	.+128    	; 0x6d6 <__stack+0x1d7>
 656:	95 37       	cpi	r25, 0x75	; 117
 658:	29 f4       	brne	.+10     	; 0x664 <__stack+0x165>
 65a:	1f 2d       	mov	r17, r15
 65c:	1f 7e       	andi	r17, 0xEF	; 239
 65e:	2a e0       	ldi	r18, 0x0A	; 10
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	1d c0       	rjmp	.+58     	; 0x69e <__stack+0x19f>
 664:	1f 2d       	mov	r17, r15
 666:	19 7f       	andi	r17, 0xF9	; 249
 668:	9f 36       	cpi	r25, 0x6F	; 111
 66a:	61 f0       	breq	.+24     	; 0x684 <__stack+0x185>
 66c:	90 37       	cpi	r25, 0x70	; 112
 66e:	20 f4       	brcc	.+8      	; 0x678 <__stack+0x179>
 670:	98 35       	cpi	r25, 0x58	; 88
 672:	09 f0       	breq	.+2      	; 0x676 <__stack+0x177>
 674:	ac c0       	rjmp	.+344    	; 0x7ce <__stack+0x2cf>
 676:	0f c0       	rjmp	.+30     	; 0x696 <__stack+0x197>
 678:	90 37       	cpi	r25, 0x70	; 112
 67a:	39 f0       	breq	.+14     	; 0x68a <__stack+0x18b>
 67c:	98 37       	cpi	r25, 0x78	; 120
 67e:	09 f0       	breq	.+2      	; 0x682 <__stack+0x183>
 680:	a6 c0       	rjmp	.+332    	; 0x7ce <__stack+0x2cf>
 682:	04 c0       	rjmp	.+8      	; 0x68c <__stack+0x18d>
 684:	28 e0       	ldi	r18, 0x08	; 8
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	0a c0       	rjmp	.+20     	; 0x69e <__stack+0x19f>
 68a:	10 61       	ori	r17, 0x10	; 16
 68c:	14 fd       	sbrc	r17, 4
 68e:	14 60       	ori	r17, 0x04	; 4
 690:	20 e1       	ldi	r18, 0x10	; 16
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	04 c0       	rjmp	.+8      	; 0x69e <__stack+0x19f>
 696:	14 fd       	sbrc	r17, 4
 698:	16 60       	ori	r17, 0x06	; 6
 69a:	20 e1       	ldi	r18, 0x10	; 16
 69c:	32 e0       	ldi	r19, 0x02	; 2
 69e:	17 ff       	sbrs	r17, 7
 6a0:	08 c0       	rjmp	.+16     	; 0x6b2 <__stack+0x1b3>
 6a2:	f5 01       	movw	r30, r10
 6a4:	60 81       	ld	r22, Z
 6a6:	71 81       	ldd	r23, Z+1	; 0x01
 6a8:	82 81       	ldd	r24, Z+2	; 0x02
 6aa:	93 81       	ldd	r25, Z+3	; 0x03
 6ac:	44 e0       	ldi	r20, 0x04	; 4
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <__stack+0x1c3>
 6b2:	f5 01       	movw	r30, r10
 6b4:	80 81       	ld	r24, Z
 6b6:	91 81       	ldd	r25, Z+1	; 0x01
 6b8:	bc 01       	movw	r22, r24
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	42 e0       	ldi	r20, 0x02	; 2
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	a4 0e       	add	r10, r20
 6c4:	b5 1e       	adc	r11, r21
 6c6:	a1 01       	movw	r20, r2
 6c8:	0e 94 59 05 	call	0xab2	; 0xab2 <__ultoa_invert>
 6cc:	d8 2e       	mov	r13, r24
 6ce:	d2 18       	sub	r13, r2
 6d0:	8f e7       	ldi	r24, 0x7F	; 127
 6d2:	f8 2e       	mov	r15, r24
 6d4:	f1 22       	and	r15, r17
 6d6:	f6 fe       	sbrs	r15, 6
 6d8:	0b c0       	rjmp	.+22     	; 0x6f0 <__stack+0x1f1>
 6da:	5e ef       	ldi	r21, 0xFE	; 254
 6dc:	f5 22       	and	r15, r21
 6de:	d9 14       	cp	r13, r9
 6e0:	38 f4       	brcc	.+14     	; 0x6f0 <__stack+0x1f1>
 6e2:	f4 fe       	sbrs	r15, 4
 6e4:	07 c0       	rjmp	.+14     	; 0x6f4 <__stack+0x1f5>
 6e6:	f2 fc       	sbrc	r15, 2
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <__stack+0x1f5>
 6ea:	8f ee       	ldi	r24, 0xEF	; 239
 6ec:	f8 22       	and	r15, r24
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <__stack+0x1f5>
 6f0:	1d 2d       	mov	r17, r13
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <__stack+0x1f7>
 6f4:	19 2d       	mov	r17, r9
 6f6:	f4 fe       	sbrs	r15, 4
 6f8:	0d c0       	rjmp	.+26     	; 0x714 <__stack+0x215>
 6fa:	fe 01       	movw	r30, r28
 6fc:	ed 0d       	add	r30, r13
 6fe:	f1 1d       	adc	r31, r1
 700:	80 81       	ld	r24, Z
 702:	80 33       	cpi	r24, 0x30	; 48
 704:	19 f4       	brne	.+6      	; 0x70c <__stack+0x20d>
 706:	99 ee       	ldi	r25, 0xE9	; 233
 708:	f9 22       	and	r15, r25
 70a:	08 c0       	rjmp	.+16     	; 0x71c <__stack+0x21d>
 70c:	1f 5f       	subi	r17, 0xFF	; 255
 70e:	f2 fe       	sbrs	r15, 2
 710:	05 c0       	rjmp	.+10     	; 0x71c <__stack+0x21d>
 712:	03 c0       	rjmp	.+6      	; 0x71a <__stack+0x21b>
 714:	8f 2d       	mov	r24, r15
 716:	86 78       	andi	r24, 0x86	; 134
 718:	09 f0       	breq	.+2      	; 0x71c <__stack+0x21d>
 71a:	1f 5f       	subi	r17, 0xFF	; 255
 71c:	0f 2d       	mov	r16, r15
 71e:	f3 fc       	sbrc	r15, 3
 720:	14 c0       	rjmp	.+40     	; 0x74a <__stack+0x24b>
 722:	f0 fe       	sbrs	r15, 0
 724:	0f c0       	rjmp	.+30     	; 0x744 <__stack+0x245>
 726:	1e 15       	cp	r17, r14
 728:	10 f0       	brcs	.+4      	; 0x72e <__stack+0x22f>
 72a:	9d 2c       	mov	r9, r13
 72c:	0b c0       	rjmp	.+22     	; 0x744 <__stack+0x245>
 72e:	9d 2c       	mov	r9, r13
 730:	9e 0c       	add	r9, r14
 732:	91 1a       	sub	r9, r17
 734:	1e 2d       	mov	r17, r14
 736:	06 c0       	rjmp	.+12     	; 0x744 <__stack+0x245>
 738:	80 e2       	ldi	r24, 0x20	; 32
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	b3 01       	movw	r22, r6
 73e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 742:	1f 5f       	subi	r17, 0xFF	; 255
 744:	1e 15       	cp	r17, r14
 746:	c0 f3       	brcs	.-16     	; 0x738 <__stack+0x239>
 748:	04 c0       	rjmp	.+8      	; 0x752 <__stack+0x253>
 74a:	1e 15       	cp	r17, r14
 74c:	10 f4       	brcc	.+4      	; 0x752 <__stack+0x253>
 74e:	e1 1a       	sub	r14, r17
 750:	01 c0       	rjmp	.+2      	; 0x754 <__stack+0x255>
 752:	ee 24       	eor	r14, r14
 754:	04 ff       	sbrs	r16, 4
 756:	0f c0       	rjmp	.+30     	; 0x776 <__stack+0x277>
 758:	80 e3       	ldi	r24, 0x30	; 48
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	b3 01       	movw	r22, r6
 75e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 762:	02 ff       	sbrs	r16, 2
 764:	1d c0       	rjmp	.+58     	; 0x7a0 <__stack+0x2a1>
 766:	01 fd       	sbrc	r16, 1
 768:	03 c0       	rjmp	.+6      	; 0x770 <__stack+0x271>
 76a:	88 e7       	ldi	r24, 0x78	; 120
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e c0       	rjmp	.+28     	; 0x78c <__stack+0x28d>
 770:	88 e5       	ldi	r24, 0x58	; 88
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0b c0       	rjmp	.+22     	; 0x78c <__stack+0x28d>
 776:	80 2f       	mov	r24, r16
 778:	86 78       	andi	r24, 0x86	; 134
 77a:	91 f0       	breq	.+36     	; 0x7a0 <__stack+0x2a1>
 77c:	01 ff       	sbrs	r16, 1
 77e:	02 c0       	rjmp	.+4      	; 0x784 <__stack+0x285>
 780:	8b e2       	ldi	r24, 0x2B	; 43
 782:	01 c0       	rjmp	.+2      	; 0x786 <__stack+0x287>
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	f7 fc       	sbrc	r15, 7
 788:	8d e2       	ldi	r24, 0x2D	; 45
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	b3 01       	movw	r22, r6
 78e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <__stack+0x2a1>
 794:	80 e3       	ldi	r24, 0x30	; 48
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	b3 01       	movw	r22, r6
 79a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 79e:	9a 94       	dec	r9
 7a0:	d9 14       	cp	r13, r9
 7a2:	c0 f3       	brcs	.-16     	; 0x794 <__stack+0x295>
 7a4:	da 94       	dec	r13
 7a6:	f1 01       	movw	r30, r2
 7a8:	ed 0d       	add	r30, r13
 7aa:	f1 1d       	adc	r31, r1
 7ac:	80 81       	ld	r24, Z
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	b3 01       	movw	r22, r6
 7b2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 7b6:	dd 20       	and	r13, r13
 7b8:	a9 f7       	brne	.-22     	; 0x7a4 <__stack+0x2a5>
 7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <__stack+0x2c9>
 7bc:	80 e2       	ldi	r24, 0x20	; 32
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	b3 01       	movw	r22, r6
 7c2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <fputc>
 7c6:	ea 94       	dec	r14
 7c8:	ee 20       	and	r14, r14
 7ca:	c1 f7       	brne	.-16     	; 0x7bc <__stack+0x2bd>
 7cc:	43 ce       	rjmp	.-890    	; 0x454 <vfprintf+0x30>
 7ce:	f3 01       	movw	r30, r6
 7d0:	66 81       	ldd	r22, Z+6	; 0x06
 7d2:	77 81       	ldd	r23, Z+7	; 0x07
 7d4:	cb 01       	movw	r24, r22
 7d6:	2b 96       	adiw	r28, 0x0b	; 11
 7d8:	e2 e1       	ldi	r30, 0x12	; 18
 7da:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__epilogue_restores__>

000007de <calloc>:
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	68 9f       	mul	r22, r24
 7e8:	80 01       	movw	r16, r0
 7ea:	69 9f       	mul	r22, r25
 7ec:	10 0d       	add	r17, r0
 7ee:	78 9f       	mul	r23, r24
 7f0:	10 0d       	add	r17, r0
 7f2:	11 24       	eor	r1, r1
 7f4:	c8 01       	movw	r24, r16
 7f6:	0e 94 0b 04 	call	0x816	; 0x816 <malloc>
 7fa:	ec 01       	movw	r28, r24
 7fc:	00 97       	sbiw	r24, 0x00	; 0
 7fe:	29 f0       	breq	.+10     	; 0x80a <calloc+0x2c>
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	a8 01       	movw	r20, r16
 806:	0e 94 1b 05 	call	0xa36	; 0xa36 <memset>
 80a:	ce 01       	movw	r24, r28
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	08 95       	ret

00000816 <malloc>:
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	bc 01       	movw	r22, r24
 81c:	82 30       	cpi	r24, 0x02	; 2
 81e:	91 05       	cpc	r25, r1
 820:	10 f4       	brcc	.+4      	; 0x826 <malloc+0x10>
 822:	62 e0       	ldi	r22, 0x02	; 2
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	a0 91 54 01 	lds	r26, 0x0154
 82a:	b0 91 55 01 	lds	r27, 0x0155
 82e:	ed 01       	movw	r28, r26
 830:	e0 e0       	ldi	r30, 0x00	; 0
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	50 e0       	ldi	r21, 0x00	; 0
 838:	21 c0       	rjmp	.+66     	; 0x87c <malloc+0x66>
 83a:	88 81       	ld	r24, Y
 83c:	99 81       	ldd	r25, Y+1	; 0x01
 83e:	86 17       	cp	r24, r22
 840:	97 07       	cpc	r25, r23
 842:	69 f4       	brne	.+26     	; 0x85e <malloc+0x48>
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	9b 81       	ldd	r25, Y+3	; 0x03
 848:	30 97       	sbiw	r30, 0x00	; 0
 84a:	19 f0       	breq	.+6      	; 0x852 <malloc+0x3c>
 84c:	93 83       	std	Z+3, r25	; 0x03
 84e:	82 83       	std	Z+2, r24	; 0x02
 850:	04 c0       	rjmp	.+8      	; 0x85a <malloc+0x44>
 852:	90 93 55 01 	sts	0x0155, r25
 856:	80 93 54 01 	sts	0x0154, r24
 85a:	fe 01       	movw	r30, r28
 85c:	34 c0       	rjmp	.+104    	; 0x8c6 <malloc+0xb0>
 85e:	68 17       	cp	r22, r24
 860:	79 07       	cpc	r23, r25
 862:	38 f4       	brcc	.+14     	; 0x872 <malloc+0x5c>
 864:	41 15       	cp	r20, r1
 866:	51 05       	cpc	r21, r1
 868:	19 f0       	breq	.+6      	; 0x870 <malloc+0x5a>
 86a:	84 17       	cp	r24, r20
 86c:	95 07       	cpc	r25, r21
 86e:	08 f4       	brcc	.+2      	; 0x872 <malloc+0x5c>
 870:	ac 01       	movw	r20, r24
 872:	fe 01       	movw	r30, r28
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	9b 81       	ldd	r25, Y+3	; 0x03
 878:	9c 01       	movw	r18, r24
 87a:	e9 01       	movw	r28, r18
 87c:	20 97       	sbiw	r28, 0x00	; 0
 87e:	e9 f6       	brne	.-70     	; 0x83a <malloc+0x24>
 880:	41 15       	cp	r20, r1
 882:	51 05       	cpc	r21, r1
 884:	a9 f1       	breq	.+106    	; 0x8f0 <malloc+0xda>
 886:	ca 01       	movw	r24, r20
 888:	86 1b       	sub	r24, r22
 88a:	97 0b       	sbc	r25, r23
 88c:	04 97       	sbiw	r24, 0x04	; 4
 88e:	08 f4       	brcc	.+2      	; 0x892 <malloc+0x7c>
 890:	ba 01       	movw	r22, r20
 892:	e0 e0       	ldi	r30, 0x00	; 0
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	2a c0       	rjmp	.+84     	; 0x8ec <malloc+0xd6>
 898:	8d 91       	ld	r24, X+
 89a:	9c 91       	ld	r25, X
 89c:	11 97       	sbiw	r26, 0x01	; 1
 89e:	84 17       	cp	r24, r20
 8a0:	95 07       	cpc	r25, r21
 8a2:	f9 f4       	brne	.+62     	; 0x8e2 <malloc+0xcc>
 8a4:	64 17       	cp	r22, r20
 8a6:	75 07       	cpc	r23, r21
 8a8:	81 f4       	brne	.+32     	; 0x8ca <malloc+0xb4>
 8aa:	12 96       	adiw	r26, 0x02	; 2
 8ac:	8d 91       	ld	r24, X+
 8ae:	9c 91       	ld	r25, X
 8b0:	13 97       	sbiw	r26, 0x03	; 3
 8b2:	30 97       	sbiw	r30, 0x00	; 0
 8b4:	19 f0       	breq	.+6      	; 0x8bc <malloc+0xa6>
 8b6:	93 83       	std	Z+3, r25	; 0x03
 8b8:	82 83       	std	Z+2, r24	; 0x02
 8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <malloc+0xae>
 8bc:	90 93 55 01 	sts	0x0155, r25
 8c0:	80 93 54 01 	sts	0x0154, r24
 8c4:	fd 01       	movw	r30, r26
 8c6:	32 96       	adiw	r30, 0x02	; 2
 8c8:	4f c0       	rjmp	.+158    	; 0x968 <malloc+0x152>
 8ca:	ca 01       	movw	r24, r20
 8cc:	86 1b       	sub	r24, r22
 8ce:	97 0b       	sbc	r25, r23
 8d0:	fd 01       	movw	r30, r26
 8d2:	e8 0f       	add	r30, r24
 8d4:	f9 1f       	adc	r31, r25
 8d6:	61 93       	st	Z+, r22
 8d8:	71 93       	st	Z+, r23
 8da:	02 97       	sbiw	r24, 0x02	; 2
 8dc:	8d 93       	st	X+, r24
 8de:	9c 93       	st	X, r25
 8e0:	43 c0       	rjmp	.+134    	; 0x968 <malloc+0x152>
 8e2:	fd 01       	movw	r30, r26
 8e4:	82 81       	ldd	r24, Z+2	; 0x02
 8e6:	93 81       	ldd	r25, Z+3	; 0x03
 8e8:	9c 01       	movw	r18, r24
 8ea:	d9 01       	movw	r26, r18
 8ec:	10 97       	sbiw	r26, 0x00	; 0
 8ee:	a1 f6       	brne	.-88     	; 0x898 <malloc+0x82>
 8f0:	80 91 52 01 	lds	r24, 0x0152
 8f4:	90 91 53 01 	lds	r25, 0x0153
 8f8:	89 2b       	or	r24, r25
 8fa:	41 f4       	brne	.+16     	; 0x90c <malloc+0xf6>
 8fc:	80 91 48 01 	lds	r24, 0x0148
 900:	90 91 49 01 	lds	r25, 0x0149
 904:	90 93 53 01 	sts	0x0153, r25
 908:	80 93 52 01 	sts	0x0152, r24
 90c:	40 91 4a 01 	lds	r20, 0x014A
 910:	50 91 4b 01 	lds	r21, 0x014B
 914:	41 15       	cp	r20, r1
 916:	51 05       	cpc	r21, r1
 918:	41 f4       	brne	.+16     	; 0x92a <malloc+0x114>
 91a:	4d b7       	in	r20, 0x3d	; 61
 91c:	5e b7       	in	r21, 0x3e	; 62
 91e:	80 91 46 01 	lds	r24, 0x0146
 922:	90 91 47 01 	lds	r25, 0x0147
 926:	48 1b       	sub	r20, r24
 928:	59 0b       	sbc	r21, r25
 92a:	20 91 52 01 	lds	r18, 0x0152
 92e:	30 91 53 01 	lds	r19, 0x0153
 932:	24 17       	cp	r18, r20
 934:	35 07       	cpc	r19, r21
 936:	b0 f4       	brcc	.+44     	; 0x964 <malloc+0x14e>
 938:	ca 01       	movw	r24, r20
 93a:	82 1b       	sub	r24, r18
 93c:	93 0b       	sbc	r25, r19
 93e:	86 17       	cp	r24, r22
 940:	97 07       	cpc	r25, r23
 942:	80 f0       	brcs	.+32     	; 0x964 <malloc+0x14e>
 944:	ab 01       	movw	r20, r22
 946:	4e 5f       	subi	r20, 0xFE	; 254
 948:	5f 4f       	sbci	r21, 0xFF	; 255
 94a:	84 17       	cp	r24, r20
 94c:	95 07       	cpc	r25, r21
 94e:	50 f0       	brcs	.+20     	; 0x964 <malloc+0x14e>
 950:	42 0f       	add	r20, r18
 952:	53 1f       	adc	r21, r19
 954:	50 93 53 01 	sts	0x0153, r21
 958:	40 93 52 01 	sts	0x0152, r20
 95c:	f9 01       	movw	r30, r18
 95e:	61 93       	st	Z+, r22
 960:	71 93       	st	Z+, r23
 962:	02 c0       	rjmp	.+4      	; 0x968 <malloc+0x152>
 964:	e0 e0       	ldi	r30, 0x00	; 0
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	cf 01       	movw	r24, r30
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	08 95       	ret

00000970 <free>:
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	00 97       	sbiw	r24, 0x00	; 0
 976:	09 f4       	brne	.+2      	; 0x97a <free+0xa>
 978:	50 c0       	rjmp	.+160    	; 0xa1a <free+0xaa>
 97a:	ec 01       	movw	r28, r24
 97c:	22 97       	sbiw	r28, 0x02	; 2
 97e:	1b 82       	std	Y+3, r1	; 0x03
 980:	1a 82       	std	Y+2, r1	; 0x02
 982:	a0 91 54 01 	lds	r26, 0x0154
 986:	b0 91 55 01 	lds	r27, 0x0155
 98a:	10 97       	sbiw	r26, 0x00	; 0
 98c:	09 f1       	breq	.+66     	; 0x9d0 <free+0x60>
 98e:	40 e0       	ldi	r20, 0x00	; 0
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	ac 17       	cp	r26, r28
 994:	bd 07       	cpc	r27, r29
 996:	08 f1       	brcs	.+66     	; 0x9da <free+0x6a>
 998:	bb 83       	std	Y+3, r27	; 0x03
 99a:	aa 83       	std	Y+2, r26	; 0x02
 99c:	fe 01       	movw	r30, r28
 99e:	21 91       	ld	r18, Z+
 9a0:	31 91       	ld	r19, Z+
 9a2:	e2 0f       	add	r30, r18
 9a4:	f3 1f       	adc	r31, r19
 9a6:	ae 17       	cp	r26, r30
 9a8:	bf 07       	cpc	r27, r31
 9aa:	79 f4       	brne	.+30     	; 0x9ca <free+0x5a>
 9ac:	8d 91       	ld	r24, X+
 9ae:	9c 91       	ld	r25, X
 9b0:	11 97       	sbiw	r26, 0x01	; 1
 9b2:	28 0f       	add	r18, r24
 9b4:	39 1f       	adc	r19, r25
 9b6:	2e 5f       	subi	r18, 0xFE	; 254
 9b8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ba:	39 83       	std	Y+1, r19	; 0x01
 9bc:	28 83       	st	Y, r18
 9be:	12 96       	adiw	r26, 0x02	; 2
 9c0:	8d 91       	ld	r24, X+
 9c2:	9c 91       	ld	r25, X
 9c4:	13 97       	sbiw	r26, 0x03	; 3
 9c6:	9b 83       	std	Y+3, r25	; 0x03
 9c8:	8a 83       	std	Y+2, r24	; 0x02
 9ca:	41 15       	cp	r20, r1
 9cc:	51 05       	cpc	r21, r1
 9ce:	71 f4       	brne	.+28     	; 0x9ec <free+0x7c>
 9d0:	d0 93 55 01 	sts	0x0155, r29
 9d4:	c0 93 54 01 	sts	0x0154, r28
 9d8:	20 c0       	rjmp	.+64     	; 0xa1a <free+0xaa>
 9da:	12 96       	adiw	r26, 0x02	; 2
 9dc:	8d 91       	ld	r24, X+
 9de:	9c 91       	ld	r25, X
 9e0:	13 97       	sbiw	r26, 0x03	; 3
 9e2:	ad 01       	movw	r20, r26
 9e4:	00 97       	sbiw	r24, 0x00	; 0
 9e6:	11 f0       	breq	.+4      	; 0x9ec <free+0x7c>
 9e8:	dc 01       	movw	r26, r24
 9ea:	d3 cf       	rjmp	.-90     	; 0x992 <free+0x22>
 9ec:	fa 01       	movw	r30, r20
 9ee:	d3 83       	std	Z+3, r29	; 0x03
 9f0:	c2 83       	std	Z+2, r28	; 0x02
 9f2:	21 91       	ld	r18, Z+
 9f4:	31 91       	ld	r19, Z+
 9f6:	e2 0f       	add	r30, r18
 9f8:	f3 1f       	adc	r31, r19
 9fa:	ce 17       	cp	r28, r30
 9fc:	df 07       	cpc	r29, r31
 9fe:	69 f4       	brne	.+26     	; 0xa1a <free+0xaa>
 a00:	88 81       	ld	r24, Y
 a02:	99 81       	ldd	r25, Y+1	; 0x01
 a04:	28 0f       	add	r18, r24
 a06:	39 1f       	adc	r19, r25
 a08:	2e 5f       	subi	r18, 0xFE	; 254
 a0a:	3f 4f       	sbci	r19, 0xFF	; 255
 a0c:	fa 01       	movw	r30, r20
 a0e:	31 83       	std	Z+1, r19	; 0x01
 a10:	20 83       	st	Z, r18
 a12:	8a 81       	ldd	r24, Y+2	; 0x02
 a14:	9b 81       	ldd	r25, Y+3	; 0x03
 a16:	93 83       	std	Z+3, r25	; 0x03
 a18:	82 83       	std	Z+2, r24	; 0x02
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	08 95       	ret

00000a20 <strnlen_P>:
 a20:	fc 01       	movw	r30, r24
 a22:	05 90       	lpm	r0, Z+
 a24:	61 50       	subi	r22, 0x01	; 1
 a26:	70 40       	sbci	r23, 0x00	; 0
 a28:	01 10       	cpse	r0, r1
 a2a:	d8 f7       	brcc	.-10     	; 0xa22 <strnlen_P+0x2>
 a2c:	80 95       	com	r24
 a2e:	90 95       	com	r25
 a30:	8e 0f       	add	r24, r30
 a32:	9f 1f       	adc	r25, r31
 a34:	08 95       	ret

00000a36 <memset>:
 a36:	dc 01       	movw	r26, r24
 a38:	01 c0       	rjmp	.+2      	; 0xa3c <memset+0x6>
 a3a:	6d 93       	st	X+, r22
 a3c:	41 50       	subi	r20, 0x01	; 1
 a3e:	50 40       	sbci	r21, 0x00	; 0
 a40:	e0 f7       	brcc	.-8      	; 0xa3a <memset+0x4>
 a42:	08 95       	ret

00000a44 <strnlen>:
 a44:	fc 01       	movw	r30, r24
 a46:	61 50       	subi	r22, 0x01	; 1
 a48:	70 40       	sbci	r23, 0x00	; 0
 a4a:	01 90       	ld	r0, Z+
 a4c:	01 10       	cpse	r0, r1
 a4e:	d8 f7       	brcc	.-10     	; 0xa46 <strnlen+0x2>
 a50:	80 95       	com	r24
 a52:	90 95       	com	r25
 a54:	8e 0f       	add	r24, r30
 a56:	9f 1f       	adc	r25, r31
 a58:	08 95       	ret

00000a5a <fputc>:
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	8c 01       	movw	r16, r24
 a64:	eb 01       	movw	r28, r22
 a66:	8b 81       	ldd	r24, Y+3	; 0x03
 a68:	81 ff       	sbrs	r24, 1
 a6a:	1b c0       	rjmp	.+54     	; 0xaa2 <fputc+0x48>
 a6c:	82 ff       	sbrs	r24, 2
 a6e:	0d c0       	rjmp	.+26     	; 0xa8a <fputc+0x30>
 a70:	2e 81       	ldd	r18, Y+6	; 0x06
 a72:	3f 81       	ldd	r19, Y+7	; 0x07
 a74:	8c 81       	ldd	r24, Y+4	; 0x04
 a76:	9d 81       	ldd	r25, Y+5	; 0x05
 a78:	28 17       	cp	r18, r24
 a7a:	39 07       	cpc	r19, r25
 a7c:	64 f4       	brge	.+24     	; 0xa96 <fputc+0x3c>
 a7e:	e8 81       	ld	r30, Y
 a80:	f9 81       	ldd	r31, Y+1	; 0x01
 a82:	01 93       	st	Z+, r16
 a84:	f9 83       	std	Y+1, r31	; 0x01
 a86:	e8 83       	st	Y, r30
 a88:	06 c0       	rjmp	.+12     	; 0xa96 <fputc+0x3c>
 a8a:	e8 85       	ldd	r30, Y+8	; 0x08
 a8c:	f9 85       	ldd	r31, Y+9	; 0x09
 a8e:	80 2f       	mov	r24, r16
 a90:	09 95       	icall
 a92:	89 2b       	or	r24, r25
 a94:	31 f4       	brne	.+12     	; 0xaa2 <fputc+0x48>
 a96:	8e 81       	ldd	r24, Y+6	; 0x06
 a98:	9f 81       	ldd	r25, Y+7	; 0x07
 a9a:	01 96       	adiw	r24, 0x01	; 1
 a9c:	9f 83       	std	Y+7, r25	; 0x07
 a9e:	8e 83       	std	Y+6, r24	; 0x06
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <fputc+0x4c>
 aa2:	0f ef       	ldi	r16, 0xFF	; 255
 aa4:	1f ef       	ldi	r17, 0xFF	; 255
 aa6:	c8 01       	movw	r24, r16
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	1f 91       	pop	r17
 aae:	0f 91       	pop	r16
 ab0:	08 95       	ret

00000ab2 <__ultoa_invert>:
 ab2:	fa 01       	movw	r30, r20
 ab4:	aa 27       	eor	r26, r26
 ab6:	28 30       	cpi	r18, 0x08	; 8
 ab8:	51 f1       	breq	.+84     	; 0xb0e <__ultoa_invert+0x5c>
 aba:	20 31       	cpi	r18, 0x10	; 16
 abc:	81 f1       	breq	.+96     	; 0xb1e <__ultoa_invert+0x6c>
 abe:	e8 94       	clt
 ac0:	6f 93       	push	r22
 ac2:	6e 7f       	andi	r22, 0xFE	; 254
 ac4:	6e 5f       	subi	r22, 0xFE	; 254
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	af 4f       	sbci	r26, 0xFF	; 255
 ace:	b1 e0       	ldi	r27, 0x01	; 1
 ad0:	3e d0       	rcall	.+124    	; 0xb4e <__ultoa_invert+0x9c>
 ad2:	b4 e0       	ldi	r27, 0x04	; 4
 ad4:	3c d0       	rcall	.+120    	; 0xb4e <__ultoa_invert+0x9c>
 ad6:	67 0f       	add	r22, r23
 ad8:	78 1f       	adc	r23, r24
 ada:	89 1f       	adc	r24, r25
 adc:	9a 1f       	adc	r25, r26
 ade:	a1 1d       	adc	r26, r1
 ae0:	68 0f       	add	r22, r24
 ae2:	79 1f       	adc	r23, r25
 ae4:	8a 1f       	adc	r24, r26
 ae6:	91 1d       	adc	r25, r1
 ae8:	a1 1d       	adc	r26, r1
 aea:	6a 0f       	add	r22, r26
 aec:	71 1d       	adc	r23, r1
 aee:	81 1d       	adc	r24, r1
 af0:	91 1d       	adc	r25, r1
 af2:	a1 1d       	adc	r26, r1
 af4:	20 d0       	rcall	.+64     	; 0xb36 <__ultoa_invert+0x84>
 af6:	09 f4       	brne	.+2      	; 0xafa <__ultoa_invert+0x48>
 af8:	68 94       	set
 afa:	3f 91       	pop	r19
 afc:	2a e0       	ldi	r18, 0x0A	; 10
 afe:	26 9f       	mul	r18, r22
 b00:	11 24       	eor	r1, r1
 b02:	30 19       	sub	r19, r0
 b04:	30 5d       	subi	r19, 0xD0	; 208
 b06:	31 93       	st	Z+, r19
 b08:	de f6       	brtc	.-74     	; 0xac0 <__ultoa_invert+0xe>
 b0a:	cf 01       	movw	r24, r30
 b0c:	08 95       	ret
 b0e:	46 2f       	mov	r20, r22
 b10:	47 70       	andi	r20, 0x07	; 7
 b12:	40 5d       	subi	r20, 0xD0	; 208
 b14:	41 93       	st	Z+, r20
 b16:	b3 e0       	ldi	r27, 0x03	; 3
 b18:	0f d0       	rcall	.+30     	; 0xb38 <__ultoa_invert+0x86>
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__ultoa_invert+0x5c>
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <__ultoa_invert+0x58>
 b1e:	46 2f       	mov	r20, r22
 b20:	4f 70       	andi	r20, 0x0F	; 15
 b22:	40 5d       	subi	r20, 0xD0	; 208
 b24:	4a 33       	cpi	r20, 0x3A	; 58
 b26:	18 f0       	brcs	.+6      	; 0xb2e <__ultoa_invert+0x7c>
 b28:	49 5d       	subi	r20, 0xD9	; 217
 b2a:	31 fd       	sbrc	r19, 1
 b2c:	40 52       	subi	r20, 0x20	; 32
 b2e:	41 93       	st	Z+, r20
 b30:	02 d0       	rcall	.+4      	; 0xb36 <__ultoa_invert+0x84>
 b32:	a9 f7       	brne	.-22     	; 0xb1e <__ultoa_invert+0x6c>
 b34:	ea cf       	rjmp	.-44     	; 0xb0a <__ultoa_invert+0x58>
 b36:	b4 e0       	ldi	r27, 0x04	; 4
 b38:	a6 95       	lsr	r26
 b3a:	97 95       	ror	r25
 b3c:	87 95       	ror	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	ba 95       	dec	r27
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__ultoa_invert+0x86>
 b46:	00 97       	sbiw	r24, 0x00	; 0
 b48:	61 05       	cpc	r22, r1
 b4a:	71 05       	cpc	r23, r1
 b4c:	08 95       	ret
 b4e:	9b 01       	movw	r18, r22
 b50:	ac 01       	movw	r20, r24
 b52:	0a 2e       	mov	r0, r26
 b54:	06 94       	lsr	r0
 b56:	57 95       	ror	r21
 b58:	47 95       	ror	r20
 b5a:	37 95       	ror	r19
 b5c:	27 95       	ror	r18
 b5e:	ba 95       	dec	r27
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__ultoa_invert+0xa2>
 b62:	62 0f       	add	r22, r18
 b64:	73 1f       	adc	r23, r19
 b66:	84 1f       	adc	r24, r20
 b68:	95 1f       	adc	r25, r21
 b6a:	a0 1d       	adc	r26, r0
 b6c:	08 95       	ret

00000b6e <__prologue_saves__>:
 b6e:	2f 92       	push	r2
 b70:	3f 92       	push	r3
 b72:	4f 92       	push	r4
 b74:	5f 92       	push	r5
 b76:	6f 92       	push	r6
 b78:	7f 92       	push	r7
 b7a:	8f 92       	push	r8
 b7c:	9f 92       	push	r9
 b7e:	af 92       	push	r10
 b80:	bf 92       	push	r11
 b82:	cf 92       	push	r12
 b84:	df 92       	push	r13
 b86:	ef 92       	push	r14
 b88:	ff 92       	push	r15
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	cd b7       	in	r28, 0x3d	; 61
 b94:	de b7       	in	r29, 0x3e	; 62
 b96:	ca 1b       	sub	r28, r26
 b98:	db 0b       	sbc	r29, r27
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	09 94       	ijmp

00000ba6 <__epilogue_restores__>:
 ba6:	2a 88       	ldd	r2, Y+18	; 0x12
 ba8:	39 88       	ldd	r3, Y+17	; 0x11
 baa:	48 88       	ldd	r4, Y+16	; 0x10
 bac:	5f 84       	ldd	r5, Y+15	; 0x0f
 bae:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb8:	b9 84       	ldd	r11, Y+9	; 0x09
 bba:	c8 84       	ldd	r12, Y+8	; 0x08
 bbc:	df 80       	ldd	r13, Y+7	; 0x07
 bbe:	ee 80       	ldd	r14, Y+6	; 0x06
 bc0:	fd 80       	ldd	r15, Y+5	; 0x05
 bc2:	0c 81       	ldd	r16, Y+4	; 0x04
 bc4:	1b 81       	ldd	r17, Y+3	; 0x03
 bc6:	aa 81       	ldd	r26, Y+2	; 0x02
 bc8:	b9 81       	ldd	r27, Y+1	; 0x01
 bca:	ce 0f       	add	r28, r30
 bcc:	d1 1d       	adc	r29, r1
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
 bd8:	ed 01       	movw	r28, r26
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>
