
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  00000a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000048  00000000  00000000  00000e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069c  00000000  00000000  00000e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013a  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000674  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000132  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005de  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea eb       	ldi	r30, 0xBA	; 186
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 3b 03 	call	0x676	; 0x676 <main>
  a6:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <single_stepping>:
#include "harddef.h"
#include "Silnik_krokowy.c"

void single_stepping(uint8_t direct, uint8_t stepps, uint8_t speed) 
{
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	c6 2e       	mov	r12, r22
  c0:	d4 2e       	mov	r13, r20
	if (direct == 0) {
  c2:	88 23       	and	r24, r24
  c4:	19 f0       	breq	.+6      	; 0xcc <single_stepping+0x1e>
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	50 c1       	rjmp	.+672    	; 0x36c <single_stepping+0x2be>
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	a3 c0       	rjmp	.+326    	; 0x218 <single_stepping+0x16a>
		for(int a = 0; a<stepps; ++a) {
			Serwo_PORT |= 1<<A1;
  d2:	c1 9a       	sbi	0x18, 1	; 24
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  d4:	6d 2d       	mov	r22, r13
  d6:	77 27       	eor	r23, r23
  d8:	67 fd       	sbrc	r22, 7
  da:	70 95       	com	r23
  dc:	87 2f       	mov	r24, r23
  de:	97 2f       	mov	r25, r23
  e0:	0e 94 1a 04 	call	0x834	; 0x834 <__floatsisf>
  e4:	d7 fe       	sbrs	r13, 7
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <single_stepping+0x46>
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	40 e8       	ldi	r20, 0x80	; 128
  ee:	53 e4       	ldi	r21, 0x43	; 67
  f0:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	4a ef       	ldi	r20, 0xFA	; 250
  fa:	54 e4       	ldi	r21, 0x44	; 68
  fc:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 100:	7b 01       	movw	r14, r22
 102:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e8       	ldi	r20, 0x80	; 128
 10a:	5f e3       	ldi	r21, 0x3F	; 63
 10c:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 110:	88 23       	and	r24, r24
 112:	1c f4       	brge	.+6      	; 0x11a <single_stepping+0x6c>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	12 c0       	rjmp	.+36     	; 0x13e <single_stepping+0x90>
		__ticks = 1;
	else if (__tmp > 65535)
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	4f e7       	ldi	r20, 0x7F	; 127
 120:	57 e4       	ldi	r21, 0x47	; 71
 122:	c8 01       	movw	r24, r16
 124:	b7 01       	movw	r22, r14
 126:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 12a:	18 16       	cp	r1, r24
 12c:	1c f4       	brge	.+6      	; 0x134 <single_stepping+0x86>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	05 c0       	rjmp	.+10     	; 0x13e <single_stepping+0x90>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 134:	c8 01       	movw	r24, r16
 136:	b7 01       	movw	r22, r14
 138:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 13c:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <single_stepping+0x90>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 142:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<B1;
 144:	c3 9a       	sbi	0x18, 3	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	40 e8       	ldi	r20, 0x80	; 128
 14c:	5f e3       	ldi	r21, 0x3F	; 63
 14e:	c8 01       	movw	r24, r16
 150:	b7 01       	movw	r22, r14
 152:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 156:	88 23       	and	r24, r24
 158:	1c f4       	brge	.+6      	; 0x160 <single_stepping+0xb2>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	12 c0       	rjmp	.+36     	; 0x184 <single_stepping+0xd6>
		__ticks = 1;
	else if (__tmp > 65535)
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	3f ef       	ldi	r19, 0xFF	; 255
 164:	4f e7       	ldi	r20, 0x7F	; 127
 166:	57 e4       	ldi	r21, 0x47	; 71
 168:	c8 01       	movw	r24, r16
 16a:	b7 01       	movw	r22, r14
 16c:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 170:	18 16       	cp	r1, r24
 172:	1c f4       	brge	.+6      	; 0x17a <single_stepping+0xcc>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	05 c0       	rjmp	.+10     	; 0x184 <single_stepping+0xd6>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 17a:	c8 01       	movw	r24, r16
 17c:	b7 01       	movw	r22, r14
 17e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 182:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <single_stepping+0xd6>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 188:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<A2;
 18a:	c0 9a       	sbi	0x18, 0	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	c8 01       	movw	r24, r16
 196:	b7 01       	movw	r22, r14
 198:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 19c:	88 23       	and	r24, r24
 19e:	1c f4       	brge	.+6      	; 0x1a6 <single_stepping+0xf8>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	12 c0       	rjmp	.+36     	; 0x1ca <single_stepping+0x11c>
		__ticks = 1;
	else if (__tmp > 65535)
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	3f ef       	ldi	r19, 0xFF	; 255
 1aa:	4f e7       	ldi	r20, 0x7F	; 127
 1ac:	57 e4       	ldi	r21, 0x47	; 71
 1ae:	c8 01       	movw	r24, r16
 1b0:	b7 01       	movw	r22, r14
 1b2:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 1b6:	18 16       	cp	r1, r24
 1b8:	1c f4       	brge	.+6      	; 0x1c0 <single_stepping+0x112>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <single_stepping+0x11c>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 1c0:	c8 01       	movw	r24, r16
 1c2:	b7 01       	movw	r22, r14
 1c4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 1c8:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <single_stepping+0x11c>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 1ce:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<B2;
 1d0:	c2 9a       	sbi	0x18, 2	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e8       	ldi	r20, 0x80	; 128
 1d8:	5f e3       	ldi	r21, 0x3F	; 63
 1da:	c8 01       	movw	r24, r16
 1dc:	b7 01       	movw	r22, r14
 1de:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 1e2:	88 23       	and	r24, r24
 1e4:	1c f4       	brge	.+6      	; 0x1ec <single_stepping+0x13e>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	12 c0       	rjmp	.+36     	; 0x210 <single_stepping+0x162>
		__ticks = 1;
	else if (__tmp > 65535)
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	3f ef       	ldi	r19, 0xFF	; 255
 1f0:	4f e7       	ldi	r20, 0x7F	; 127
 1f2:	57 e4       	ldi	r21, 0x47	; 71
 1f4:	c8 01       	movw	r24, r16
 1f6:	b7 01       	movw	r22, r14
 1f8:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 1fc:	18 16       	cp	r1, r24
 1fe:	1c f4       	brge	.+6      	; 0x206 <single_stepping+0x158>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	05 c0       	rjmp	.+10     	; 0x210 <single_stepping+0x162>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 206:	c8 01       	movw	r24, r16
 208:	b7 01       	movw	r22, r14
 20a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 20e:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <single_stepping+0x162>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 214:	18 ba       	out	0x18, r1	; 24
 216:	21 96       	adiw	r28, 0x01	; 1
 218:	8c 2d       	mov	r24, r12
 21a:	99 27       	eor	r25, r25
 21c:	c8 17       	cp	r28, r24
 21e:	d9 07       	cpc	r29, r25
 220:	0c f4       	brge	.+2      	; 0x224 <single_stepping+0x176>
 222:	57 cf       	rjmp	.-338    	; 0xd2 <single_stepping+0x24>
 224:	a9 c0       	rjmp	.+338    	; 0x378 <single_stepping+0x2ca>
			}
		}
	else {
		for(int a = 0; a<stepps; ++a) {
			Serwo_PORT |= 1<<B2;
 226:	c2 9a       	sbi	0x18, 2	; 24
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 228:	6d 2d       	mov	r22, r13
 22a:	77 27       	eor	r23, r23
 22c:	67 fd       	sbrc	r22, 7
 22e:	70 95       	com	r23
 230:	87 2f       	mov	r24, r23
 232:	97 2f       	mov	r25, r23
 234:	0e 94 1a 04 	call	0x834	; 0x834 <__floatsisf>
 238:	d7 fe       	sbrs	r13, 7
 23a:	06 c0       	rjmp	.+12     	; 0x248 <single_stepping+0x19a>
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e8       	ldi	r20, 0x80	; 128
 242:	53 e4       	ldi	r21, 0x43	; 67
 244:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	4a ef       	ldi	r20, 0xFA	; 250
 24e:	54 e4       	ldi	r21, 0x44	; 68
 250:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 254:	7b 01       	movw	r14, r22
 256:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e8       	ldi	r20, 0x80	; 128
 25e:	5f e3       	ldi	r21, 0x3F	; 63
 260:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 264:	88 23       	and	r24, r24
 266:	1c f4       	brge	.+6      	; 0x26e <single_stepping+0x1c0>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	12 c0       	rjmp	.+36     	; 0x292 <single_stepping+0x1e4>
		__ticks = 1;
	else if (__tmp > 65535)
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	3f ef       	ldi	r19, 0xFF	; 255
 272:	4f e7       	ldi	r20, 0x7F	; 127
 274:	57 e4       	ldi	r21, 0x47	; 71
 276:	c8 01       	movw	r24, r16
 278:	b7 01       	movw	r22, r14
 27a:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 27e:	18 16       	cp	r1, r24
 280:	1c f4       	brge	.+6      	; 0x288 <single_stepping+0x1da>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	05 c0       	rjmp	.+10     	; 0x292 <single_stepping+0x1e4>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 288:	c8 01       	movw	r24, r16
 28a:	b7 01       	movw	r22, r14
 28c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 290:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <single_stepping+0x1e4>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 296:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<A2;
 298:	c0 9a       	sbi	0x18, 0	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e8       	ldi	r20, 0x80	; 128
 2a0:	5f e3       	ldi	r21, 0x3F	; 63
 2a2:	c8 01       	movw	r24, r16
 2a4:	b7 01       	movw	r22, r14
 2a6:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 2aa:	88 23       	and	r24, r24
 2ac:	1c f4       	brge	.+6      	; 0x2b4 <single_stepping+0x206>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	12 c0       	rjmp	.+36     	; 0x2d8 <single_stepping+0x22a>
		__ticks = 1;
	else if (__tmp > 65535)
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	3f ef       	ldi	r19, 0xFF	; 255
 2b8:	4f e7       	ldi	r20, 0x7F	; 127
 2ba:	57 e4       	ldi	r21, 0x47	; 71
 2bc:	c8 01       	movw	r24, r16
 2be:	b7 01       	movw	r22, r14
 2c0:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 2c4:	18 16       	cp	r1, r24
 2c6:	1c f4       	brge	.+6      	; 0x2ce <single_stepping+0x220>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <single_stepping+0x22a>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 2ce:	c8 01       	movw	r24, r16
 2d0:	b7 01       	movw	r22, r14
 2d2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 2d6:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <single_stepping+0x22a>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 2dc:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<B1;
 2de:	c3 9a       	sbi	0x18, 3	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e8       	ldi	r20, 0x80	; 128
 2e6:	5f e3       	ldi	r21, 0x3F	; 63
 2e8:	c8 01       	movw	r24, r16
 2ea:	b7 01       	movw	r22, r14
 2ec:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 2f0:	88 23       	and	r24, r24
 2f2:	1c f4       	brge	.+6      	; 0x2fa <single_stepping+0x24c>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	12 c0       	rjmp	.+36     	; 0x31e <single_stepping+0x270>
		__ticks = 1;
	else if (__tmp > 65535)
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	3f ef       	ldi	r19, 0xFF	; 255
 2fe:	4f e7       	ldi	r20, 0x7F	; 127
 300:	57 e4       	ldi	r21, 0x47	; 71
 302:	c8 01       	movw	r24, r16
 304:	b7 01       	movw	r22, r14
 306:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 30a:	18 16       	cp	r1, r24
 30c:	1c f4       	brge	.+6      	; 0x314 <single_stepping+0x266>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	05 c0       	rjmp	.+10     	; 0x31e <single_stepping+0x270>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 314:	c8 01       	movw	r24, r16
 316:	b7 01       	movw	r22, r14
 318:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 31c:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <single_stepping+0x270>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 322:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<A1;
 324:	c1 9a       	sbi	0x18, 1	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e8       	ldi	r20, 0x80	; 128
 32c:	5f e3       	ldi	r21, 0x3F	; 63
 32e:	c8 01       	movw	r24, r16
 330:	b7 01       	movw	r22, r14
 332:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 336:	88 23       	and	r24, r24
 338:	1c f4       	brge	.+6      	; 0x340 <single_stepping+0x292>
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	12 c0       	rjmp	.+36     	; 0x364 <single_stepping+0x2b6>
		__ticks = 1;
	else if (__tmp > 65535)
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	3f ef       	ldi	r19, 0xFF	; 255
 344:	4f e7       	ldi	r20, 0x7F	; 127
 346:	57 e4       	ldi	r21, 0x47	; 71
 348:	c8 01       	movw	r24, r16
 34a:	b7 01       	movw	r22, r14
 34c:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 350:	18 16       	cp	r1, r24
 352:	1c f4       	brge	.+6      	; 0x35a <single_stepping+0x2ac>
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	05 c0       	rjmp	.+10     	; 0x364 <single_stepping+0x2b6>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 35a:	c8 01       	movw	r24, r16
 35c:	b7 01       	movw	r22, r14
 35e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 362:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <single_stepping+0x2b6>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 368:	18 ba       	out	0x18, r1	; 24
 36a:	21 96       	adiw	r28, 0x01	; 1
 36c:	8c 2d       	mov	r24, r12
 36e:	99 27       	eor	r25, r25
 370:	c8 17       	cp	r28, r24
 372:	d9 07       	cpc	r29, r25
 374:	0c f4       	brge	.+2      	; 0x378 <single_stepping+0x2ca>
 376:	57 cf       	rjmp	.-338    	; 0x226 <single_stepping+0x178>
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	08 95       	ret

0000038a <high_torque_stepping>:
			}
		}
	}

void high_torque_stepping(uint8_t direct, uint8_t stepps, uint8_t speed) 
{
 38a:	cf 92       	push	r12
 38c:	df 92       	push	r13
 38e:	ef 92       	push	r14
 390:	ff 92       	push	r15
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	c6 2e       	mov	r12, r22
 39c:	d4 2e       	mov	r13, r20
	if (direct == 0) {
 39e:	88 23       	and	r24, r24
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <high_torque_stepping+0x1e>
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	58 c1       	rjmp	.+688    	; 0x658 <__stack+0x159>
 3a8:	c0 e0       	ldi	r28, 0x00	; 0
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	a7 c0       	rjmp	.+334    	; 0x4fc <high_torque_stepping+0x172>
		for(int a = 0; a<stepps; ++a) {
			Serwo_PORT |= 1<<A1;
 3ae:	c1 9a       	sbi	0x18, 1	; 24
			Serwo_PORT |= 1<<B1;
 3b0:	c3 9a       	sbi	0x18, 3	; 24
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 3b2:	6d 2d       	mov	r22, r13
 3b4:	77 27       	eor	r23, r23
 3b6:	67 fd       	sbrc	r22, 7
 3b8:	70 95       	com	r23
 3ba:	87 2f       	mov	r24, r23
 3bc:	97 2f       	mov	r25, r23
 3be:	0e 94 1a 04 	call	0x834	; 0x834 <__floatsisf>
 3c2:	d7 fe       	sbrs	r13, 7
 3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <high_torque_stepping+0x48>
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 e8       	ldi	r20, 0x80	; 128
 3cc:	53 e4       	ldi	r21, 0x43	; 67
 3ce:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	4a ef       	ldi	r20, 0xFA	; 250
 3d8:	54 e4       	ldi	r21, 0x44	; 68
 3da:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 3de:	7b 01       	movw	r14, r22
 3e0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	40 e8       	ldi	r20, 0x80	; 128
 3e8:	5f e3       	ldi	r21, 0x3F	; 63
 3ea:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 3ee:	88 23       	and	r24, r24
 3f0:	1c f4       	brge	.+6      	; 0x3f8 <high_torque_stepping+0x6e>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	12 c0       	rjmp	.+36     	; 0x41c <high_torque_stepping+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	3f ef       	ldi	r19, 0xFF	; 255
 3fc:	4f e7       	ldi	r20, 0x7F	; 127
 3fe:	57 e4       	ldi	r21, 0x47	; 71
 400:	c8 01       	movw	r24, r16
 402:	b7 01       	movw	r22, r14
 404:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 408:	18 16       	cp	r1, r24
 40a:	1c f4       	brge	.+6      	; 0x412 <high_torque_stepping+0x88>
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	05 c0       	rjmp	.+10     	; 0x41c <high_torque_stepping+0x92>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 412:	c8 01       	movw	r24, r16
 414:	b7 01       	movw	r22, r14
 416:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 41a:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <high_torque_stepping+0x92>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 420:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<B1;
 422:	c3 9a       	sbi	0x18, 3	; 24
			Serwo_PORT |= 1<<A2;
 424:	c0 9a       	sbi	0x18, 0	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	40 e8       	ldi	r20, 0x80	; 128
 42c:	5f e3       	ldi	r21, 0x3F	; 63
 42e:	c8 01       	movw	r24, r16
 430:	b7 01       	movw	r22, r14
 432:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 436:	88 23       	and	r24, r24
 438:	1c f4       	brge	.+6      	; 0x440 <high_torque_stepping+0xb6>
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	12 c0       	rjmp	.+36     	; 0x464 <high_torque_stepping+0xda>
		__ticks = 1;
	else if (__tmp > 65535)
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	3f ef       	ldi	r19, 0xFF	; 255
 444:	4f e7       	ldi	r20, 0x7F	; 127
 446:	57 e4       	ldi	r21, 0x47	; 71
 448:	c8 01       	movw	r24, r16
 44a:	b7 01       	movw	r22, r14
 44c:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 450:	18 16       	cp	r1, r24
 452:	1c f4       	brge	.+6      	; 0x45a <high_torque_stepping+0xd0>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	05 c0       	rjmp	.+10     	; 0x464 <high_torque_stepping+0xda>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 45a:	c8 01       	movw	r24, r16
 45c:	b7 01       	movw	r22, r14
 45e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 462:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <high_torque_stepping+0xda>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 468:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<A2;
 46a:	c0 9a       	sbi	0x18, 0	; 24
			Serwo_PORT |= 1<<B2;
 46c:	c2 9a       	sbi	0x18, 2	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	40 e8       	ldi	r20, 0x80	; 128
 474:	5f e3       	ldi	r21, 0x3F	; 63
 476:	c8 01       	movw	r24, r16
 478:	b7 01       	movw	r22, r14
 47a:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 47e:	88 23       	and	r24, r24
 480:	1c f4       	brge	.+6      	; 0x488 <high_torque_stepping+0xfe>
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	12 c0       	rjmp	.+36     	; 0x4ac <high_torque_stepping+0x122>
		__ticks = 1;
	else if (__tmp > 65535)
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	3f ef       	ldi	r19, 0xFF	; 255
 48c:	4f e7       	ldi	r20, 0x7F	; 127
 48e:	57 e4       	ldi	r21, 0x47	; 71
 490:	c8 01       	movw	r24, r16
 492:	b7 01       	movw	r22, r14
 494:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 498:	18 16       	cp	r1, r24
 49a:	1c f4       	brge	.+6      	; 0x4a2 <high_torque_stepping+0x118>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <high_torque_stepping+0x122>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 4a2:	c8 01       	movw	r24, r16
 4a4:	b7 01       	movw	r22, r14
 4a6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 4aa:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <high_torque_stepping+0x122>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 4b0:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<B2;
 4b2:	c2 9a       	sbi	0x18, 2	; 24
			Serwo_PORT |= 1<<A1;
 4b4:	c1 9a       	sbi	0x18, 1	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	40 e8       	ldi	r20, 0x80	; 128
 4bc:	5f e3       	ldi	r21, 0x3F	; 63
 4be:	c8 01       	movw	r24, r16
 4c0:	b7 01       	movw	r22, r14
 4c2:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 4c6:	88 23       	and	r24, r24
 4c8:	1c f4       	brge	.+6      	; 0x4d0 <high_torque_stepping+0x146>
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	12 c0       	rjmp	.+36     	; 0x4f4 <high_torque_stepping+0x16a>
		__ticks = 1;
	else if (__tmp > 65535)
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	3f ef       	ldi	r19, 0xFF	; 255
 4d4:	4f e7       	ldi	r20, 0x7F	; 127
 4d6:	57 e4       	ldi	r21, 0x47	; 71
 4d8:	c8 01       	movw	r24, r16
 4da:	b7 01       	movw	r22, r14
 4dc:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 4e0:	18 16       	cp	r1, r24
 4e2:	1c f4       	brge	.+6      	; 0x4ea <high_torque_stepping+0x160>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <high_torque_stepping+0x16a>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 4ea:	c8 01       	movw	r24, r16
 4ec:	b7 01       	movw	r22, r14
 4ee:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 4f2:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <high_torque_stepping+0x16a>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 4f8:	18 ba       	out	0x18, r1	; 24
 4fa:	21 96       	adiw	r28, 0x01	; 1
 4fc:	8c 2d       	mov	r24, r12
 4fe:	99 27       	eor	r25, r25
 500:	c8 17       	cp	r28, r24
 502:	d9 07       	cpc	r29, r25
 504:	0c f4       	brge	.+2      	; 0x508 <__stack+0x9>
 506:	53 cf       	rjmp	.-346    	; 0x3ae <high_torque_stepping+0x24>
 508:	ad c0       	rjmp	.+346    	; 0x664 <__stack+0x165>
			}
		}
	else {
		for(int a = 0; a<stepps; ++a) {
			Serwo_PORT |= 1<<B2;
 50a:	c2 9a       	sbi	0x18, 2	; 24
			Serwo_PORT |= 1<<A1;
 50c:	c1 9a       	sbi	0x18, 1	; 24
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 50e:	6d 2d       	mov	r22, r13
 510:	77 27       	eor	r23, r23
 512:	67 fd       	sbrc	r22, 7
 514:	70 95       	com	r23
 516:	87 2f       	mov	r24, r23
 518:	97 2f       	mov	r25, r23
 51a:	0e 94 1a 04 	call	0x834	; 0x834 <__floatsisf>
 51e:	d7 fe       	sbrs	r13, 7
 520:	06 c0       	rjmp	.+12     	; 0x52e <__stack+0x2f>
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e8       	ldi	r20, 0x80	; 128
 528:	53 e4       	ldi	r21, 0x43	; 67
 52a:	0e 94 bb 03 	call	0x776	; 0x776 <__addsf3>
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	4a ef       	ldi	r20, 0xFA	; 250
 534:	54 e4       	ldi	r21, 0x44	; 68
 536:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3>
 53a:	7b 01       	movw	r14, r22
 53c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	40 e8       	ldi	r20, 0x80	; 128
 544:	5f e3       	ldi	r21, 0x3F	; 63
 546:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 54a:	88 23       	and	r24, r24
 54c:	1c f4       	brge	.+6      	; 0x554 <__stack+0x55>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	12 c0       	rjmp	.+36     	; 0x578 <__stack+0x79>
		__ticks = 1;
	else if (__tmp > 65535)
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	3f ef       	ldi	r19, 0xFF	; 255
 558:	4f e7       	ldi	r20, 0x7F	; 127
 55a:	57 e4       	ldi	r21, 0x47	; 71
 55c:	c8 01       	movw	r24, r16
 55e:	b7 01       	movw	r22, r14
 560:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 564:	18 16       	cp	r1, r24
 566:	1c f4       	brge	.+6      	; 0x56e <__stack+0x6f>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	05 c0       	rjmp	.+10     	; 0x578 <__stack+0x79>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 56e:	c8 01       	movw	r24, r16
 570:	b7 01       	movw	r22, r14
 572:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 576:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <__stack+0x79>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 57c:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<A2;
 57e:	c0 9a       	sbi	0x18, 0	; 24
			Serwo_PORT |= 1<<B2;
 580:	c2 9a       	sbi	0x18, 2	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	40 e8       	ldi	r20, 0x80	; 128
 588:	5f e3       	ldi	r21, 0x3F	; 63
 58a:	c8 01       	movw	r24, r16
 58c:	b7 01       	movw	r22, r14
 58e:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 592:	88 23       	and	r24, r24
 594:	1c f4       	brge	.+6      	; 0x59c <__stack+0x9d>
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	12 c0       	rjmp	.+36     	; 0x5c0 <__stack+0xc1>
		__ticks = 1;
	else if (__tmp > 65535)
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	3f ef       	ldi	r19, 0xFF	; 255
 5a0:	4f e7       	ldi	r20, 0x7F	; 127
 5a2:	57 e4       	ldi	r21, 0x47	; 71
 5a4:	c8 01       	movw	r24, r16
 5a6:	b7 01       	movw	r22, r14
 5a8:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 5ac:	18 16       	cp	r1, r24
 5ae:	1c f4       	brge	.+6      	; 0x5b6 <__stack+0xb7>
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <__stack+0xc1>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 5b6:	c8 01       	movw	r24, r16
 5b8:	b7 01       	movw	r22, r14
 5ba:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 5be:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <__stack+0xc1>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 5c4:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<B1;
 5c6:	c3 9a       	sbi	0x18, 3	; 24
			Serwo_PORT |= 1<<A2;
 5c8:	c0 9a       	sbi	0x18, 0	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	40 e8       	ldi	r20, 0x80	; 128
 5d0:	5f e3       	ldi	r21, 0x3F	; 63
 5d2:	c8 01       	movw	r24, r16
 5d4:	b7 01       	movw	r22, r14
 5d6:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 5da:	88 23       	and	r24, r24
 5dc:	1c f4       	brge	.+6      	; 0x5e4 <__stack+0xe5>
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	12 c0       	rjmp	.+36     	; 0x608 <__stack+0x109>
		__ticks = 1;
	else if (__tmp > 65535)
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	3f ef       	ldi	r19, 0xFF	; 255
 5e8:	4f e7       	ldi	r20, 0x7F	; 127
 5ea:	57 e4       	ldi	r21, 0x47	; 71
 5ec:	c8 01       	movw	r24, r16
 5ee:	b7 01       	movw	r22, r14
 5f0:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 5f4:	18 16       	cp	r1, r24
 5f6:	1c f4       	brge	.+6      	; 0x5fe <__stack+0xff>
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	05 c0       	rjmp	.+10     	; 0x608 <__stack+0x109>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 5fe:	c8 01       	movw	r24, r16
 600:	b7 01       	movw	r22, r14
 602:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 606:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <__stack+0x109>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 60c:	18 ba       	out	0x18, r1	; 24
			Serwo_PORT |= 1<<A1;
 60e:	c1 9a       	sbi	0x18, 1	; 24
			Serwo_PORT |= 1<<B1;
 610:	c3 9a       	sbi	0x18, 3	; 24
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	40 e8       	ldi	r20, 0x80	; 128
 618:	5f e3       	ldi	r21, 0x3F	; 63
 61a:	c8 01       	movw	r24, r16
 61c:	b7 01       	movw	r22, r14
 61e:	0e 94 24 04 	call	0x848	; 0x848 <__eqsf2>
 622:	88 23       	and	r24, r24
 624:	1c f4       	brge	.+6      	; 0x62c <__stack+0x12d>
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	12 c0       	rjmp	.+36     	; 0x650 <__stack+0x151>
		__ticks = 1;
	else if (__tmp > 65535)
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	3f ef       	ldi	r19, 0xFF	; 255
 630:	4f e7       	ldi	r20, 0x7F	; 127
 632:	57 e4       	ldi	r21, 0x47	; 71
 634:	c8 01       	movw	r24, r16
 636:	b7 01       	movw	r22, r14
 638:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 63c:	18 16       	cp	r1, r24
 63e:	1c f4       	brge	.+6      	; 0x646 <__stack+0x147>
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	05 c0       	rjmp	.+10     	; 0x650 <__stack+0x151>
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
 646:	c8 01       	movw	r24, r16
 648:	b7 01       	movw	r22, r14
 64a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixsfsi>
 64e:	cb 01       	movw	r24, r22
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <__stack+0x151>
			_delay_ms(speed);
			Serwo_PORT = ~(0xff);
 654:	18 ba       	out	0x18, r1	; 24
 656:	21 96       	adiw	r28, 0x01	; 1
 658:	8c 2d       	mov	r24, r12
 65a:	99 27       	eor	r25, r25
 65c:	c8 17       	cp	r28, r24
 65e:	d9 07       	cpc	r29, r25
 660:	0c f4       	brge	.+2      	; 0x664 <__stack+0x165>
 662:	53 cf       	rjmp	.-346    	; 0x50a <__stack+0xb>
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	ff 90       	pop	r15
 66e:	ef 90       	pop	r14
 670:	df 90       	pop	r13
 672:	cf 90       	pop	r12
 674:	08 95       	ret

00000676 <main>:
			}
		}
	}

int main(void) {
 676:	8f e0       	ldi	r24, 0x0F	; 15
 678:	87 bb       	out	0x17, r24	; 23
	//Inicjalizacja
	Serwo_DDR = 1<<A1 | 1<<A2 | 1<<B1 | 1<<B2;
	Serwo_PORT = ~(1<<A1 | 1<<A2 | 1<<B1 | 1<<B2);
 67a:	80 ef       	ldi	r24, 0xF0	; 240
 67c:	88 bb       	out	0x18, r24	; 24
	//Koniec inicjacji

	single_stepping(1,12,5);
 67e:	45 e0       	ldi	r20, 0x05	; 5
 680:	6c e0       	ldi	r22, 0x0C	; 12
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(0,12,5);
 688:	45 e0       	ldi	r20, 0x05	; 5
 68a:	6c e0       	ldi	r22, 0x0C	; 12
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,5);
 692:	45 e0       	ldi	r20, 0x05	; 5
 694:	6c e0       	ldi	r22, 0x0C	; 12
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(0,12,5);
 69c:	45 e0       	ldi	r20, 0x05	; 5
 69e:	6c e0       	ldi	r22, 0x0C	; 12
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,5);
 6a6:	45 e0       	ldi	r20, 0x05	; 5
 6a8:	6c e0       	ldi	r22, 0x0C	; 12
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(0,12,5);
 6b0:	45 e0       	ldi	r20, 0x05	; 5
 6b2:	6c e0       	ldi	r22, 0x0C	; 12
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>

	high_torque_stepping(1, 24, 10);
 6ba:	4a e0       	ldi	r20, 0x0A	; 10
 6bc:	68 e1       	ldi	r22, 0x18	; 24
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 c5 01 	call	0x38a	; 0x38a <high_torque_stepping>
	high_torque_stepping(0, 24, 10);
 6c4:	4a e0       	ldi	r20, 0x0A	; 10
 6c6:	68 e1       	ldi	r22, 0x18	; 24
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	0e 94 c5 01 	call	0x38a	; 0x38a <high_torque_stepping>
	high_torque_stepping(1, 24, 10);
 6ce:	4a e0       	ldi	r20, 0x0A	; 10
 6d0:	68 e1       	ldi	r22, 0x18	; 24
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	0e 94 c5 01 	call	0x38a	; 0x38a <high_torque_stepping>
	high_torque_stepping(0, 24, 10);
 6d8:	4a e0       	ldi	r20, 0x0A	; 10
 6da:	68 e1       	ldi	r22, 0x18	; 24
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	0e 94 c5 01 	call	0x38a	; 0x38a <high_torque_stepping>
	high_torque_stepping(1, 24, 10);
 6e2:	4a e0       	ldi	r20, 0x0A	; 10
 6e4:	68 e1       	ldi	r22, 0x18	; 24
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	0e 94 c5 01 	call	0x38a	; 0x38a <high_torque_stepping>
	
	single_stepping(1,12,50);
 6ec:	42 e3       	ldi	r20, 0x32	; 50
 6ee:	6c e0       	ldi	r22, 0x0C	; 12
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,40);
 6f6:	48 e2       	ldi	r20, 0x28	; 40
 6f8:	6c e0       	ldi	r22, 0x0C	; 12
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,30);
 700:	4e e1       	ldi	r20, 0x1E	; 30
 702:	6c e0       	ldi	r22, 0x0C	; 12
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,20);
 70a:	44 e1       	ldi	r20, 0x14	; 20
 70c:	6c e0       	ldi	r22, 0x0C	; 12
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,15);
 714:	4f e0       	ldi	r20, 0x0F	; 15
 716:	6c e0       	ldi	r22, 0x0C	; 12
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,10);
 71e:	4a e0       	ldi	r20, 0x0A	; 10
 720:	6c e0       	ldi	r22, 0x0C	; 12
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,5);
 728:	45 e0       	ldi	r20, 0x05	; 5
 72a:	6c e0       	ldi	r22, 0x0C	; 12
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,4);
 732:	44 e0       	ldi	r20, 0x04	; 4
 734:	6c e0       	ldi	r22, 0x0C	; 12
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,3);
 73c:	43 e0       	ldi	r20, 0x03	; 3
 73e:	6c e0       	ldi	r22, 0x0C	; 12
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,2);
 746:	42 e0       	ldi	r20, 0x02	; 2
 748:	6c e0       	ldi	r22, 0x0C	; 12
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,2);
 750:	42 e0       	ldi	r20, 0x02	; 2
 752:	6c e0       	ldi	r22, 0x0C	; 12
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,12,2);
 75a:	42 e0       	ldi	r20, 0x02	; 2
 75c:	6c e0       	ldi	r22, 0x0C	; 12
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	single_stepping(1,240,2);
 764:	42 e0       	ldi	r20, 0x02	; 2
 766:	60 ef       	ldi	r22, 0xF0	; 240
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	0e 94 57 00 	call	0xae	; 0xae <single_stepping>
	return 0;
	}
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	08 95       	ret

00000774 <__subsf3>:
 774:	50 58       	subi	r21, 0x80	; 128

00000776 <__addsf3>:
 776:	19 2e       	mov	r1, r25
 778:	a6 d0       	rcall	.+332    	; 0x8c6 <__fp_split3>
 77a:	01 d0       	rcall	.+2      	; 0x77e <__addsf3x>
 77c:	8c c0       	rjmp	.+280    	; 0x896 <__fp_merge>

0000077e <__addsf3x>:
 77e:	ba 17       	cp	r27, r26
 780:	62 07       	cpc	r22, r18
 782:	73 07       	cpc	r23, r19
 784:	84 07       	cpc	r24, r20
 786:	95 07       	cpc	r25, r21
 788:	b1 f1       	breq	.+108    	; 0x7f6 <__addsf3x+0x78>
 78a:	88 f4       	brcc	.+34     	; 0x7ae <__addsf3x+0x30>
 78c:	0e f4       	brtc	.+2      	; 0x790 <__addsf3x+0x12>
 78e:	10 94       	com	r1
 790:	0b 2e       	mov	r0, r27
 792:	ba 2f       	mov	r27, r26
 794:	a0 2d       	mov	r26, r0
 796:	06 2e       	mov	r0, r22
 798:	62 2f       	mov	r22, r18
 79a:	20 2d       	mov	r18, r0
 79c:	07 2e       	mov	r0, r23
 79e:	73 2f       	mov	r23, r19
 7a0:	30 2d       	mov	r19, r0
 7a2:	08 2e       	mov	r0, r24
 7a4:	84 2f       	mov	r24, r20
 7a6:	40 2d       	mov	r20, r0
 7a8:	09 2e       	mov	r0, r25
 7aa:	95 2f       	mov	r25, r21
 7ac:	50 2d       	mov	r21, r0
 7ae:	ff 27       	eor	r31, r31
 7b0:	55 23       	and	r21, r21
 7b2:	b9 f0       	breq	.+46     	; 0x7e2 <__addsf3x+0x64>
 7b4:	59 1b       	sub	r21, r25
 7b6:	49 f0       	breq	.+18     	; 0x7ca <__addsf3x+0x4c>
 7b8:	57 3e       	cpi	r21, 0xE7	; 231
 7ba:	98 f0       	brcs	.+38     	; 0x7e2 <__addsf3x+0x64>
 7bc:	46 95       	lsr	r20
 7be:	37 95       	ror	r19
 7c0:	27 95       	ror	r18
 7c2:	a7 95       	ror	r26
 7c4:	f0 40       	sbci	r31, 0x00	; 0
 7c6:	53 95       	inc	r21
 7c8:	c9 f7       	brne	.-14     	; 0x7bc <__addsf3x+0x3e>
 7ca:	76 f0       	brts	.+28     	; 0x7e8 <__addsf3x+0x6a>
 7cc:	ba 0f       	add	r27, r26
 7ce:	62 1f       	adc	r22, r18
 7d0:	73 1f       	adc	r23, r19
 7d2:	84 1f       	adc	r24, r20
 7d4:	30 f4       	brcc	.+12     	; 0x7e2 <__addsf3x+0x64>
 7d6:	87 95       	ror	r24
 7d8:	77 95       	ror	r23
 7da:	67 95       	ror	r22
 7dc:	b7 95       	ror	r27
 7de:	f0 40       	sbci	r31, 0x00	; 0
 7e0:	93 95       	inc	r25
 7e2:	17 fa       	bst	r1, 7
 7e4:	0f 2e       	mov	r0, r31
 7e6:	08 95       	ret
 7e8:	bf 1b       	sub	r27, r31
 7ea:	bb 27       	eor	r27, r27
 7ec:	ba 0b       	sbc	r27, r26
 7ee:	62 0b       	sbc	r22, r18
 7f0:	73 0b       	sbc	r23, r19
 7f2:	84 0b       	sbc	r24, r20
 7f4:	f6 cf       	rjmp	.-20     	; 0x7e2 <__addsf3x+0x64>
 7f6:	de f6       	brtc	.-74     	; 0x7ae <__addsf3x+0x30>
 7f8:	92 c0       	rjmp	.+292    	; 0x91e <__fp_zerox>

000007fa <__fixsfsi>:
 7fa:	97 fb       	bst	r25, 7
 7fc:	70 d0       	rcall	.+224    	; 0x8de <__fp_split1>
 7fe:	9f 37       	cpi	r25, 0x7F	; 127
 800:	38 f0       	brcs	.+14     	; 0x810 <__fixsfsi+0x16>
 802:	fe e9       	ldi	r31, 0x9E	; 158
 804:	f9 1b       	sub	r31, r25
 806:	98 2f       	mov	r25, r24
 808:	87 2f       	mov	r24, r23
 80a:	76 2f       	mov	r23, r22
 80c:	6b 2f       	mov	r22, r27
 80e:	05 c0       	rjmp	.+10     	; 0x81a <__fixsfsi+0x20>
 810:	83 c0       	rjmp	.+262    	; 0x918 <__fp_zero>
 812:	96 95       	lsr	r25
 814:	87 95       	ror	r24
 816:	77 95       	ror	r23
 818:	67 95       	ror	r22
 81a:	f1 50       	subi	r31, 0x01	; 1
 81c:	d0 f7       	brcc	.-12     	; 0x812 <__fixsfsi+0x18>
 81e:	3e f4       	brtc	.+14     	; 0x82e <__fp_lneg+0xe>

00000820 <__fp_lneg>:
 820:	90 95       	com	r25
 822:	80 95       	com	r24
 824:	70 95       	com	r23
 826:	61 95       	neg	r22
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__floatunssisf>:
 830:	e8 94       	clt
 832:	03 c0       	rjmp	.+6      	; 0x83a <__floatsisf+0x6>

00000834 <__floatsisf>:
 834:	97 fb       	bst	r25, 7
 836:	0e f4       	brtc	.+2      	; 0x83a <__floatsisf+0x6>
 838:	f3 df       	rcall	.-26     	; 0x820 <__fp_lneg>
 83a:	b6 2f       	mov	r27, r22
 83c:	67 2f       	mov	r22, r23
 83e:	78 2f       	mov	r23, r24
 840:	89 2f       	mov	r24, r25
 842:	9e e9       	ldi	r25, 0x9E	; 158
 844:	00 24       	eor	r0, r0
 846:	27 c0       	rjmp	.+78     	; 0x896 <__fp_merge>

00000848 <__eqsf2>:
 848:	0e d0       	rcall	.+28     	; 0x866 <.fp_cmp>
 84a:	5e f0       	brts	.+22     	; 0x862 <__cmpsf2+0xe>
 84c:	04 c0       	rjmp	.+8      	; 0x856 <__cmpsf2+0x2>

0000084e <__gesf2>:
 84e:	0b d0       	rcall	.+22     	; 0x866 <.fp_cmp>
 850:	26 f0       	brts	.+8      	; 0x85a <__cmpsf2+0x6>
 852:	01 c0       	rjmp	.+2      	; 0x856 <__cmpsf2+0x2>

00000854 <__cmpsf2>:
 854:	08 d0       	rcall	.+16     	; 0x866 <.fp_cmp>
 856:	19 f0       	breq	.+6      	; 0x85e <__cmpsf2+0xa>
 858:	20 f4       	brcc	.+8      	; 0x862 <__cmpsf2+0xe>
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	08 95       	ret
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	08 95       	ret
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	08 95       	ret

00000866 <.fp_cmp>:
 866:	97 fb       	bst	r25, 7
 868:	09 2e       	mov	r0, r25
 86a:	05 26       	eor	r0, r21
 86c:	00 f8       	bld	r0, 0
 86e:	68 94       	set
 870:	2d d0       	rcall	.+90     	; 0x8cc <__fp_split2>
 872:	e8 94       	clt
 874:	07 fc       	sbrc	r0, 7
 876:	07 c0       	rjmp	.+14     	; 0x886 <.fp_cmp+0x20>
 878:	62 17       	cp	r22, r18
 87a:	73 07       	cpc	r23, r19
 87c:	84 07       	cpc	r24, r20
 87e:	95 07       	cpc	r25, r21
 880:	21 f0       	breq	.+8      	; 0x88a <.fp_cmp+0x24>
 882:	08 f4       	brcc	.+2      	; 0x886 <.fp_cmp+0x20>
 884:	00 94       	com	r0
 886:	07 94       	ror	r0
 888:	98 94       	clz
 88a:	08 95       	ret
 88c:	9a 95       	dec	r25
 88e:	bb 0f       	add	r27, r27
 890:	66 1f       	adc	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24

00000896 <__fp_merge>:
 896:	11 24       	eor	r1, r1
 898:	99 23       	and	r25, r25
 89a:	a1 f0       	breq	.+40     	; 0x8c4 <__fp_merge+0x2e>
 89c:	88 23       	and	r24, r24
 89e:	b2 f7       	brpl	.-20     	; 0x88c <.fp_cmp+0x26>
 8a0:	9f 3f       	cpi	r25, 0xFF	; 255
 8a2:	59 f0       	breq	.+22     	; 0x8ba <__fp_merge+0x24>
 8a4:	bb 0f       	add	r27, r27
 8a6:	48 f4       	brcc	.+18     	; 0x8ba <__fp_merge+0x24>
 8a8:	21 f4       	brne	.+8      	; 0x8b2 <__fp_merge+0x1c>
 8aa:	00 20       	and	r0, r0
 8ac:	11 f4       	brne	.+4      	; 0x8b2 <__fp_merge+0x1c>
 8ae:	60 ff       	sbrs	r22, 0
 8b0:	04 c0       	rjmp	.+8      	; 0x8ba <__fp_merge+0x24>
 8b2:	6f 5f       	subi	r22, 0xFF	; 255
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	88 1f       	adc	r24, r24
 8bc:	97 95       	ror	r25
 8be:	87 95       	ror	r24
 8c0:	97 f9       	bld	r25, 7
 8c2:	08 95       	ret
 8c4:	29 c0       	rjmp	.+82     	; 0x918 <__fp_zero>

000008c6 <__fp_split3>:
 8c6:	05 2e       	mov	r0, r21
 8c8:	09 26       	eor	r0, r25
 8ca:	07 fa       	bst	r0, 7

000008cc <__fp_split2>:
 8cc:	44 0f       	add	r20, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	79 f0       	breq	.+30     	; 0x8f2 <__fp_split1+0x14>
 8d4:	aa 27       	eor	r26, r26
 8d6:	a5 17       	cp	r26, r21
 8d8:	08 f0       	brcs	.+2      	; 0x8dc <__fp_split2+0x10>
 8da:	51 e0       	ldi	r21, 0x01	; 1
 8dc:	47 95       	ror	r20

000008de <__fp_split1>:
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	9f 3f       	cpi	r25, 0xFF	; 255
 8e4:	31 f0       	breq	.+12     	; 0x8f2 <__fp_split1+0x14>
 8e6:	bb 27       	eor	r27, r27
 8e8:	b9 17       	cp	r27, r25
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <__fp_split1+0x10>
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	87 95       	ror	r24
 8f0:	08 95       	ret
 8f2:	9f 91       	pop	r25
 8f4:	9f 91       	pop	r25
 8f6:	11 24       	eor	r1, r1
 8f8:	5c c0       	rjmp	.+184    	; 0x9b2 <__fp_nan>

000008fa <__fp_split_a>:
 8fa:	97 fb       	bst	r25, 7
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	9f 3f       	cpi	r25, 0xFF	; 255
 902:	31 f0       	breq	.+12     	; 0x910 <__fp_split_a+0x16>
 904:	bb 27       	eor	r27, r27
 906:	b9 17       	cp	r27, r25
 908:	08 f0       	brcs	.+2      	; 0x90c <__fp_split_a+0x12>
 90a:	91 e0       	ldi	r25, 0x01	; 1
 90c:	87 95       	ror	r24
 90e:	08 95       	ret
 910:	9f 91       	pop	r25
 912:	9f 91       	pop	r25
 914:	11 24       	eor	r1, r1
 916:	4d c0       	rjmp	.+154    	; 0x9b2 <__fp_nan>

00000918 <__fp_zero>:
 918:	66 27       	eor	r22, r22
 91a:	77 27       	eor	r23, r23
 91c:	88 27       	eor	r24, r24

0000091e <__fp_zerox>:
 91e:	99 27       	eor	r25, r25
 920:	08 95       	ret

00000922 <__mulsf3>:
 922:	d1 df       	rcall	.-94     	; 0x8c6 <__fp_split3>
 924:	01 d0       	rcall	.+2      	; 0x928 <__mulsf3x>
 926:	b7 cf       	rjmp	.-146    	; 0x896 <__fp_merge>

00000928 <__mulsf3x>:
 928:	99 23       	and	r25, r25
 92a:	39 f0       	breq	.+14     	; 0x93a <__mulsf3x+0x12>
 92c:	55 23       	and	r21, r21
 92e:	29 f0       	breq	.+10     	; 0x93a <__mulsf3x+0x12>
 930:	9f 57       	subi	r25, 0x7F	; 127
 932:	5f 57       	subi	r21, 0x7F	; 127
 934:	95 0f       	add	r25, r21
 936:	13 f4       	brvc	.+4      	; 0x93c <__mulsf3x+0x14>
 938:	9a f1       	brmi	.+102    	; 0x9a0 <__mulsf3x+0x78>
 93a:	f1 cf       	rjmp	.-30     	; 0x91e <__fp_zerox>
 93c:	91 58       	subi	r25, 0x81	; 129
 93e:	9f 3f       	cpi	r25, 0xFF	; 255
 940:	e1 f3       	breq	.-8      	; 0x93a <__mulsf3x+0x12>
 942:	62 9f       	mul	r22, r18
 944:	a1 2d       	mov	r26, r1
 946:	0f 92       	push	r0
 948:	bb 27       	eor	r27, r27
 94a:	63 9f       	mul	r22, r19
 94c:	a0 0d       	add	r26, r0
 94e:	b1 1d       	adc	r27, r1
 950:	ee 27       	eor	r30, r30
 952:	72 9f       	mul	r23, r18
 954:	a0 0d       	add	r26, r0
 956:	b1 1d       	adc	r27, r1
 958:	ee 1f       	adc	r30, r30
 95a:	af 93       	push	r26
 95c:	aa 27       	eor	r26, r26
 95e:	64 9f       	mul	r22, r20
 960:	b0 0d       	add	r27, r0
 962:	e1 1d       	adc	r30, r1
 964:	73 9f       	mul	r23, r19
 966:	b0 0d       	add	r27, r0
 968:	e1 1d       	adc	r30, r1
 96a:	aa 1f       	adc	r26, r26
 96c:	66 27       	eor	r22, r22
 96e:	82 9f       	mul	r24, r18
 970:	b0 0d       	add	r27, r0
 972:	e1 1d       	adc	r30, r1
 974:	a6 1f       	adc	r26, r22
 976:	55 27       	eor	r21, r21
 978:	74 9f       	mul	r23, r20
 97a:	e0 0d       	add	r30, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	55 1f       	adc	r21, r21
 980:	83 9f       	mul	r24, r19
 982:	e0 0d       	add	r30, r0
 984:	a1 1d       	adc	r26, r1
 986:	56 1f       	adc	r21, r22
 988:	84 9f       	mul	r24, r20
 98a:	a0 0d       	add	r26, r0
 98c:	51 1d       	adc	r21, r1
 98e:	85 2f       	mov	r24, r21
 990:	7a 2f       	mov	r23, r26
 992:	6e 2f       	mov	r22, r30
 994:	1f 90       	pop	r1
 996:	0f 90       	pop	r0
 998:	88 23       	and	r24, r24
 99a:	1a f4       	brpl	.+6      	; 0x9a2 <__mulsf3x+0x7a>
 99c:	93 95       	inc	r25
 99e:	39 f4       	brne	.+14     	; 0x9ae <__mulsf3x+0x86>
 9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <__fp_nan>
 9a2:	00 0c       	add	r0, r0
 9a4:	11 1c       	adc	r1, r1
 9a6:	bb 1f       	adc	r27, r27
 9a8:	66 1f       	adc	r22, r22
 9aa:	77 1f       	adc	r23, r23
 9ac:	88 1f       	adc	r24, r24
 9ae:	01 28       	or	r0, r1
 9b0:	08 95       	ret

000009b2 <__fp_nan>:
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	80 ec       	ldi	r24, 0xC0	; 192
 9b6:	08 95       	ret

000009b8 <_exit>:
 9b8:	ff cf       	rjmp	.-2      	; 0x9b8 <_exit>
