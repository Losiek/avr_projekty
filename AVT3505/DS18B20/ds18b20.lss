
ds18b20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000f9c  00001030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080011c  0080011c  0000104c  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001a1  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fd  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000413  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d0  00000000  00000000  00001f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fa  00000000  00000000  000027c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c3  00000000  00000000  000029ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
   8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
   c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  68:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  6c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  70:	00 40       	sbci	r16, 0x00	; 0
  72:	7a 10       	cpse	r7, r10
  74:	f3 5a       	subi	r31, 0xA3	; 163
  76:	00 a0       	ldd	r0, Z+32	; 0x20
  78:	72 4e       	sbci	r23, 0xE2	; 226
  7a:	18 09       	sbc	r17, r8
  7c:	00 10       	cpse	r0, r0
  7e:	a5 d4       	rcall	.+2378   	; 0x9ca <dtoa_prf+0x12c>
  80:	e8 00       	.word	0x00e8	; ????
  82:	00 e8       	ldi	r16, 0x80	; 128
  84:	76 48       	sbci	r23, 0x86	; 134
  86:	17 00       	.word	0x0017	; ????
  88:	00 e4       	ldi	r16, 0x40	; 64
  8a:	0b 54       	subi	r16, 0x4B	; 75
  8c:	02 00       	.word	0x0002	; ????
  8e:	00 ca       	rjmp	.-3072   	; 0xfffff490 <__eeprom_end+0xff7ef490>
  90:	9a 3b       	cpi	r25, 0xBA	; 186
  92:	00 00       	nop
  94:	00 e1       	ldi	r16, 0x10	; 16
  96:	f5 05       	cpc	r31, r5
  98:	00 00       	nop
  9a:	80 96       	adiw	r24, 0x20	; 32
  9c:	98 00       	.word	0x0098	; ????
  9e:	00 00       	nop
  a0:	40 42       	sbci	r20, 0x20	; 32
  a2:	0f 00       	.word	0x000f	; ????
  a4:	00 00       	nop
  a6:	a0 86       	std	Z+8, r10	; 0x08
  a8:	01 00       	.word	0x0001	; ????
  aa:	00 00       	nop
  ac:	10 27       	eor	r17, r16
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	e8 03       	fmulsu	r22, r16
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	64 00       	.word	0x0064	; ????
  ba:	00 00       	nop
  bc:	00 00       	nop
  be:	0a 00       	.word	0x000a	; ????
  c0:	00 00       	nop
  c2:	00 00       	nop
  c4:	01 00       	.word	0x0001	; ????
  c6:	00 00       	nop
  c8:	00 00       	nop
  ca:	2c 76       	andi	r18, 0x6C	; 108
  cc:	d8 88       	ldd	r13, Y+16	; 0x10
  ce:	dc 67       	ori	r29, 0x7C	; 124
  d0:	4f 08       	sbc	r4, r15
  d2:	23 df       	rcall	.-442    	; 0xffffff1a <__eeprom_end+0xff7eff1a>
  d4:	c1 df       	rcall	.-126    	; 0x58 <__SREG__+0x19>
  d6:	ae 59       	subi	r26, 0x9E	; 158
  d8:	e1 b1       	in	r30, 0x01	; 1
  da:	b7 96       	adiw	r30, 0x27	; 39
  dc:	e5 e3       	ldi	r30, 0x35	; 53
  de:	e4 53       	subi	r30, 0x34	; 52
  e0:	c6 3a       	cpi	r28, 0xA6	; 166
  e2:	e6 51       	subi	r30, 0x16	; 22
  e4:	99 76       	andi	r25, 0x69	; 105
  e6:	96 e8       	ldi	r25, 0x86	; 134
  e8:	e6 c2       	rjmp	.+1484   	; 0x6b6 <__fp_round+0x8>
  ea:	84 26       	eor	r8, r20
  ec:	eb 89       	ldd	r30, Y+19	; 0x13
  ee:	8c 9b       	sbis	0x11, 4	; 17
  f0:	62 ed       	ldi	r22, 0xD2	; 210
  f2:	40 7c       	andi	r20, 0xC0	; 192
  f4:	6f fc       	.word	0xfc6f	; ????
  f6:	ef bc       	out	0x2f, r14	; 47
  f8:	9c 9f       	mul	r25, r28
  fa:	40 f2       	brcs	.-112    	; 0x8c <__SREG__+0x4d>
  fc:	ba a5       	ldd	r27, Y+42	; 0x2a
  fe:	6f a5       	ldd	r22, Y+47	; 0x2f
 100:	f4 90       	lpm	r15, Z+
 102:	05 5a       	subi	r16, 0xA5	; 165
 104:	2a f7       	brpl	.-54     	; 0xd0 <__SREG__+0x91>
 106:	5c 93       	st	X, r21
 108:	6b 6c       	ori	r22, 0xCB	; 203
 10a:	f9 67       	ori	r31, 0x79	; 121
 10c:	6d c1       	rjmp	.+730    	; 0x3e8 <MATCH_ROM+0x20>
 10e:	1b fc       	.word	0xfc1b	; ????
 110:	e0 e4       	ldi	r30, 0x40	; 64
 112:	0d 47       	sbci	r16, 0x7D	; 125
 114:	fe f5       	brtc	.+126    	; 0x194 <.do_clear_bss_loop>
 116:	20 e6       	ldi	r18, 0x60	; 96
 118:	b5 00       	.word	0x00b5	; ????
 11a:	d0 ed       	ldi	r29, 0xD0	; 208
 11c:	90 2e       	mov	r9, r16
 11e:	03 00       	.word	0x0003	; ????
 120:	94 35       	cpi	r25, 0x54	; 84
 122:	77 05       	cpc	r23, r7
 124:	00 80       	ld	r0, Z
 126:	84 1e       	adc	r8, r20
 128:	08 00       	.word	0x0008	; ????
 12a:	00 20       	and	r0, r0
 12c:	4e 0a       	sbc	r4, r30
 12e:	00 00       	nop
 130:	00 c8       	rjmp	.-4096   	; 0xfffff132 <__eeprom_end+0xff7ef132>
 132:	0c 33       	cpi	r16, 0x3C	; 60
 134:	33 33       	cpi	r19, 0x33	; 51
 136:	33 0f       	add	r19, r19
 138:	98 6e       	ori	r25, 0xE8	; 232
 13a:	12 83       	std	Z+2, r17	; 0x02
 13c:	11 41       	sbci	r17, 0x11	; 17
 13e:	ef 8d       	ldd	r30, Y+31	; 0x1f
 140:	21 14       	cp	r2, r1
 142:	89 3b       	cpi	r24, 0xB9	; 185
 144:	e6 55       	subi	r30, 0x56	; 86
 146:	16 cf       	rjmp	.-468    	; 0xffffff74 <__eeprom_end+0xff7eff74>
 148:	fe e6       	ldi	r31, 0x6E	; 110
 14a:	db 18       	sub	r13, r11
 14c:	d1 84       	ldd	r13, Z+9	; 0x09
 14e:	4b 38       	cpi	r20, 0x8B	; 139
 150:	1b f7       	brvc	.-58     	; 0x118 <__SREG__+0xd9>
 152:	7c 1d       	adc	r23, r12
 154:	90 1d       	adc	r25, r0
 156:	a4 bb       	out	0x14, r26	; 20
 158:	e4 24       	eor	r14, r4
 15a:	20 32       	cpi	r18, 0x20	; 32
 15c:	84 72       	andi	r24, 0x24	; 36
 15e:	5e 22       	and	r5, r30
 160:	81 00       	.word	0x0081	; ????
 162:	c9 f1       	breq	.+114    	; 0x1d6 <main+0x2e>
 164:	24 ec       	ldi	r18, 0xC4	; 196
 166:	a1 e5       	ldi	r26, 0x51	; 81
 168:	3d 27       	eor	r19, r29

0000016a <__ctors_end>:
 16a:	11 24       	eor	r1, r1
 16c:	1f be       	out	0x3f, r1	; 63
 16e:	cf ef       	ldi	r28, 0xFF	; 255
 170:	d4 e0       	ldi	r29, 0x04	; 4
 172:	de bf       	out	0x3e, r29	; 62
 174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
 176:	11 e0       	ldi	r17, 0x01	; 1
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b1 e0       	ldi	r27, 0x01	; 1
 17c:	ec e9       	ldi	r30, 0x9C	; 156
 17e:	ff e0       	ldi	r31, 0x0F	; 15
 180:	02 c0       	rjmp	.+4      	; 0x186 <.do_copy_data_start>

00000182 <.do_copy_data_loop>:
 182:	05 90       	lpm	r0, Z+
 184:	0d 92       	st	X+, r0

00000186 <.do_copy_data_start>:
 186:	ac 31       	cpi	r26, 0x1C	; 28
 188:	b1 07       	cpc	r27, r17
 18a:	d9 f7       	brne	.-10     	; 0x182 <.do_copy_data_loop>

0000018c <__do_clear_bss>:
 18c:	11 e0       	ldi	r17, 0x01	; 1
 18e:	ac e1       	ldi	r26, 0x1C	; 28
 190:	b1 e0       	ldi	r27, 0x01	; 1
 192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
 194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
 196:	a0 33       	cpi	r26, 0x30	; 48
 198:	b1 07       	cpc	r27, r17
 19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
 19c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
 1a0:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <_exit>

000001a4 <__bad_interrupt>:
 1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <main>:
#include "harddef.h"
#include "1wire_2.h"
#include "rs.h"


int main(void) {
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	df 93       	push	r29
 1b2:	cf 93       	push	r28
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	69 97       	sbiw	r28, 0x19	; 25
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
	
	//Konfiguracja portów.
	DDRB = 0;
 1c4:	17 ba       	out	0x17, r1	; 23
	PORTB = 0;
 1c6:	18 ba       	out	0x18, r1	; 24
	//Na sta³e dla magistrali 1-Wire.
	//PORTD &= ~(1<<wire);
	//koniec konfiguracji portów.
	//////////////////////////////////////////////////////
	//inicjacja portu szeregowego.
	RS_SET_BAUD(DEF_BAUD);
 1c8:	10 bc       	out	0x20, r1	; 32
 1ca:	83 e3       	ldi	r24, 0x33	; 51
 1cc:	89 b9       	out	0x09, r24	; 9
	UCSR0C = 1<<URSEL0 | 1<<UCSZ01 | 1<<UCSZ00;
 1ce:	86 e8       	ldi	r24, 0x86	; 134
 1d0:	80 bd       	out	0x20, r24	; 32
	UCSR0B = 1<<RXEN0 | 1<<TXEN0;
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;
 1d6:	1b b8       	out	0x0b, r1	; 11
	// Koniec inicjacji
	///////////////////////////////////////////////
	
	// Inicjacja funkcji dla domylnych strumieni we/wy
	fdevopen(rs_put, rs_get);
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	69 e0       	ldi	r22, 0x09	; 9
 1de:	72 e0       	ldi	r23, 0x02	; 2
 1e0:	0e 94 b2 03 	call	0x764	; 0x764 <fdevopen>
	uint8_t chain[19] = {"Termometr DS18B20!"};
 1e4:	de 01       	movw	r26, r28
 1e6:	17 96       	adiw	r26, 0x07	; 7
 1e8:	e2 e0       	ldi	r30, 0x02	; 2
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	83 e1       	ldi	r24, 0x13	; 19
 1ee:	01 90       	ld	r0, Z+
 1f0:	0d 92       	st	X+, r0
 1f2:	81 50       	subi	r24, 0x01	; 1
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x46>
 1f6:	8e 01       	movw	r16, r28
 1f8:	09 5f       	subi	r16, 0xF9	; 249
 1fa:	1f 4f       	sbci	r17, 0xFF	; 255
	for(uint8_t i=0; i<19; i++) {
 1fc:	8a e1       	ldi	r24, 0x1A	; 26
 1fe:	e8 2e       	mov	r14, r24
 200:	f1 2c       	mov	r15, r1
 202:	ec 0e       	add	r14, r28
 204:	fd 1e       	adc	r15, r29
		rs_put(chain[i]);
 206:	f8 01       	movw	r30, r16
 208:	81 91       	ld	r24, Z+
 20a:	8f 01       	movw	r16, r30
 20c:	0e 94 03 02 	call	0x406	; 0x406 <rs_put>
	///////////////////////////////////////////////
	
	// Inicjacja funkcji dla domylnych strumieni we/wy
	fdevopen(rs_put, rs_get);
	uint8_t chain[19] = {"Termometr DS18B20!"};
	for(uint8_t i=0; i<19; i++) {
 210:	0e 15       	cp	r16, r14
 212:	1f 05       	cpc	r17, r15
 214:	c1 f7       	brne	.-16     	; 0x206 <main+0x5e>
		rs_put(chain[i]);
	}
	
	RESET_PULSE();
 216:	0e 94 33 01 	call	0x266	; 0x266 <RESET_PULSE>
	SKIP_ROM();
 21a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SKIP_ROM>
	READ_SCRATCHPAD();
 21e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <READ_SCRATCHPAD>
	RESET_PULSE();
 222:	0e 94 33 01 	call	0x266	; 0x266 <RESET_PULSE>
	
	char buf[6];
	
	for(;;) {
		dtostrf(TEMP_READ(),2,2,buf);
 226:	8e 01       	movw	r16, r28
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	0e 94 49 02 	call	0x492	; 0x492 <TEMP_READ>
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	42 e0       	ldi	r20, 0x02	; 2
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	98 01       	movw	r18, r16
 23a:	0e 94 91 03 	call	0x722	; 0x722 <dtostrf>
	
		for(uint8_t i=0; i<5; i++) {
			rs_put(buf[i]);
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	0e 94 03 02 	call	0x406	; 0x406 <rs_put>
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	0e 94 03 02 	call	0x406	; 0x406 <rs_put>
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	0e 94 03 02 	call	0x406	; 0x406 <rs_put>
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	0e 94 03 02 	call	0x406	; 0x406 <rs_put>
 256:	8d 81       	ldd	r24, Y+5	; 0x05
 258:	0e 94 03 02 	call	0x406	; 0x406 <rs_put>
		}
		puts("\r");
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 fe 03 	call	0x7fc	; 0x7fc <puts>
 264:	e3 cf       	rjmp	.-58     	; 0x22c <main+0x84>

00000266 <RESET_PULSE>:
#include "1wire_2.h"

//resetujemy magistrale - czekamy na impuls PRESENCE
uint8_t RESET_PULSE(void) {
	uint8_t PRESENCE;
	CLEAR_1Wire;
 266:	b8 9a       	sbi	0x17, 0	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 268:	88 ee       	ldi	r24, 0xE8	; 232
 26a:	93 e0       	ldi	r25, 0x03	; 3
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <RESET_PULSE+0x6>
	_delay_us(500);
	SET_1Wire;
 270:	b8 98       	cbi	0x17, 0	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 272:	80 e5       	ldi	r24, 0x50	; 80
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <RESET_PULSE+0xe>
	_delay_us(30);
	//sprawdzamy poziom lini (czy w stanie niskim)
	if(bit_is_clear(PORT_1Wire, WE)) {
 278:	86 b3       	in	r24, 0x16	; 22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27a:	8c ea       	ldi	r24, 0xAC	; 172
 27c:	93 e0       	ldi	r25, 0x03	; 3
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <RESET_PULSE+0x18>
	} else {
		PRESENCE=0;
	}
	//1-odebrano bit PRESENCE, 0-stan nieaktywnoci
	_delay_us(470);
	if(bit_is_set(PORT_1Wire, WE)) {
 282:	86 b3       	in	r24, 0x16	; 22
		PRESENCE=1;
	} else {
		PRESENCE=0;
	}
	return PRESENCE; //zwracamy wartoæ do funkcji
} //koniec RESET_PULSE
 284:	81 70       	andi	r24, 0x01	; 1
 286:	08 95       	ret

00000288 <send>:

//wysy³a pojedyñczy bit do uk³adu
void send(uint8_t bit)
{
	CLEAR_1Wire; //ustawia stan niski na magistralii
 288:	b8 9a       	sbi	0x17, 0	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 28a:	9d e0       	ldi	r25, 0x0D	; 13
 28c:	9a 95       	dec	r25
 28e:	f1 f7       	brne	.-4      	; 0x28c <send+0x4>
	_delay_us(5);
	if(bit==1) {
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	09 f4       	brne	.+2      	; 0x296 <send+0xe>
		SET_1Wire; //zwolnienie magistralii - wyslanie jedynki
 294:	b8 98       	cbi	0x17, 0	; 23
 296:	85 ed       	ldi	r24, 0xD5	; 213
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <send+0x10>
	}
	_delay_us(80); //przetrzymanie - wys³anie zera
	SET_1Wire;
 29c:	b8 98       	cbi	0x17, 0	; 23
} //koniec send
 29e:	08 95       	ret

000002a0 <read>:
//zczytuje bit z magistaralii
uint8_t read(void) 
{
	uint8_t PRESENCE=0;
	
	CLEAR_1Wire; //ustawienie stan niski DQ
 2a0:	b8 9a       	sbi	0x17, 0	; 23
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <read+0x4>
	_delay_us(2);
	SET_1Wire;
 2a8:	b8 98       	cbi	0x17, 0	; 23
 2aa:	88 e2       	ldi	r24, 0x28	; 40
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <read+0xc>
	_delay_us(15);
	//odbiór zera lub jedynki
	if(bit_is_set(PORT_1Wire, WE)) {
 2b0:	86 b3       	in	r24, 0x16	; 22
	} else {
		PRESENCE=0;
	}
	
	return(PRESENCE);
} //koniec read
 2b2:	81 70       	andi	r24, 0x01	; 1
 2b4:	08 95       	ret

000002b6 <send_byte>:

//wysy³a ca³y bajt do uk³adu
void send_byte(uint8_t wartosc)
{
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i; //zmienna licznikowa
	uint8_t pom; //zmienna pomocnicza
	
	for(i=0; i<8; i++) {
		pom = wartosc>>i;
 2c2:	08 2f       	mov	r16, r24
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	c8 01       	movw	r24, r16
 2c8:	0c 2e       	mov	r0, r28
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <send_byte+0x1a>
 2cc:	95 95       	asr	r25
 2ce:	87 95       	ror	r24
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <send_byte+0x16>
		pom &= 0x01;
		send(pom);
 2d4:	81 70       	andi	r24, 0x01	; 1
 2d6:	0e 94 44 01 	call	0x288	; 0x288 <send>
 2da:	21 96       	adiw	r28, 0x01	; 1
void send_byte(uint8_t wartosc)
{
	uint8_t i; //zmienna licznikowa
	uint8_t pom; //zmienna pomocnicza
	
	for(i=0; i<8; i++) {
 2dc:	c8 30       	cpi	r28, 0x08	; 8
 2de:	d1 05       	cpc	r29, r1
 2e0:	91 f7       	brne	.-28     	; 0x2c6 <send_byte+0x10>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e2:	88 ec       	ldi	r24, 0xC8	; 200
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <send_byte+0x30>
		pom = wartosc>>i;
		pom &= 0x01;
		send(pom);
	}
	_delay_us(100);
} //koniec send_byte
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	08 95       	ret

000002f4 <read_byte>:

//zczytuje ca³y bajt z uk³adu
uint8_t read_byte(void)
{
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i; //zmienna licznikowa
	uint8_t wartosc=0; //zczytywana wartosc
	
	for(i=0; i<8; i++) {
		if(read()) wartosc|=0x01<<i; //zczytywanie po jednym bicie
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	e8 2e       	mov	r14, r24
 30a:	f1 2c       	mov	r15, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 30c:	08 e2       	ldi	r16, 0x28	; 40
 30e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <read>
 312:	88 23       	and	r24, r24
 314:	41 f0       	breq	.+16     	; 0x326 <read_byte+0x32>
 316:	c7 01       	movw	r24, r14
 318:	0c 2e       	mov	r0, r28
 31a:	02 c0       	rjmp	.+4      	; 0x320 <read_byte+0x2c>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <read_byte+0x28>
 324:	18 2b       	or	r17, r24
 326:	80 2f       	mov	r24, r16
 328:	8a 95       	dec	r24
 32a:	f1 f7       	brne	.-4      	; 0x328 <read_byte+0x34>
 32c:	21 96       	adiw	r28, 0x01	; 1
uint8_t read_byte(void)
{
	uint8_t i; //zmienna licznikowa
	uint8_t wartosc=0; //zczytywana wartosc
	
	for(i=0; i<8; i++) {
 32e:	c8 30       	cpi	r28, 0x08	; 8
 330:	d1 05       	cpc	r29, r1
 332:	69 f7       	brne	.-38     	; 0x30e <read_byte+0x1a>
		if(read()) wartosc|=0x01<<i; //zczytywanie po jednym bicie
		_delay_us(15);
	}
	
	return(wartosc); //zwrot do funkcji
} //koniec read_byte
 334:	81 2f       	mov	r24, r17
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	08 95       	ret

00000344 <SEARCH_ROM>:

/////////////////////////////////////////////////////////////////////////////////////////////
//Pozosta³e komendy przydatne do obs³ugi interfejsu 1Wire

void  SEARCH_ROM() { 						//Umo¿liwia okrelenie iloci i rodzaj uk³adów Slave. Dane zapisywane do bufora 1Wire.
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
 34a:	8c e1       	ldi	r24, 0x1C	; 28
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	90 93 25 01 	sts	0x0125, r25
 352:	80 93 24 01 	sts	0x0124, r24
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0xf0); 						//wylij rozkaz SEARCH ROM
 356:	80 ef       	ldi	r24, 0xF0	; 240
 358:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
 35c:	00 e0       	ldi	r16, 0x00	; 0
	for(i=0; i<8; i++) {
		*pbufor1w++=read_byte();			//osiem kolejnych bajtów, zostanie wys³anych do bufora
 35e:	10 91 24 01 	lds	r17, 0x0124
 362:	f0 90 25 01 	lds	r15, 0x0125
 366:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_byte>
 36a:	e1 2f       	mov	r30, r17
 36c:	ff 2d       	mov	r31, r15
 36e:	81 93       	st	Z+, r24
 370:	f0 93 25 01 	sts	0x0125, r31
 374:	e0 93 24 01 	sts	0x0124, r30

void  SEARCH_ROM() { 						//Umo¿liwia okrelenie iloci i rodzaj uk³adów Slave. Dane zapisywane do bufora 1Wire.
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0xf0); 						//wylij rozkaz SEARCH ROM
	for(i=0; i<8; i++) {
 378:	0f 5f       	subi	r16, 0xFF	; 255
 37a:	08 30       	cpi	r16, 0x08	; 8
 37c:	81 f7       	brne	.-32     	; 0x35e <SEARCH_ROM+0x1a>
		*pbufor1w++=read_byte();			//osiem kolejnych bajtów, zostanie wys³anych do bufora
	}
} //koniec SEARCH_ROM
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	08 95       	ret

00000386 <READ_ROM>:

void  READ_ROM() { 							//Umo¿liwia odczyt kodu ROM z uk³adu podrzêdnego. Dane zapisywane do bufora 1Wire.
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
 38c:	8c e1       	ldi	r24, 0x1C	; 28
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	90 93 25 01 	sts	0x0125, r25
 394:	80 93 24 01 	sts	0x0124, r24
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0x33); 						//wylij rozkaz READ ROM
 398:	83 e3       	ldi	r24, 0x33	; 51
 39a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
 39e:	00 e0       	ldi	r16, 0x00	; 0
	for(i=0; i<8; i++) {
		*pbufor1w++=read_byte();			//osiem kolejnych bajtów, zostanie wys³anych do bufora
 3a0:	10 91 24 01 	lds	r17, 0x0124
 3a4:	f0 90 25 01 	lds	r15, 0x0125
 3a8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_byte>
 3ac:	e1 2f       	mov	r30, r17
 3ae:	ff 2d       	mov	r31, r15
 3b0:	81 93       	st	Z+, r24
 3b2:	f0 93 25 01 	sts	0x0125, r31
 3b6:	e0 93 24 01 	sts	0x0124, r30

void  READ_ROM() { 							//Umo¿liwia odczyt kodu ROM z uk³adu podrzêdnego. Dane zapisywane do bufora 1Wire.
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0x33); 						//wylij rozkaz READ ROM
	for(i=0; i<8; i++) {
 3ba:	0f 5f       	subi	r16, 0xFF	; 255
 3bc:	08 30       	cpi	r16, 0x08	; 8
 3be:	81 f7       	brne	.-32     	; 0x3a0 <READ_ROM+0x1a>
		*pbufor1w++=read_byte();			//osiem kolejnych bajtów, zostanie wys³anych do bufora
	}
} //koniec READ_ROM
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	08 95       	ret

000003c8 <MATCH_ROM>:

void  MATCH_ROM() { 						//Komenda ta wywo³ywana jest celem zaadresowania uk³adu podrzêdnego. Dane dane wysy³ane s¹ z bufora 1Wire.
 3c8:	1f 93       	push	r17
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
 3ca:	8c e1       	ldi	r24, 0x1C	; 28
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	90 93 25 01 	sts	0x0125, r25
 3d2:	80 93 24 01 	sts	0x0124, r24
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0x55); 						//wylij rozkaz MATCH ROM
 3d6:	85 e5       	ldi	r24, 0x55	; 85
 3d8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
 3dc:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<8; i++) {
		send_byte(*(uint8_t*)pbufor1w++);	//osiem kolejnych bajtów, zostanie odczytanych z bufora i przes³anych do Slave.
 3de:	e0 91 24 01 	lds	r30, 0x0124
 3e2:	f0 91 25 01 	lds	r31, 0x0125
 3e6:	81 91       	ld	r24, Z+
 3e8:	f0 93 25 01 	sts	0x0125, r31
 3ec:	e0 93 24 01 	sts	0x0124, r30
 3f0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>

void  MATCH_ROM() { 						//Komenda ta wywo³ywana jest celem zaadresowania uk³adu podrzêdnego. Dane dane wysy³ane s¹ z bufora 1Wire.
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0x55); 						//wylij rozkaz MATCH ROM
	for(i=0; i<8; i++) {
 3f4:	1f 5f       	subi	r17, 0xFF	; 255
 3f6:	18 30       	cpi	r17, 0x08	; 8
 3f8:	91 f7       	brne	.-28     	; 0x3de <MATCH_ROM+0x16>
		send_byte(*(uint8_t*)pbufor1w++);	//osiem kolejnych bajtów, zostanie odczytanych z bufora i przes³anych do Slave.
	}
} //koniec MATCH_ROM
 3fa:	1f 91       	pop	r17
 3fc:	08 95       	ret

000003fe <SKIP_ROM>:

void  SKIP_ROM() { 							//Uk³ad nadrzêdny mo¿e u¿ywaæ tej komendy po to aby zaadresowaæ wszystkie urz¹dzenia na magistrali równoczenie, z pominiêciem wys³ania jakiegokolwiek kodu ROM.
	send_byte(0xCC); 						//wylij rozkaz SKIP ROM
 3fe:	8c ec       	ldi	r24, 0xCC	; 204
 400:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
} //koniec SKIP_ROM
 404:	08 95       	ret

00000406 <rs_put>:
#include "rs.h"

int rs_put(char znak)
{
	// Oczekiwanie a¿ bufor nadajnika jest pusty
	while(!(1<<UDRE0 & UCSR0A)) {}
 406:	5d 9b       	sbis	0x0b, 5	; 11
 408:	fe cf       	rjmp	.-4      	; 0x406 <rs_put>
	UDR0 = znak; 
 40a:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	08 95       	ret

00000412 <rs_get>:

int rs_get(void)
{
	char znak; 
	// Oczekiwanie na pojawienie siê danej
	while(!(1<<RXC0 & UCSR0A)) {}
 412:	5f 9b       	sbis	0x0b, 7	; 11
 414:	fe cf       	rjmp	.-4      	; 0x412 <rs_get>
	znak = UDR0; 
 416:	8c b1       	in	r24, 0x0c	; 12
	return znak;
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	08 95       	ret

0000041c <READ_POWER_SUPPLY>:
	send_byte(0xB8); 						//wylij rozkaz RECALL
} //koniec RECALL

void  READ_POWER_SUPPLY() { 				//Uk³ad Master mo¿e za¿¹daæ (poprzez wys³anie  read time slots) odpowiedzi, który uk³ad 
											//DS18B20 umieszczony na magistrali korzysta z zasilania paso¿ytniczego.
	send_byte(0xB4); 						//wylij rozkaz READ POWER SUPPLY
 41c:	84 eb       	ldi	r24, 0xB4	; 180
 41e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
} //koniec READ POWER SUPPLY
 422:	08 95       	ret

00000424 <RECALL>:
	send_byte(0x48); 						//wylij rozkaz COPY SCRATCHPAD
} //koniec COPY SCRATCHPAD

void  RECALL() { 							//Komenda ta wywo³uje alarmy wartoci TH, TL oraz konfiguracyjne z pamiêci EEPROM i 
											//umiejscawia je na pozycjach 2, 3, 4 w pamiêci  scratchpada.
	send_byte(0xB8); 						//wylij rozkaz RECALL
 424:	88 eb       	ldi	r24, 0xB8	; 184
 426:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
} //koniec RECALL
 42a:	08 95       	ret

0000042c <COPY_SCRATCHPAD>:
	}
} //koniec READ SCRATCHPAD

void  COPY_SCRATCHPAD() { 					//Komenda ta pozwala na skopiowanie danych z rejestrów TH, TL oraz 
											//konfiguracyjnego (bajty 2, 3 i 4) do pamiêci EEPROM.
	send_byte(0x48); 						//wylij rozkaz COPY SCRATCHPAD
 42c:	88 e4       	ldi	r24, 0x48	; 72
 42e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
} //koniec COPY SCRATCHPAD
 432:	08 95       	ret

00000434 <WRITE_SCRATCHPAD>:
void  CONVERT_T() { 						//Komenda ta inicjalizuje pojedyncz¹ konwersjê temperatury.
	send_byte(0x44); 						//wylij rozkaz CONVERT T
} //koniec CONVERT_T

void  WRITE_SCRATCHPAD() { 					//Komenda ta pozwala zapisaæ 3 bajty danych do uk³adu DS18B20.
	pbufor1w=&bufor1w[2];					//Dane bêd¹ pobierane z bufora.
 434:	8e e1       	ldi	r24, 0x1E	; 30
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	90 93 25 01 	sts	0x0125, r25
 43c:	80 93 24 01 	sts	0x0124, r24
											//pierwszy bajt - TH, drugi - TL, trzeci - bajt konfiguracyjny, DS18B20 Memory Map
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0x4E); 						//wylij rozkaz WRITE SCRATCHPAD
 440:	8e e4       	ldi	r24, 0x4E	; 78
 442:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
	for(i=0; i<3; i++) {
		send_byte(*(uint8_t*)pbufor1w++);	//trzy kolejne bajty wysy³ane do SCRATCHPAD uk³adu.
 446:	e0 91 24 01 	lds	r30, 0x0124
 44a:	f0 91 25 01 	lds	r31, 0x0125
 44e:	81 91       	ld	r24, Z+
 450:	f0 93 25 01 	sts	0x0125, r31
 454:	e0 93 24 01 	sts	0x0124, r30
 458:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
 45c:	e0 91 24 01 	lds	r30, 0x0124
 460:	f0 91 25 01 	lds	r31, 0x0125
 464:	81 91       	ld	r24, Z+
 466:	f0 93 25 01 	sts	0x0125, r31
 46a:	e0 93 24 01 	sts	0x0124, r30
 46e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
 472:	e0 91 24 01 	lds	r30, 0x0124
 476:	f0 91 25 01 	lds	r31, 0x0125
 47a:	81 91       	ld	r24, Z+
 47c:	f0 93 25 01 	sts	0x0125, r31
 480:	e0 93 24 01 	sts	0x0124, r30
 484:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
	}
} //koniec WRITE SCRATCHPAD
 488:	08 95       	ret

0000048a <CONVERT_T>:

#include "ds18b20.h"
#include "1wire_2.h"

void  CONVERT_T() { 						//Komenda ta inicjalizuje pojedyncz¹ konwersjê temperatury.
	send_byte(0x44); 						//wylij rozkaz CONVERT T
 48a:	84 e4       	ldi	r24, 0x44	; 68
 48c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
} //koniec CONVERT_T
 490:	08 95       	ret

00000492 <TEMP_READ>:
void  READ_POWER_SUPPLY() { 				//Uk³ad Master mo¿e za¿¹daæ (poprzez wys³anie  read time slots) odpowiedzi, który uk³ad 
											//DS18B20 umieszczony na magistrali korzysta z zasilania paso¿ytniczego.
	send_byte(0xB4); 						//wylij rozkaz READ POWER SUPPLY
} //koniec READ POWER SUPPLY

float TEMP_READ() {    						//Pojedyñczy odczyt temperatury tylko jednego pod³¹czonego uk³adu!!!
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
	uint8_t temp1, temp2;					//Zmienne pomocnicze

	RESET_PULSE();
 496:	0e 94 33 01 	call	0x266	; 0x266 <RESET_PULSE>
	send_byte(0xCC);
 49a:	8c ec       	ldi	r24, 0xCC	; 204
 49c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
	send_byte(0x44);
 4a0:	84 e4       	ldi	r24, 0x44	; 68
 4a2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
 4a6:	8c e4       	ldi	r24, 0x4C	; 76
 4a8:	9d e1       	ldi	r25, 0x1D	; 29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4aa:	28 ec       	ldi	r18, 0xC8	; 200
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	31 97       	sbiw	r30, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <TEMP_READ+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4b6:	d9 f7       	brne	.-10     	; 0x4ae <TEMP_READ+0x1c>
	_delay_ms(750);							//czasu ulega zmianie w zale¿noci od wybranej rozdzielczoci
	
	RESET_PULSE();
 4b8:	0e 94 33 01 	call	0x266	; 0x266 <RESET_PULSE>
	send_byte(0xCC);
 4bc:	8c ec       	ldi	r24, 0xCC	; 204
 4be:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
	send_byte(0xBE);
 4c2:	8e eb       	ldi	r24, 0xBE	; 190
 4c4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
	temp1=read_byte();
 4c8:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_byte>
 4cc:	08 2f       	mov	r16, r24
	temp2=read_byte();
 4ce:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_byte>
 4d2:	18 2f       	mov	r17, r24
	RESET_PULSE();
 4d4:	0e 94 33 01 	call	0x266	; 0x266 <RESET_PULSE>
 4d8:	71 2f       	mov	r23, r17
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	60 0f       	add	r22, r16
 4de:	71 1d       	adc	r23, r1
 4e0:	88 27       	eor	r24, r24
 4e2:	77 fd       	sbrc	r23, 7
 4e4:	80 95       	com	r24
 4e6:	98 2f       	mov	r25, r24
 4e8:	0e 94 a2 02 	call	0x544	; 0x544 <__floatsisf>
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	40 e8       	ldi	r20, 0x80	; 128
 4f2:	5d e3       	ldi	r21, 0x3D	; 61
 4f4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__mulsf3>
	
	return (float)(temp1+(temp2*256))/16;  //konwersja
} //koniec TEMP READ
 4f8:	1f 91       	pop	r17
 4fa:	0f 91       	pop	r16
 4fc:	08 95       	ret

000004fe <READ_SCRATCHPAD>:
	for(i=0; i<3; i++) {
		send_byte(*(uint8_t*)pbufor1w++);	//trzy kolejne bajty wysy³ane do SCRATCHPAD uk³adu.
	}
} //koniec WRITE SCRATCHPAD

void  READ_SCRATCHPAD() { 					//Komenda ta pozwala uk³adowi Master odczytaæ dane umieszczone w pamiêci  scratchpada.
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
 504:	8c e1       	ldi	r24, 0x1C	; 28
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	90 93 25 01 	sts	0x0125, r25
 50c:	80 93 24 01 	sts	0x0124, r24
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0xBE); 						//wylij rozkaz READ SCRATCHPAD
 510:	8e eb       	ldi	r24, 0xBE	; 190
 512:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <send_byte>
 516:	00 e0       	ldi	r16, 0x00	; 0
	for(i=0; i<8; i++) {
		*pbufor1w++=read_byte();			//osiem kolejnych bajtów, zostanie odczytanych z bufora i przes³anych do Slave.
 518:	10 91 24 01 	lds	r17, 0x0124
 51c:	f0 90 25 01 	lds	r15, 0x0125
 520:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <read_byte>
 524:	e1 2f       	mov	r30, r17
 526:	ff 2d       	mov	r31, r15
 528:	81 93       	st	Z+, r24
 52a:	f0 93 25 01 	sts	0x0125, r31
 52e:	e0 93 24 01 	sts	0x0124, r30

void  READ_SCRATCHPAD() { 					//Komenda ta pozwala uk³adowi Master odczytaæ dane umieszczone w pamiêci  scratchpada.
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
	uint8_t i;								//Zmienna pomocnicza
	send_byte(0xBE); 						//wylij rozkaz READ SCRATCHPAD
	for(i=0; i<8; i++) {
 532:	0f 5f       	subi	r16, 0xFF	; 255
 534:	08 30       	cpi	r16, 0x08	; 8
 536:	81 f7       	brne	.-32     	; 0x518 <__stack+0x19>
		*pbufor1w++=read_byte();			//osiem kolejnych bajtów, zostanie odczytanych z bufora i przes³anych do Slave.
	}
} //koniec READ SCRATCHPAD
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	ff 90       	pop	r15
 53e:	08 95       	ret

00000540 <__floatunsisf>:
 540:	e8 94       	clt
 542:	09 c0       	rjmp	.+18     	; 0x556 <__floatsisf+0x12>

00000544 <__floatsisf>:
 544:	97 fb       	bst	r25, 7
 546:	3e f4       	brtc	.+14     	; 0x556 <__floatsisf+0x12>
 548:	90 95       	com	r25
 54a:	80 95       	com	r24
 54c:	70 95       	com	r23
 54e:	61 95       	neg	r22
 550:	7f 4f       	sbci	r23, 0xFF	; 255
 552:	8f 4f       	sbci	r24, 0xFF	; 255
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	99 23       	and	r25, r25
 558:	a9 f0       	breq	.+42     	; 0x584 <__floatsisf+0x40>
 55a:	f9 2f       	mov	r31, r25
 55c:	96 e9       	ldi	r25, 0x96	; 150
 55e:	bb 27       	eor	r27, r27
 560:	93 95       	inc	r25
 562:	f6 95       	lsr	r31
 564:	87 95       	ror	r24
 566:	77 95       	ror	r23
 568:	67 95       	ror	r22
 56a:	b7 95       	ror	r27
 56c:	f1 11       	cpse	r31, r1
 56e:	f8 cf       	rjmp	.-16     	; 0x560 <__floatsisf+0x1c>
 570:	fa f4       	brpl	.+62     	; 0x5b0 <__floatsisf+0x6c>
 572:	bb 0f       	add	r27, r27
 574:	11 f4       	brne	.+4      	; 0x57a <__floatsisf+0x36>
 576:	60 ff       	sbrs	r22, 0
 578:	1b c0       	rjmp	.+54     	; 0x5b0 <__floatsisf+0x6c>
 57a:	6f 5f       	subi	r22, 0xFF	; 255
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	8f 4f       	sbci	r24, 0xFF	; 255
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	16 c0       	rjmp	.+44     	; 0x5b0 <__floatsisf+0x6c>
 584:	88 23       	and	r24, r24
 586:	11 f0       	breq	.+4      	; 0x58c <__floatsisf+0x48>
 588:	96 e9       	ldi	r25, 0x96	; 150
 58a:	11 c0       	rjmp	.+34     	; 0x5ae <__floatsisf+0x6a>
 58c:	77 23       	and	r23, r23
 58e:	21 f0       	breq	.+8      	; 0x598 <__floatsisf+0x54>
 590:	9e e8       	ldi	r25, 0x8E	; 142
 592:	87 2f       	mov	r24, r23
 594:	76 2f       	mov	r23, r22
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <__floatsisf+0x5e>
 598:	66 23       	and	r22, r22
 59a:	71 f0       	breq	.+28     	; 0x5b8 <__floatsisf+0x74>
 59c:	96 e8       	ldi	r25, 0x86	; 134
 59e:	86 2f       	mov	r24, r22
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	2a f0       	brmi	.+10     	; 0x5b0 <__floatsisf+0x6c>
 5a6:	9a 95       	dec	r25
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	da f7       	brpl	.-10     	; 0x5a6 <__floatsisf+0x62>
 5b0:	88 0f       	add	r24, r24
 5b2:	96 95       	lsr	r25
 5b4:	87 95       	ror	r24
 5b6:	97 f9       	bld	r25, 7
 5b8:	08 95       	ret

000005ba <__mulsf3>:
 5ba:	0b d0       	rcall	.+22     	; 0x5d2 <__mulsf3x>
 5bc:	78 c0       	rjmp	.+240    	; 0x6ae <__fp_round>
 5be:	69 d0       	rcall	.+210    	; 0x692 <__fp_pscA>
 5c0:	28 f0       	brcs	.+10     	; 0x5cc <__mulsf3+0x12>
 5c2:	6e d0       	rcall	.+220    	; 0x6a0 <__fp_pscB>
 5c4:	18 f0       	brcs	.+6      	; 0x5cc <__mulsf3+0x12>
 5c6:	95 23       	and	r25, r21
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__mulsf3+0x12>
 5ca:	5a c0       	rjmp	.+180    	; 0x680 <__fp_inf>
 5cc:	5f c0       	rjmp	.+190    	; 0x68c <__fp_nan>
 5ce:	11 24       	eor	r1, r1
 5d0:	a2 c0       	rjmp	.+324    	; 0x716 <__fp_szero>

000005d2 <__mulsf3x>:
 5d2:	7e d0       	rcall	.+252    	; 0x6d0 <__fp_split3>
 5d4:	a0 f3       	brcs	.-24     	; 0x5be <__mulsf3+0x4>

000005d6 <__mulsf3_pse>:
 5d6:	95 9f       	mul	r25, r21
 5d8:	d1 f3       	breq	.-12     	; 0x5ce <__mulsf3+0x14>
 5da:	95 0f       	add	r25, r21
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	55 1f       	adc	r21, r21
 5e0:	62 9f       	mul	r22, r18
 5e2:	f0 01       	movw	r30, r0
 5e4:	72 9f       	mul	r23, r18
 5e6:	bb 27       	eor	r27, r27
 5e8:	f0 0d       	add	r31, r0
 5ea:	b1 1d       	adc	r27, r1
 5ec:	63 9f       	mul	r22, r19
 5ee:	aa 27       	eor	r26, r26
 5f0:	f0 0d       	add	r31, r0
 5f2:	b1 1d       	adc	r27, r1
 5f4:	aa 1f       	adc	r26, r26
 5f6:	64 9f       	mul	r22, r20
 5f8:	66 27       	eor	r22, r22
 5fa:	b0 0d       	add	r27, r0
 5fc:	a1 1d       	adc	r26, r1
 5fe:	66 1f       	adc	r22, r22
 600:	82 9f       	mul	r24, r18
 602:	22 27       	eor	r18, r18
 604:	b0 0d       	add	r27, r0
 606:	a1 1d       	adc	r26, r1
 608:	62 1f       	adc	r22, r18
 60a:	73 9f       	mul	r23, r19
 60c:	b0 0d       	add	r27, r0
 60e:	a1 1d       	adc	r26, r1
 610:	62 1f       	adc	r22, r18
 612:	83 9f       	mul	r24, r19
 614:	a0 0d       	add	r26, r0
 616:	61 1d       	adc	r22, r1
 618:	22 1f       	adc	r18, r18
 61a:	74 9f       	mul	r23, r20
 61c:	33 27       	eor	r19, r19
 61e:	a0 0d       	add	r26, r0
 620:	61 1d       	adc	r22, r1
 622:	23 1f       	adc	r18, r19
 624:	84 9f       	mul	r24, r20
 626:	60 0d       	add	r22, r0
 628:	21 1d       	adc	r18, r1
 62a:	82 2f       	mov	r24, r18
 62c:	76 2f       	mov	r23, r22
 62e:	6a 2f       	mov	r22, r26
 630:	11 24       	eor	r1, r1
 632:	9f 57       	subi	r25, 0x7F	; 127
 634:	50 40       	sbci	r21, 0x00	; 0
 636:	8a f0       	brmi	.+34     	; 0x65a <__mulsf3_pse+0x84>
 638:	e1 f0       	breq	.+56     	; 0x672 <__mulsf3_pse+0x9c>
 63a:	88 23       	and	r24, r24
 63c:	4a f0       	brmi	.+18     	; 0x650 <__mulsf3_pse+0x7a>
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	bb 1f       	adc	r27, r27
 644:	66 1f       	adc	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	91 50       	subi	r25, 0x01	; 1
 64c:	50 40       	sbci	r21, 0x00	; 0
 64e:	a9 f7       	brne	.-22     	; 0x63a <__mulsf3_pse+0x64>
 650:	9e 3f       	cpi	r25, 0xFE	; 254
 652:	51 05       	cpc	r21, r1
 654:	70 f0       	brcs	.+28     	; 0x672 <__mulsf3_pse+0x9c>
 656:	14 c0       	rjmp	.+40     	; 0x680 <__fp_inf>
 658:	5e c0       	rjmp	.+188    	; 0x716 <__fp_szero>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	ec f3       	brlt	.-6      	; 0x658 <__mulsf3_pse+0x82>
 65e:	98 3e       	cpi	r25, 0xE8	; 232
 660:	dc f3       	brlt	.-10     	; 0x658 <__mulsf3_pse+0x82>
 662:	86 95       	lsr	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f7 95       	ror	r31
 66c:	e7 95       	ror	r30
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	c1 f7       	brne	.-16     	; 0x662 <__mulsf3_pse+0x8c>
 672:	fe 2b       	or	r31, r30
 674:	88 0f       	add	r24, r24
 676:	91 1d       	adc	r25, r1
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	97 f9       	bld	r25, 7
 67e:	08 95       	ret

00000680 <__fp_inf>:
 680:	97 f9       	bld	r25, 7
 682:	9f 67       	ori	r25, 0x7F	; 127
 684:	80 e8       	ldi	r24, 0x80	; 128
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	08 95       	ret

0000068c <__fp_nan>:
 68c:	9f ef       	ldi	r25, 0xFF	; 255
 68e:	80 ec       	ldi	r24, 0xC0	; 192
 690:	08 95       	ret

00000692 <__fp_pscA>:
 692:	00 24       	eor	r0, r0
 694:	0a 94       	dec	r0
 696:	16 16       	cp	r1, r22
 698:	17 06       	cpc	r1, r23
 69a:	18 06       	cpc	r1, r24
 69c:	09 06       	cpc	r0, r25
 69e:	08 95       	ret

000006a0 <__fp_pscB>:
 6a0:	00 24       	eor	r0, r0
 6a2:	0a 94       	dec	r0
 6a4:	12 16       	cp	r1, r18
 6a6:	13 06       	cpc	r1, r19
 6a8:	14 06       	cpc	r1, r20
 6aa:	05 06       	cpc	r0, r21
 6ac:	08 95       	ret

000006ae <__fp_round>:
 6ae:	09 2e       	mov	r0, r25
 6b0:	03 94       	inc	r0
 6b2:	00 0c       	add	r0, r0
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__fp_round+0xc>
 6b6:	88 23       	and	r24, r24
 6b8:	52 f0       	brmi	.+20     	; 0x6ce <__fp_round+0x20>
 6ba:	bb 0f       	add	r27, r27
 6bc:	40 f4       	brcc	.+16     	; 0x6ce <__fp_round+0x20>
 6be:	bf 2b       	or	r27, r31
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <__fp_round+0x18>
 6c2:	60 ff       	sbrs	r22, 0
 6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__fp_round+0x20>
 6c6:	6f 5f       	subi	r22, 0xFF	; 255
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 4f       	sbci	r24, 0xFF	; 255
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	08 95       	ret

000006d0 <__fp_split3>:
 6d0:	57 fd       	sbrc	r21, 7
 6d2:	90 58       	subi	r25, 0x80	; 128
 6d4:	44 0f       	add	r20, r20
 6d6:	55 1f       	adc	r21, r21
 6d8:	59 f0       	breq	.+22     	; 0x6f0 <__fp_splitA+0x10>
 6da:	5f 3f       	cpi	r21, 0xFF	; 255
 6dc:	71 f0       	breq	.+28     	; 0x6fa <__fp_splitA+0x1a>
 6de:	47 95       	ror	r20

000006e0 <__fp_splitA>:
 6e0:	88 0f       	add	r24, r24
 6e2:	97 fb       	bst	r25, 7
 6e4:	99 1f       	adc	r25, r25
 6e6:	61 f0       	breq	.+24     	; 0x700 <__fp_splitA+0x20>
 6e8:	9f 3f       	cpi	r25, 0xFF	; 255
 6ea:	79 f0       	breq	.+30     	; 0x70a <__fp_splitA+0x2a>
 6ec:	87 95       	ror	r24
 6ee:	08 95       	ret
 6f0:	12 16       	cp	r1, r18
 6f2:	13 06       	cpc	r1, r19
 6f4:	14 06       	cpc	r1, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	f2 cf       	rjmp	.-28     	; 0x6de <__fp_split3+0xe>
 6fa:	46 95       	lsr	r20
 6fc:	f1 df       	rcall	.-30     	; 0x6e0 <__fp_splitA>
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <__fp_splitA+0x30>
 700:	16 16       	cp	r1, r22
 702:	17 06       	cpc	r1, r23
 704:	18 06       	cpc	r1, r24
 706:	99 1f       	adc	r25, r25
 708:	f1 cf       	rjmp	.-30     	; 0x6ec <__fp_splitA+0xc>
 70a:	86 95       	lsr	r24
 70c:	71 05       	cpc	r23, r1
 70e:	61 05       	cpc	r22, r1
 710:	08 94       	sec
 712:	08 95       	ret

00000714 <__fp_zero>:
 714:	e8 94       	clt

00000716 <__fp_szero>:
 716:	bb 27       	eor	r27, r27
 718:	66 27       	eor	r22, r22
 71a:	77 27       	eor	r23, r23
 71c:	cb 01       	movw	r24, r22
 71e:	97 f9       	bld	r25, 7
 720:	08 95       	ret

00000722 <dtostrf>:
 722:	ef 92       	push	r14
 724:	ff 92       	push	r15
 726:	0f 93       	push	r16
 728:	1f 93       	push	r17
 72a:	f2 2f       	mov	r31, r18
 72c:	f0 2e       	mov	r15, r16
 72e:	47 fd       	sbrc	r20, 7
 730:	02 c0       	rjmp	.+4      	; 0x736 <dtostrf+0x14>
 732:	e4 e0       	ldi	r30, 0x04	; 4
 734:	01 c0       	rjmp	.+2      	; 0x738 <dtostrf+0x16>
 736:	e4 e1       	ldi	r30, 0x14	; 20
 738:	24 2f       	mov	r18, r20
 73a:	33 27       	eor	r19, r19
 73c:	27 fd       	sbrc	r18, 7
 73e:	30 95       	com	r19
 740:	37 ff       	sbrs	r19, 7
 742:	03 c0       	rjmp	.+6      	; 0x74a <dtostrf+0x28>
 744:	30 95       	com	r19
 746:	21 95       	neg	r18
 748:	3f 4f       	sbci	r19, 0xFF	; 255
 74a:	4f 2d       	mov	r20, r15
 74c:	51 2f       	mov	r21, r17
 74e:	0f 2f       	mov	r16, r31
 750:	ee 2e       	mov	r14, r30
 752:	0e 94 4f 04 	call	0x89e	; 0x89e <dtoa_prf>
 756:	8f 2d       	mov	r24, r15
 758:	91 2f       	mov	r25, r17
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	ff 90       	pop	r15
 760:	ef 90       	pop	r14
 762:	08 95       	ret

00000764 <fdevopen>:
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	8c 01       	movw	r16, r24
 76e:	eb 01       	movw	r28, r22
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	31 f4       	brne	.+12     	; 0x780 <fdevopen+0x1c>
 774:	61 15       	cp	r22, r1
 776:	71 05       	cpc	r23, r1
 778:	19 f4       	brne	.+6      	; 0x780 <fdevopen+0x1c>
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	38 c0       	rjmp	.+112    	; 0x7f0 <fdevopen+0x8c>
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	6e e0       	ldi	r22, 0x0E	; 14
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	0e 94 33 04 	call	0x866	; 0x866 <calloc>
 78c:	fc 01       	movw	r30, r24
 78e:	9c 01       	movw	r18, r24
 790:	00 97       	sbiw	r24, 0x00	; 0
 792:	71 f1       	breq	.+92     	; 0x7f0 <fdevopen+0x8c>
 794:	80 e8       	ldi	r24, 0x80	; 128
 796:	83 83       	std	Z+3, r24	; 0x03
 798:	20 97       	sbiw	r28, 0x00	; 0
 79a:	71 f0       	breq	.+28     	; 0x7b8 <fdevopen+0x54>
 79c:	d3 87       	std	Z+11, r29	; 0x0b
 79e:	c2 87       	std	Z+10, r28	; 0x0a
 7a0:	81 e8       	ldi	r24, 0x81	; 129
 7a2:	83 83       	std	Z+3, r24	; 0x03
 7a4:	80 91 26 01 	lds	r24, 0x0126
 7a8:	90 91 27 01 	lds	r25, 0x0127
 7ac:	89 2b       	or	r24, r25
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <fdevopen+0x54>
 7b0:	f0 93 27 01 	sts	0x0127, r31
 7b4:	e0 93 26 01 	sts	0x0126, r30
 7b8:	01 15       	cp	r16, r1
 7ba:	11 05       	cpc	r17, r1
 7bc:	c9 f0       	breq	.+50     	; 0x7f0 <fdevopen+0x8c>
 7be:	11 87       	std	Z+9, r17	; 0x09
 7c0:	00 87       	std	Z+8, r16	; 0x08
 7c2:	83 81       	ldd	r24, Z+3	; 0x03
 7c4:	82 60       	ori	r24, 0x02	; 2
 7c6:	83 83       	std	Z+3, r24	; 0x03
 7c8:	80 91 28 01 	lds	r24, 0x0128
 7cc:	90 91 29 01 	lds	r25, 0x0129
 7d0:	89 2b       	or	r24, r25
 7d2:	71 f4       	brne	.+28     	; 0x7f0 <fdevopen+0x8c>
 7d4:	f0 93 29 01 	sts	0x0129, r31
 7d8:	e0 93 28 01 	sts	0x0128, r30
 7dc:	80 91 2a 01 	lds	r24, 0x012A
 7e0:	90 91 2b 01 	lds	r25, 0x012B
 7e4:	89 2b       	or	r24, r25
 7e6:	21 f4       	brne	.+8      	; 0x7f0 <fdevopen+0x8c>
 7e8:	f0 93 2b 01 	sts	0x012B, r31
 7ec:	e0 93 2a 01 	sts	0x012A, r30
 7f0:	c9 01       	movw	r24, r18
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	08 95       	ret

000007fc <puts>:
 7fc:	0f 93       	push	r16
 7fe:	1f 93       	push	r17
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	8c 01       	movw	r16, r24
 806:	e0 91 28 01 	lds	r30, 0x0128
 80a:	f0 91 29 01 	lds	r31, 0x0129
 80e:	83 81       	ldd	r24, Z+3	; 0x03
 810:	81 ff       	sbrs	r24, 1
 812:	21 c0       	rjmp	.+66     	; 0x856 <puts+0x5a>
 814:	c0 e0       	ldi	r28, 0x00	; 0
 816:	d0 e0       	ldi	r29, 0x00	; 0
 818:	0d c0       	rjmp	.+26     	; 0x834 <puts+0x38>
 81a:	e0 91 28 01 	lds	r30, 0x0128
 81e:	f0 91 29 01 	lds	r31, 0x0129
 822:	20 85       	ldd	r18, Z+8	; 0x08
 824:	31 85       	ldd	r19, Z+9	; 0x09
 826:	bf 01       	movw	r22, r30
 828:	f9 01       	movw	r30, r18
 82a:	09 95       	icall
 82c:	89 2b       	or	r24, r25
 82e:	11 f0       	breq	.+4      	; 0x834 <puts+0x38>
 830:	cf ef       	ldi	r28, 0xFF	; 255
 832:	df ef       	ldi	r29, 0xFF	; 255
 834:	f8 01       	movw	r30, r16
 836:	81 91       	ld	r24, Z+
 838:	8f 01       	movw	r16, r30
 83a:	88 23       	and	r24, r24
 83c:	71 f7       	brne	.-36     	; 0x81a <puts+0x1e>
 83e:	e0 91 28 01 	lds	r30, 0x0128
 842:	f0 91 29 01 	lds	r31, 0x0129
 846:	20 85       	ldd	r18, Z+8	; 0x08
 848:	31 85       	ldd	r19, Z+9	; 0x09
 84a:	8a e0       	ldi	r24, 0x0A	; 10
 84c:	bf 01       	movw	r22, r30
 84e:	f9 01       	movw	r30, r18
 850:	09 95       	icall
 852:	89 2b       	or	r24, r25
 854:	11 f0       	breq	.+4      	; 0x85a <puts+0x5e>
 856:	cf ef       	ldi	r28, 0xFF	; 255
 858:	df ef       	ldi	r29, 0xFF	; 255
 85a:	ce 01       	movw	r24, r28
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	1f 91       	pop	r17
 862:	0f 91       	pop	r16
 864:	08 95       	ret

00000866 <calloc>:
 866:	0f 93       	push	r16
 868:	1f 93       	push	r17
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
 86e:	68 9f       	mul	r22, r24
 870:	80 01       	movw	r16, r0
 872:	69 9f       	mul	r22, r25
 874:	10 0d       	add	r17, r0
 876:	78 9f       	mul	r23, r24
 878:	10 0d       	add	r17, r0
 87a:	11 24       	eor	r1, r1
 87c:	c8 01       	movw	r24, r16
 87e:	0e 94 b1 05 	call	0xb62	; 0xb62 <malloc>
 882:	ec 01       	movw	r28, r24
 884:	00 97       	sbiw	r24, 0x00	; 0
 886:	29 f0       	breq	.+10     	; 0x892 <calloc+0x2c>
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	a8 01       	movw	r20, r16
 88e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <memset>
 892:	ce 01       	movw	r24, r28
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
 89a:	0f 91       	pop	r16
 89c:	08 95       	ret

0000089e <dtoa_prf>:
 89e:	a9 e0       	ldi	r26, 0x09	; 9
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e5 e5       	ldi	r30, 0x55	; 85
 8a4:	f4 e0       	ldi	r31, 0x04	; 4
 8a6:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__prologue_saves__+0x8>
 8aa:	6a 01       	movw	r12, r20
 8ac:	12 2f       	mov	r17, r18
 8ae:	a0 2e       	mov	r10, r16
 8b0:	be 2c       	mov	r11, r14
 8b2:	2b e3       	ldi	r18, 0x3B	; 59
 8b4:	20 17       	cp	r18, r16
 8b6:	18 f4       	brcc	.+6      	; 0x8be <dtoa_prf+0x20>
 8b8:	2c e3       	ldi	r18, 0x3C	; 60
 8ba:	92 2e       	mov	r9, r18
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <dtoa_prf+0x24>
 8be:	90 2e       	mov	r9, r16
 8c0:	93 94       	inc	r9
 8c2:	ae 01       	movw	r20, r28
 8c4:	4f 5f       	subi	r20, 0xFF	; 255
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255
 8c8:	27 e0       	ldi	r18, 0x07	; 7
 8ca:	09 2d       	mov	r16, r9
 8cc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__ftoa_engine>
 8d0:	bc 01       	movw	r22, r24
 8d2:	89 81       	ldd	r24, Y+1	; 0x01
 8d4:	e8 2e       	mov	r14, r24
 8d6:	ff 24       	eor	r15, r15
 8d8:	c7 01       	movw	r24, r14
 8da:	89 70       	andi	r24, 0x09	; 9
 8dc:	90 70       	andi	r25, 0x00	; 0
 8de:	01 97       	sbiw	r24, 0x01	; 1
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <dtoa_prf+0x48>
 8e2:	ad e2       	ldi	r26, 0x2D	; 45
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <dtoa_prf+0x5a>
 8e6:	b1 fe       	sbrs	r11, 1
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <dtoa_prf+0x50>
 8ea:	ab e2       	ldi	r26, 0x2B	; 43
 8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <dtoa_prf+0x5a>
 8ee:	b0 fc       	sbrc	r11, 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <dtoa_prf+0x58>
 8f2:	a0 e0       	ldi	r26, 0x00	; 0
 8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <dtoa_prf+0x5a>
 8f6:	a0 e2       	ldi	r26, 0x20	; 32
 8f8:	e3 fe       	sbrs	r14, 3
 8fa:	3b c0       	rjmp	.+118    	; 0x972 <dtoa_prf+0xd4>
 8fc:	aa 23       	and	r26, r26
 8fe:	11 f4       	brne	.+4      	; 0x904 <dtoa_prf+0x66>
 900:	23 e0       	ldi	r18, 0x03	; 3
 902:	01 c0       	rjmp	.+2      	; 0x906 <dtoa_prf+0x68>
 904:	24 e0       	ldi	r18, 0x04	; 4
 906:	21 17       	cp	r18, r17
 908:	10 f0       	brcs	.+4      	; 0x90e <dtoa_prf+0x70>
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	02 c0       	rjmp	.+4      	; 0x912 <dtoa_prf+0x74>
 90e:	12 1b       	sub	r17, r18
 910:	21 2f       	mov	r18, r17
 912:	eb 2c       	mov	r14, r11
 914:	b4 fe       	sbrs	r11, 4
 916:	02 c0       	rjmp	.+4      	; 0x91c <dtoa_prf+0x7e>
 918:	32 2f       	mov	r19, r18
 91a:	0a c0       	rjmp	.+20     	; 0x930 <dtoa_prf+0x92>
 91c:	f6 01       	movw	r30, r12
 91e:	32 2f       	mov	r19, r18
 920:	80 e2       	ldi	r24, 0x20	; 32
 922:	02 c0       	rjmp	.+4      	; 0x928 <dtoa_prf+0x8a>
 924:	81 93       	st	Z+, r24
 926:	31 50       	subi	r19, 0x01	; 1
 928:	33 23       	and	r19, r19
 92a:	e1 f7       	brne	.-8      	; 0x924 <dtoa_prf+0x86>
 92c:	c2 0e       	add	r12, r18
 92e:	d1 1c       	adc	r13, r1
 930:	aa 23       	and	r26, r26
 932:	19 f0       	breq	.+6      	; 0x93a <dtoa_prf+0x9c>
 934:	f6 01       	movw	r30, r12
 936:	a1 93       	st	Z+, r26
 938:	6f 01       	movw	r12, r30
 93a:	f6 01       	movw	r30, r12
 93c:	31 96       	adiw	r30, 0x01	; 1
 93e:	e2 fe       	sbrs	r14, 2
 940:	05 c0       	rjmp	.+10     	; 0x94c <dtoa_prf+0xae>
 942:	9e e4       	ldi	r25, 0x4E	; 78
 944:	d6 01       	movw	r26, r12
 946:	9c 93       	st	X, r25
 948:	81 e4       	ldi	r24, 0x41	; 65
 94a:	04 c0       	rjmp	.+8      	; 0x954 <dtoa_prf+0xb6>
 94c:	9e e6       	ldi	r25, 0x6E	; 110
 94e:	d6 01       	movw	r26, r12
 950:	9c 93       	st	X, r25
 952:	81 e6       	ldi	r24, 0x61	; 97
 954:	11 96       	adiw	r26, 0x01	; 1
 956:	8c 93       	st	X, r24
 958:	91 83       	std	Z+1, r25	; 0x01
 95a:	32 96       	adiw	r30, 0x02	; 2
 95c:	df 01       	movw	r26, r30
 95e:	83 2f       	mov	r24, r19
 960:	90 e2       	ldi	r25, 0x20	; 32
 962:	02 c0       	rjmp	.+4      	; 0x968 <dtoa_prf+0xca>
 964:	9d 93       	st	X+, r25
 966:	81 50       	subi	r24, 0x01	; 1
 968:	88 23       	and	r24, r24
 96a:	e1 f7       	brne	.-8      	; 0x964 <dtoa_prf+0xc6>
 96c:	e3 0f       	add	r30, r19
 96e:	f1 1d       	adc	r31, r1
 970:	40 c0       	rjmp	.+128    	; 0x9f2 <dtoa_prf+0x154>
 972:	e2 fe       	sbrs	r14, 2
 974:	42 c0       	rjmp	.+132    	; 0x9fa <dtoa_prf+0x15c>
 976:	aa 23       	and	r26, r26
 978:	11 f4       	brne	.+4      	; 0x97e <dtoa_prf+0xe0>
 97a:	23 e0       	ldi	r18, 0x03	; 3
 97c:	01 c0       	rjmp	.+2      	; 0x980 <dtoa_prf+0xe2>
 97e:	24 e0       	ldi	r18, 0x04	; 4
 980:	21 17       	cp	r18, r17
 982:	10 f0       	brcs	.+4      	; 0x988 <dtoa_prf+0xea>
 984:	20 e0       	ldi	r18, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <dtoa_prf+0xee>
 988:	12 1b       	sub	r17, r18
 98a:	21 2f       	mov	r18, r17
 98c:	eb 2c       	mov	r14, r11
 98e:	b4 fe       	sbrs	r11, 4
 990:	02 c0       	rjmp	.+4      	; 0x996 <dtoa_prf+0xf8>
 992:	92 2f       	mov	r25, r18
 994:	0a c0       	rjmp	.+20     	; 0x9aa <dtoa_prf+0x10c>
 996:	f6 01       	movw	r30, r12
 998:	92 2f       	mov	r25, r18
 99a:	80 e2       	ldi	r24, 0x20	; 32
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <dtoa_prf+0x104>
 99e:	81 93       	st	Z+, r24
 9a0:	91 50       	subi	r25, 0x01	; 1
 9a2:	99 23       	and	r25, r25
 9a4:	e1 f7       	brne	.-8      	; 0x99e <dtoa_prf+0x100>
 9a6:	c2 0e       	add	r12, r18
 9a8:	d1 1c       	adc	r13, r1
 9aa:	aa 23       	and	r26, r26
 9ac:	19 f0       	breq	.+6      	; 0x9b4 <dtoa_prf+0x116>
 9ae:	f6 01       	movw	r30, r12
 9b0:	a1 93       	st	Z+, r26
 9b2:	6f 01       	movw	r12, r30
 9b4:	f6 01       	movw	r30, r12
 9b6:	31 96       	adiw	r30, 0x01	; 1
 9b8:	e2 fe       	sbrs	r14, 2
 9ba:	08 c0       	rjmp	.+16     	; 0x9cc <dtoa_prf+0x12e>
 9bc:	89 e4       	ldi	r24, 0x49	; 73
 9be:	d6 01       	movw	r26, r12
 9c0:	8c 93       	st	X, r24
 9c2:	8e e4       	ldi	r24, 0x4E	; 78
 9c4:	11 96       	adiw	r26, 0x01	; 1
 9c6:	8c 93       	st	X, r24
 9c8:	86 e4       	ldi	r24, 0x46	; 70
 9ca:	07 c0       	rjmp	.+14     	; 0x9da <dtoa_prf+0x13c>
 9cc:	89 e6       	ldi	r24, 0x69	; 105
 9ce:	d6 01       	movw	r26, r12
 9d0:	8c 93       	st	X, r24
 9d2:	8e e6       	ldi	r24, 0x6E	; 110
 9d4:	11 96       	adiw	r26, 0x01	; 1
 9d6:	8c 93       	st	X, r24
 9d8:	86 e6       	ldi	r24, 0x66	; 102
 9da:	81 83       	std	Z+1, r24	; 0x01
 9dc:	32 96       	adiw	r30, 0x02	; 2
 9de:	df 01       	movw	r26, r30
 9e0:	89 2f       	mov	r24, r25
 9e2:	20 e2       	ldi	r18, 0x20	; 32
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <dtoa_prf+0x14c>
 9e6:	2d 93       	st	X+, r18
 9e8:	81 50       	subi	r24, 0x01	; 1
 9ea:	88 23       	and	r24, r24
 9ec:	e1 f7       	brne	.-8      	; 0x9e6 <dtoa_prf+0x148>
 9ee:	e9 0f       	add	r30, r25
 9f0:	f1 1d       	adc	r31, r1
 9f2:	10 82       	st	Z, r1
 9f4:	2e ef       	ldi	r18, 0xFE	; 254
 9f6:	3f ef       	ldi	r19, 0xFF	; 255
 9f8:	af c0       	rjmp	.+350    	; 0xb58 <dtoa_prf+0x2ba>
 9fa:	16 16       	cp	r1, r22
 9fc:	17 06       	cpc	r1, r23
 9fe:	1c f0       	brlt	.+6      	; 0xa06 <dtoa_prf+0x168>
 a00:	41 e0       	ldi	r20, 0x01	; 1
 a02:	50 e0       	ldi	r21, 0x00	; 0
 a04:	03 c0       	rjmp	.+6      	; 0xa0c <dtoa_prf+0x16e>
 a06:	ab 01       	movw	r20, r22
 a08:	4f 5f       	subi	r20, 0xFF	; 255
 a0a:	5f 4f       	sbci	r21, 0xFF	; 255
 a0c:	aa 20       	and	r10, r10
 a0e:	19 f4       	brne	.+6      	; 0xa16 <dtoa_prf+0x178>
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <dtoa_prf+0x17e>
 a16:	8a 2d       	mov	r24, r10
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	20 e0       	ldi	r18, 0x00	; 0
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	aa 23       	and	r26, r26
 a22:	11 f0       	breq	.+4      	; 0xa28 <dtoa_prf+0x18a>
 a24:	21 e0       	ldi	r18, 0x01	; 1
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	24 0f       	add	r18, r20
 a2a:	35 1f       	adc	r19, r21
 a2c:	28 0f       	add	r18, r24
 a2e:	39 1f       	adc	r19, r25
 a30:	81 2f       	mov	r24, r17
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	28 17       	cp	r18, r24
 a36:	39 07       	cpc	r19, r25
 a38:	14 f0       	brlt	.+4      	; 0xa3e <dtoa_prf+0x1a0>
 a3a:	20 e0       	ldi	r18, 0x00	; 0
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <dtoa_prf+0x1a4>
 a3e:	12 1b       	sub	r17, r18
 a40:	21 2f       	mov	r18, r17
 a42:	4b 2d       	mov	r20, r11
 a44:	50 e0       	ldi	r21, 0x00	; 0
 a46:	ca 01       	movw	r24, r20
 a48:	80 71       	andi	r24, 0x10	; 16
 a4a:	90 70       	andi	r25, 0x00	; 0
 a4c:	b4 fc       	sbrc	r11, 4
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <dtoa_prf+0x1cc>
 a50:	b3 fc       	sbrc	r11, 3
 a52:	0b c0       	rjmp	.+22     	; 0xa6a <dtoa_prf+0x1cc>
 a54:	f6 01       	movw	r30, r12
 a56:	32 2f       	mov	r19, r18
 a58:	40 e2       	ldi	r20, 0x20	; 32
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <dtoa_prf+0x1c2>
 a5c:	41 93       	st	Z+, r20
 a5e:	31 50       	subi	r19, 0x01	; 1
 a60:	33 23       	and	r19, r19
 a62:	e1 f7       	brne	.-8      	; 0xa5c <dtoa_prf+0x1be>
 a64:	c2 0e       	add	r12, r18
 a66:	d1 1c       	adc	r13, r1
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <dtoa_prf+0x1ce>
 a6a:	32 2f       	mov	r19, r18
 a6c:	aa 23       	and	r26, r26
 a6e:	19 f0       	breq	.+6      	; 0xa76 <dtoa_prf+0x1d8>
 a70:	f6 01       	movw	r30, r12
 a72:	a1 93       	st	Z+, r26
 a74:	6f 01       	movw	r12, r30
 a76:	89 2b       	or	r24, r25
 a78:	11 f0       	breq	.+4      	; 0xa7e <dtoa_prf+0x1e0>
 a7a:	13 2f       	mov	r17, r19
 a7c:	0a c0       	rjmp	.+20     	; 0xa92 <dtoa_prf+0x1f4>
 a7e:	f6 01       	movw	r30, r12
 a80:	13 2f       	mov	r17, r19
 a82:	80 e3       	ldi	r24, 0x30	; 48
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <dtoa_prf+0x1ec>
 a86:	81 93       	st	Z+, r24
 a88:	11 50       	subi	r17, 0x01	; 1
 a8a:	11 23       	and	r17, r17
 a8c:	e1 f7       	brne	.-8      	; 0xa86 <dtoa_prf+0x1e8>
 a8e:	c3 0e       	add	r12, r19
 a90:	d1 1c       	adc	r13, r1
 a92:	09 2d       	mov	r16, r9
 a94:	06 0f       	add	r16, r22
 a96:	ba 80       	ldd	r11, Y+2	; 0x02
 a98:	90 e1       	ldi	r25, 0x10	; 16
 a9a:	89 2e       	mov	r8, r25
 a9c:	91 2c       	mov	r9, r1
 a9e:	8e 20       	and	r8, r14
 aa0:	9f 20       	and	r9, r15
 aa2:	e4 fe       	sbrs	r14, 4
 aa4:	04 c0       	rjmp	.+8      	; 0xaae <dtoa_prf+0x210>
 aa6:	f1 e3       	ldi	r31, 0x31	; 49
 aa8:	bf 16       	cp	r11, r31
 aaa:	09 f4       	brne	.+2      	; 0xaae <dtoa_prf+0x210>
 aac:	01 50       	subi	r16, 0x01	; 1
 aae:	10 16       	cp	r1, r16
 ab0:	14 f0       	brlt	.+4      	; 0xab6 <dtoa_prf+0x218>
 ab2:	01 e0       	ldi	r16, 0x01	; 1
 ab4:	03 c0       	rjmp	.+6      	; 0xabc <dtoa_prf+0x21e>
 ab6:	09 30       	cpi	r16, 0x09	; 9
 ab8:	08 f0       	brcs	.+2      	; 0xabc <dtoa_prf+0x21e>
 aba:	08 e0       	ldi	r16, 0x08	; 8
 abc:	9b 01       	movw	r18, r22
 abe:	77 ff       	sbrs	r23, 7
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <dtoa_prf+0x228>
 ac2:	20 e0       	ldi	r18, 0x00	; 0
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	cb 01       	movw	r24, r22
 ac8:	01 96       	adiw	r24, 0x01	; 1
 aca:	82 1b       	sub	r24, r18
 acc:	93 0b       	sbc	r25, r19
 ace:	fe 01       	movw	r30, r28
 ad0:	31 96       	adiw	r30, 0x01	; 1
 ad2:	e8 0f       	add	r30, r24
 ad4:	f9 1f       	adc	r31, r25
 ad6:	8e e2       	ldi	r24, 0x2E	; 46
 ad8:	f8 2e       	mov	r15, r24
 ada:	3b 01       	movw	r6, r22
 adc:	60 1a       	sub	r6, r16
 ade:	71 08       	sbc	r7, r1
 ae0:	8a 2d       	mov	r24, r10
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	44 27       	eor	r20, r20
 ae6:	55 27       	eor	r21, r21
 ae8:	48 1b       	sub	r20, r24
 aea:	59 0b       	sbc	r21, r25
 aec:	8f ef       	ldi	r24, 0xFF	; 255
 aee:	2f 3f       	cpi	r18, 0xFF	; 255
 af0:	38 07       	cpc	r19, r24
 af2:	19 f4       	brne	.+6      	; 0xafa <dtoa_prf+0x25c>
 af4:	d6 01       	movw	r26, r12
 af6:	fd 92       	st	X+, r15
 af8:	6d 01       	movw	r12, r26
 afa:	62 17       	cp	r22, r18
 afc:	73 07       	cpc	r23, r19
 afe:	2c f0       	brlt	.+10     	; 0xb0a <dtoa_prf+0x26c>
 b00:	62 16       	cp	r6, r18
 b02:	73 06       	cpc	r7, r19
 b04:	14 f4       	brge	.+4      	; 0xb0a <dtoa_prf+0x26c>
 b06:	80 81       	ld	r24, Z
 b08:	01 c0       	rjmp	.+2      	; 0xb0c <dtoa_prf+0x26e>
 b0a:	80 e3       	ldi	r24, 0x30	; 48
 b0c:	21 50       	subi	r18, 0x01	; 1
 b0e:	30 40       	sbci	r19, 0x00	; 0
 b10:	31 96       	adiw	r30, 0x01	; 1
 b12:	24 17       	cp	r18, r20
 b14:	35 07       	cpc	r19, r21
 b16:	24 f0       	brlt	.+8      	; 0xb20 <dtoa_prf+0x282>
 b18:	d6 01       	movw	r26, r12
 b1a:	8d 93       	st	X+, r24
 b1c:	6d 01       	movw	r12, r26
 b1e:	e6 cf       	rjmp	.-52     	; 0xaec <dtoa_prf+0x24e>
 b20:	26 17       	cp	r18, r22
 b22:	37 07       	cpc	r19, r23
 b24:	49 f4       	brne	.+18     	; 0xb38 <dtoa_prf+0x29a>
 b26:	b5 e3       	ldi	r27, 0x35	; 53
 b28:	bb 15       	cp	r27, r11
 b2a:	28 f0       	brcs	.+10     	; 0xb36 <dtoa_prf+0x298>
 b2c:	bb 16       	cp	r11, r27
 b2e:	21 f4       	brne	.+8      	; 0xb38 <dtoa_prf+0x29a>
 b30:	81 14       	cp	r8, r1
 b32:	91 04       	cpc	r9, r1
 b34:	09 f4       	brne	.+2      	; 0xb38 <dtoa_prf+0x29a>
 b36:	81 e3       	ldi	r24, 0x31	; 49
 b38:	f6 01       	movw	r30, r12
 b3a:	81 93       	st	Z+, r24
 b3c:	d6 01       	movw	r26, r12
 b3e:	81 2f       	mov	r24, r17
 b40:	90 e2       	ldi	r25, 0x20	; 32
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <dtoa_prf+0x2aa>
 b44:	9c 93       	st	X, r25
 b46:	81 50       	subi	r24, 0x01	; 1
 b48:	11 96       	adiw	r26, 0x01	; 1
 b4a:	88 23       	and	r24, r24
 b4c:	d9 f7       	brne	.-10     	; 0xb44 <dtoa_prf+0x2a6>
 b4e:	e1 0f       	add	r30, r17
 b50:	f1 1d       	adc	r31, r1
 b52:	10 82       	st	Z, r1
 b54:	20 e0       	ldi	r18, 0x00	; 0
 b56:	30 e0       	ldi	r19, 0x00	; 0
 b58:	c9 01       	movw	r24, r18
 b5a:	29 96       	adiw	r28, 0x09	; 9
 b5c:	ee e0       	ldi	r30, 0x0E	; 14
 b5e:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__epilogue_restores__+0x8>

00000b62 <malloc>:
 b62:	cf 93       	push	r28
 b64:	df 93       	push	r29
 b66:	bc 01       	movw	r22, r24
 b68:	82 30       	cpi	r24, 0x02	; 2
 b6a:	91 05       	cpc	r25, r1
 b6c:	10 f4       	brcc	.+4      	; 0xb72 <malloc+0x10>
 b6e:	62 e0       	ldi	r22, 0x02	; 2
 b70:	70 e0       	ldi	r23, 0x00	; 0
 b72:	a0 91 2e 01 	lds	r26, 0x012E
 b76:	b0 91 2f 01 	lds	r27, 0x012F
 b7a:	ed 01       	movw	r28, r26
 b7c:	e0 e0       	ldi	r30, 0x00	; 0
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	40 e0       	ldi	r20, 0x00	; 0
 b82:	50 e0       	ldi	r21, 0x00	; 0
 b84:	21 c0       	rjmp	.+66     	; 0xbc8 <malloc+0x66>
 b86:	88 81       	ld	r24, Y
 b88:	99 81       	ldd	r25, Y+1	; 0x01
 b8a:	86 17       	cp	r24, r22
 b8c:	97 07       	cpc	r25, r23
 b8e:	69 f4       	brne	.+26     	; 0xbaa <malloc+0x48>
 b90:	8a 81       	ldd	r24, Y+2	; 0x02
 b92:	9b 81       	ldd	r25, Y+3	; 0x03
 b94:	30 97       	sbiw	r30, 0x00	; 0
 b96:	19 f0       	breq	.+6      	; 0xb9e <malloc+0x3c>
 b98:	93 83       	std	Z+3, r25	; 0x03
 b9a:	82 83       	std	Z+2, r24	; 0x02
 b9c:	04 c0       	rjmp	.+8      	; 0xba6 <malloc+0x44>
 b9e:	90 93 2f 01 	sts	0x012F, r25
 ba2:	80 93 2e 01 	sts	0x012E, r24
 ba6:	fe 01       	movw	r30, r28
 ba8:	34 c0       	rjmp	.+104    	; 0xc12 <malloc+0xb0>
 baa:	68 17       	cp	r22, r24
 bac:	79 07       	cpc	r23, r25
 bae:	38 f4       	brcc	.+14     	; 0xbbe <malloc+0x5c>
 bb0:	41 15       	cp	r20, r1
 bb2:	51 05       	cpc	r21, r1
 bb4:	19 f0       	breq	.+6      	; 0xbbc <malloc+0x5a>
 bb6:	84 17       	cp	r24, r20
 bb8:	95 07       	cpc	r25, r21
 bba:	08 f4       	brcc	.+2      	; 0xbbe <malloc+0x5c>
 bbc:	ac 01       	movw	r20, r24
 bbe:	fe 01       	movw	r30, r28
 bc0:	8a 81       	ldd	r24, Y+2	; 0x02
 bc2:	9b 81       	ldd	r25, Y+3	; 0x03
 bc4:	9c 01       	movw	r18, r24
 bc6:	e9 01       	movw	r28, r18
 bc8:	20 97       	sbiw	r28, 0x00	; 0
 bca:	e9 f6       	brne	.-70     	; 0xb86 <malloc+0x24>
 bcc:	41 15       	cp	r20, r1
 bce:	51 05       	cpc	r21, r1
 bd0:	a9 f1       	breq	.+106    	; 0xc3c <malloc+0xda>
 bd2:	ca 01       	movw	r24, r20
 bd4:	86 1b       	sub	r24, r22
 bd6:	97 0b       	sbc	r25, r23
 bd8:	04 97       	sbiw	r24, 0x04	; 4
 bda:	08 f4       	brcc	.+2      	; 0xbde <malloc+0x7c>
 bdc:	ba 01       	movw	r22, r20
 bde:	e0 e0       	ldi	r30, 0x00	; 0
 be0:	f0 e0       	ldi	r31, 0x00	; 0
 be2:	2a c0       	rjmp	.+84     	; 0xc38 <malloc+0xd6>
 be4:	8d 91       	ld	r24, X+
 be6:	9c 91       	ld	r25, X
 be8:	11 97       	sbiw	r26, 0x01	; 1
 bea:	84 17       	cp	r24, r20
 bec:	95 07       	cpc	r25, r21
 bee:	f9 f4       	brne	.+62     	; 0xc2e <malloc+0xcc>
 bf0:	64 17       	cp	r22, r20
 bf2:	75 07       	cpc	r23, r21
 bf4:	81 f4       	brne	.+32     	; 0xc16 <malloc+0xb4>
 bf6:	12 96       	adiw	r26, 0x02	; 2
 bf8:	8d 91       	ld	r24, X+
 bfa:	9c 91       	ld	r25, X
 bfc:	13 97       	sbiw	r26, 0x03	; 3
 bfe:	30 97       	sbiw	r30, 0x00	; 0
 c00:	19 f0       	breq	.+6      	; 0xc08 <malloc+0xa6>
 c02:	93 83       	std	Z+3, r25	; 0x03
 c04:	82 83       	std	Z+2, r24	; 0x02
 c06:	04 c0       	rjmp	.+8      	; 0xc10 <malloc+0xae>
 c08:	90 93 2f 01 	sts	0x012F, r25
 c0c:	80 93 2e 01 	sts	0x012E, r24
 c10:	fd 01       	movw	r30, r26
 c12:	32 96       	adiw	r30, 0x02	; 2
 c14:	4f c0       	rjmp	.+158    	; 0xcb4 <malloc+0x152>
 c16:	ca 01       	movw	r24, r20
 c18:	86 1b       	sub	r24, r22
 c1a:	97 0b       	sbc	r25, r23
 c1c:	fd 01       	movw	r30, r26
 c1e:	e8 0f       	add	r30, r24
 c20:	f9 1f       	adc	r31, r25
 c22:	61 93       	st	Z+, r22
 c24:	71 93       	st	Z+, r23
 c26:	02 97       	sbiw	r24, 0x02	; 2
 c28:	8d 93       	st	X+, r24
 c2a:	9c 93       	st	X, r25
 c2c:	43 c0       	rjmp	.+134    	; 0xcb4 <malloc+0x152>
 c2e:	fd 01       	movw	r30, r26
 c30:	82 81       	ldd	r24, Z+2	; 0x02
 c32:	93 81       	ldd	r25, Z+3	; 0x03
 c34:	9c 01       	movw	r18, r24
 c36:	d9 01       	movw	r26, r18
 c38:	10 97       	sbiw	r26, 0x00	; 0
 c3a:	a1 f6       	brne	.-88     	; 0xbe4 <malloc+0x82>
 c3c:	80 91 2c 01 	lds	r24, 0x012C
 c40:	90 91 2d 01 	lds	r25, 0x012D
 c44:	89 2b       	or	r24, r25
 c46:	41 f4       	brne	.+16     	; 0xc58 <malloc+0xf6>
 c48:	80 91 17 01 	lds	r24, 0x0117
 c4c:	90 91 18 01 	lds	r25, 0x0118
 c50:	90 93 2d 01 	sts	0x012D, r25
 c54:	80 93 2c 01 	sts	0x012C, r24
 c58:	40 91 19 01 	lds	r20, 0x0119
 c5c:	50 91 1a 01 	lds	r21, 0x011A
 c60:	41 15       	cp	r20, r1
 c62:	51 05       	cpc	r21, r1
 c64:	41 f4       	brne	.+16     	; 0xc76 <malloc+0x114>
 c66:	4d b7       	in	r20, 0x3d	; 61
 c68:	5e b7       	in	r21, 0x3e	; 62
 c6a:	80 91 15 01 	lds	r24, 0x0115
 c6e:	90 91 16 01 	lds	r25, 0x0116
 c72:	48 1b       	sub	r20, r24
 c74:	59 0b       	sbc	r21, r25
 c76:	20 91 2c 01 	lds	r18, 0x012C
 c7a:	30 91 2d 01 	lds	r19, 0x012D
 c7e:	24 17       	cp	r18, r20
 c80:	35 07       	cpc	r19, r21
 c82:	b0 f4       	brcc	.+44     	; 0xcb0 <malloc+0x14e>
 c84:	ca 01       	movw	r24, r20
 c86:	82 1b       	sub	r24, r18
 c88:	93 0b       	sbc	r25, r19
 c8a:	86 17       	cp	r24, r22
 c8c:	97 07       	cpc	r25, r23
 c8e:	80 f0       	brcs	.+32     	; 0xcb0 <malloc+0x14e>
 c90:	ab 01       	movw	r20, r22
 c92:	4e 5f       	subi	r20, 0xFE	; 254
 c94:	5f 4f       	sbci	r21, 0xFF	; 255
 c96:	84 17       	cp	r24, r20
 c98:	95 07       	cpc	r25, r21
 c9a:	50 f0       	brcs	.+20     	; 0xcb0 <malloc+0x14e>
 c9c:	42 0f       	add	r20, r18
 c9e:	53 1f       	adc	r21, r19
 ca0:	50 93 2d 01 	sts	0x012D, r21
 ca4:	40 93 2c 01 	sts	0x012C, r20
 ca8:	f9 01       	movw	r30, r18
 caa:	61 93       	st	Z+, r22
 cac:	71 93       	st	Z+, r23
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <malloc+0x152>
 cb0:	e0 e0       	ldi	r30, 0x00	; 0
 cb2:	f0 e0       	ldi	r31, 0x00	; 0
 cb4:	cf 01       	movw	r24, r30
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	08 95       	ret

00000cbc <free>:
 cbc:	cf 93       	push	r28
 cbe:	df 93       	push	r29
 cc0:	00 97       	sbiw	r24, 0x00	; 0
 cc2:	09 f4       	brne	.+2      	; 0xcc6 <free+0xa>
 cc4:	50 c0       	rjmp	.+160    	; 0xd66 <free+0xaa>
 cc6:	ec 01       	movw	r28, r24
 cc8:	22 97       	sbiw	r28, 0x02	; 2
 cca:	1b 82       	std	Y+3, r1	; 0x03
 ccc:	1a 82       	std	Y+2, r1	; 0x02
 cce:	a0 91 2e 01 	lds	r26, 0x012E
 cd2:	b0 91 2f 01 	lds	r27, 0x012F
 cd6:	10 97       	sbiw	r26, 0x00	; 0
 cd8:	09 f1       	breq	.+66     	; 0xd1c <free+0x60>
 cda:	40 e0       	ldi	r20, 0x00	; 0
 cdc:	50 e0       	ldi	r21, 0x00	; 0
 cde:	ac 17       	cp	r26, r28
 ce0:	bd 07       	cpc	r27, r29
 ce2:	08 f1       	brcs	.+66     	; 0xd26 <free+0x6a>
 ce4:	bb 83       	std	Y+3, r27	; 0x03
 ce6:	aa 83       	std	Y+2, r26	; 0x02
 ce8:	fe 01       	movw	r30, r28
 cea:	21 91       	ld	r18, Z+
 cec:	31 91       	ld	r19, Z+
 cee:	e2 0f       	add	r30, r18
 cf0:	f3 1f       	adc	r31, r19
 cf2:	ae 17       	cp	r26, r30
 cf4:	bf 07       	cpc	r27, r31
 cf6:	79 f4       	brne	.+30     	; 0xd16 <free+0x5a>
 cf8:	8d 91       	ld	r24, X+
 cfa:	9c 91       	ld	r25, X
 cfc:	11 97       	sbiw	r26, 0x01	; 1
 cfe:	28 0f       	add	r18, r24
 d00:	39 1f       	adc	r19, r25
 d02:	2e 5f       	subi	r18, 0xFE	; 254
 d04:	3f 4f       	sbci	r19, 0xFF	; 255
 d06:	39 83       	std	Y+1, r19	; 0x01
 d08:	28 83       	st	Y, r18
 d0a:	12 96       	adiw	r26, 0x02	; 2
 d0c:	8d 91       	ld	r24, X+
 d0e:	9c 91       	ld	r25, X
 d10:	13 97       	sbiw	r26, 0x03	; 3
 d12:	9b 83       	std	Y+3, r25	; 0x03
 d14:	8a 83       	std	Y+2, r24	; 0x02
 d16:	41 15       	cp	r20, r1
 d18:	51 05       	cpc	r21, r1
 d1a:	71 f4       	brne	.+28     	; 0xd38 <free+0x7c>
 d1c:	d0 93 2f 01 	sts	0x012F, r29
 d20:	c0 93 2e 01 	sts	0x012E, r28
 d24:	20 c0       	rjmp	.+64     	; 0xd66 <free+0xaa>
 d26:	12 96       	adiw	r26, 0x02	; 2
 d28:	8d 91       	ld	r24, X+
 d2a:	9c 91       	ld	r25, X
 d2c:	13 97       	sbiw	r26, 0x03	; 3
 d2e:	ad 01       	movw	r20, r26
 d30:	00 97       	sbiw	r24, 0x00	; 0
 d32:	11 f0       	breq	.+4      	; 0xd38 <free+0x7c>
 d34:	dc 01       	movw	r26, r24
 d36:	d3 cf       	rjmp	.-90     	; 0xcde <free+0x22>
 d38:	fa 01       	movw	r30, r20
 d3a:	d3 83       	std	Z+3, r29	; 0x03
 d3c:	c2 83       	std	Z+2, r28	; 0x02
 d3e:	21 91       	ld	r18, Z+
 d40:	31 91       	ld	r19, Z+
 d42:	e2 0f       	add	r30, r18
 d44:	f3 1f       	adc	r31, r19
 d46:	ce 17       	cp	r28, r30
 d48:	df 07       	cpc	r29, r31
 d4a:	69 f4       	brne	.+26     	; 0xd66 <free+0xaa>
 d4c:	88 81       	ld	r24, Y
 d4e:	99 81       	ldd	r25, Y+1	; 0x01
 d50:	28 0f       	add	r18, r24
 d52:	39 1f       	adc	r19, r25
 d54:	2e 5f       	subi	r18, 0xFE	; 254
 d56:	3f 4f       	sbci	r19, 0xFF	; 255
 d58:	fa 01       	movw	r30, r20
 d5a:	31 83       	std	Z+1, r19	; 0x01
 d5c:	20 83       	st	Z, r18
 d5e:	8a 81       	ldd	r24, Y+2	; 0x02
 d60:	9b 81       	ldd	r25, Y+3	; 0x03
 d62:	93 83       	std	Z+3, r25	; 0x03
 d64:	82 83       	std	Z+2, r24	; 0x02
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	08 95       	ret

00000d6c <__ftoa_engine>:
 d6c:	28 30       	cpi	r18, 0x08	; 8
 d6e:	08 f0       	brcs	.+2      	; 0xd72 <__ftoa_engine+0x6>
 d70:	27 e0       	ldi	r18, 0x07	; 7
 d72:	33 27       	eor	r19, r19
 d74:	da 01       	movw	r26, r20
 d76:	99 0f       	add	r25, r25
 d78:	31 1d       	adc	r19, r1
 d7a:	87 fd       	sbrc	r24, 7
 d7c:	91 60       	ori	r25, 0x01	; 1
 d7e:	00 96       	adiw	r24, 0x00	; 0
 d80:	61 05       	cpc	r22, r1
 d82:	71 05       	cpc	r23, r1
 d84:	39 f4       	brne	.+14     	; 0xd94 <__ftoa_engine+0x28>
 d86:	32 60       	ori	r19, 0x02	; 2
 d88:	2e 5f       	subi	r18, 0xFE	; 254
 d8a:	3d 93       	st	X+, r19
 d8c:	30 e3       	ldi	r19, 0x30	; 48
 d8e:	2a 95       	dec	r18
 d90:	e1 f7       	brne	.-8      	; 0xd8a <__ftoa_engine+0x1e>
 d92:	08 95       	ret
 d94:	9f 3f       	cpi	r25, 0xFF	; 255
 d96:	30 f0       	brcs	.+12     	; 0xda4 <__ftoa_engine+0x38>
 d98:	80 38       	cpi	r24, 0x80	; 128
 d9a:	71 05       	cpc	r23, r1
 d9c:	61 05       	cpc	r22, r1
 d9e:	09 f0       	breq	.+2      	; 0xda2 <__ftoa_engine+0x36>
 da0:	3c 5f       	subi	r19, 0xFC	; 252
 da2:	3c 5f       	subi	r19, 0xFC	; 252
 da4:	3d 93       	st	X+, r19
 da6:	91 30       	cpi	r25, 0x01	; 1
 da8:	08 f0       	brcs	.+2      	; 0xdac <__ftoa_engine+0x40>
 daa:	80 68       	ori	r24, 0x80	; 128
 dac:	91 1d       	adc	r25, r1
 dae:	df 93       	push	r29
 db0:	cf 93       	push	r28
 db2:	1f 93       	push	r17
 db4:	0f 93       	push	r16
 db6:	ff 92       	push	r15
 db8:	ef 92       	push	r14
 dba:	19 2f       	mov	r17, r25
 dbc:	98 7f       	andi	r25, 0xF8	; 248
 dbe:	96 95       	lsr	r25
 dc0:	e9 2f       	mov	r30, r25
 dc2:	96 95       	lsr	r25
 dc4:	96 95       	lsr	r25
 dc6:	e9 0f       	add	r30, r25
 dc8:	ff 27       	eor	r31, r31
 dca:	e6 53       	subi	r30, 0x36	; 54
 dcc:	ff 4f       	sbci	r31, 0xFF	; 255
 dce:	99 27       	eor	r25, r25
 dd0:	33 27       	eor	r19, r19
 dd2:	ee 24       	eor	r14, r14
 dd4:	ff 24       	eor	r15, r15
 dd6:	a7 01       	movw	r20, r14
 dd8:	e7 01       	movw	r28, r14
 dda:	05 90       	lpm	r0, Z+
 ddc:	08 94       	sec
 dde:	07 94       	ror	r0
 de0:	28 f4       	brcc	.+10     	; 0xdec <__ftoa_engine+0x80>
 de2:	36 0f       	add	r19, r22
 de4:	e7 1e       	adc	r14, r23
 de6:	f8 1e       	adc	r15, r24
 de8:	49 1f       	adc	r20, r25
 dea:	51 1d       	adc	r21, r1
 dec:	66 0f       	add	r22, r22
 dee:	77 1f       	adc	r23, r23
 df0:	88 1f       	adc	r24, r24
 df2:	99 1f       	adc	r25, r25
 df4:	06 94       	lsr	r0
 df6:	a1 f7       	brne	.-24     	; 0xde0 <__ftoa_engine+0x74>
 df8:	05 90       	lpm	r0, Z+
 dfa:	07 94       	ror	r0
 dfc:	28 f4       	brcc	.+10     	; 0xe08 <__ftoa_engine+0x9c>
 dfe:	e7 0e       	add	r14, r23
 e00:	f8 1e       	adc	r15, r24
 e02:	49 1f       	adc	r20, r25
 e04:	56 1f       	adc	r21, r22
 e06:	c1 1d       	adc	r28, r1
 e08:	77 0f       	add	r23, r23
 e0a:	88 1f       	adc	r24, r24
 e0c:	99 1f       	adc	r25, r25
 e0e:	66 1f       	adc	r22, r22
 e10:	06 94       	lsr	r0
 e12:	a1 f7       	brne	.-24     	; 0xdfc <__ftoa_engine+0x90>
 e14:	05 90       	lpm	r0, Z+
 e16:	07 94       	ror	r0
 e18:	28 f4       	brcc	.+10     	; 0xe24 <__ftoa_engine+0xb8>
 e1a:	f8 0e       	add	r15, r24
 e1c:	49 1f       	adc	r20, r25
 e1e:	56 1f       	adc	r21, r22
 e20:	c7 1f       	adc	r28, r23
 e22:	d1 1d       	adc	r29, r1
 e24:	88 0f       	add	r24, r24
 e26:	99 1f       	adc	r25, r25
 e28:	66 1f       	adc	r22, r22
 e2a:	77 1f       	adc	r23, r23
 e2c:	06 94       	lsr	r0
 e2e:	a1 f7       	brne	.-24     	; 0xe18 <__ftoa_engine+0xac>
 e30:	05 90       	lpm	r0, Z+
 e32:	07 94       	ror	r0
 e34:	20 f4       	brcc	.+8      	; 0xe3e <__ftoa_engine+0xd2>
 e36:	49 0f       	add	r20, r25
 e38:	56 1f       	adc	r21, r22
 e3a:	c7 1f       	adc	r28, r23
 e3c:	d8 1f       	adc	r29, r24
 e3e:	99 0f       	add	r25, r25
 e40:	66 1f       	adc	r22, r22
 e42:	77 1f       	adc	r23, r23
 e44:	88 1f       	adc	r24, r24
 e46:	06 94       	lsr	r0
 e48:	a9 f7       	brne	.-22     	; 0xe34 <__ftoa_engine+0xc8>
 e4a:	84 91       	lpm	r24, Z+
 e4c:	10 95       	com	r17
 e4e:	17 70       	andi	r17, 0x07	; 7
 e50:	41 f0       	breq	.+16     	; 0xe62 <__ftoa_engine+0xf6>
 e52:	d6 95       	lsr	r29
 e54:	c7 95       	ror	r28
 e56:	57 95       	ror	r21
 e58:	47 95       	ror	r20
 e5a:	f7 94       	ror	r15
 e5c:	e7 94       	ror	r14
 e5e:	1a 95       	dec	r17
 e60:	c1 f7       	brne	.-16     	; 0xe52 <__ftoa_engine+0xe6>
 e62:	e0 e7       	ldi	r30, 0x70	; 112
 e64:	f0 e0       	ldi	r31, 0x00	; 0
 e66:	68 94       	set
 e68:	15 90       	lpm	r1, Z+
 e6a:	15 91       	lpm	r17, Z+
 e6c:	35 91       	lpm	r19, Z+
 e6e:	65 91       	lpm	r22, Z+
 e70:	95 91       	lpm	r25, Z+
 e72:	05 90       	lpm	r0, Z+
 e74:	7f e2       	ldi	r23, 0x2F	; 47
 e76:	73 95       	inc	r23
 e78:	e1 18       	sub	r14, r1
 e7a:	f1 0a       	sbc	r15, r17
 e7c:	43 0b       	sbc	r20, r19
 e7e:	56 0b       	sbc	r21, r22
 e80:	c9 0b       	sbc	r28, r25
 e82:	d0 09       	sbc	r29, r0
 e84:	c0 f7       	brcc	.-16     	; 0xe76 <__ftoa_engine+0x10a>
 e86:	e1 0c       	add	r14, r1
 e88:	f1 1e       	adc	r15, r17
 e8a:	43 1f       	adc	r20, r19
 e8c:	56 1f       	adc	r21, r22
 e8e:	c9 1f       	adc	r28, r25
 e90:	d0 1d       	adc	r29, r0
 e92:	7e f4       	brtc	.+30     	; 0xeb2 <__ftoa_engine+0x146>
 e94:	70 33       	cpi	r23, 0x30	; 48
 e96:	11 f4       	brne	.+4      	; 0xe9c <__ftoa_engine+0x130>
 e98:	8a 95       	dec	r24
 e9a:	e6 cf       	rjmp	.-52     	; 0xe68 <__ftoa_engine+0xfc>
 e9c:	e8 94       	clt
 e9e:	01 50       	subi	r16, 0x01	; 1
 ea0:	30 f0       	brcs	.+12     	; 0xeae <__ftoa_engine+0x142>
 ea2:	08 0f       	add	r16, r24
 ea4:	0a f4       	brpl	.+2      	; 0xea8 <__ftoa_engine+0x13c>
 ea6:	00 27       	eor	r16, r16
 ea8:	02 17       	cp	r16, r18
 eaa:	08 f4       	brcc	.+2      	; 0xeae <__ftoa_engine+0x142>
 eac:	20 2f       	mov	r18, r16
 eae:	23 95       	inc	r18
 eb0:	02 2f       	mov	r16, r18
 eb2:	7a 33       	cpi	r23, 0x3A	; 58
 eb4:	28 f0       	brcs	.+10     	; 0xec0 <__ftoa_engine+0x154>
 eb6:	79 e3       	ldi	r23, 0x39	; 57
 eb8:	7d 93       	st	X+, r23
 eba:	2a 95       	dec	r18
 ebc:	e9 f7       	brne	.-6      	; 0xeb8 <__ftoa_engine+0x14c>
 ebe:	10 c0       	rjmp	.+32     	; 0xee0 <__ftoa_engine+0x174>
 ec0:	7d 93       	st	X+, r23
 ec2:	2a 95       	dec	r18
 ec4:	89 f6       	brne	.-94     	; 0xe68 <__ftoa_engine+0xfc>
 ec6:	06 94       	lsr	r0
 ec8:	97 95       	ror	r25
 eca:	67 95       	ror	r22
 ecc:	37 95       	ror	r19
 ece:	17 95       	ror	r17
 ed0:	17 94       	ror	r1
 ed2:	e1 18       	sub	r14, r1
 ed4:	f1 0a       	sbc	r15, r17
 ed6:	43 0b       	sbc	r20, r19
 ed8:	56 0b       	sbc	r21, r22
 eda:	c9 0b       	sbc	r28, r25
 edc:	d0 09       	sbc	r29, r0
 ede:	98 f0       	brcs	.+38     	; 0xf06 <__ftoa_engine+0x19a>
 ee0:	23 95       	inc	r18
 ee2:	7e 91       	ld	r23, -X
 ee4:	73 95       	inc	r23
 ee6:	7a 33       	cpi	r23, 0x3A	; 58
 ee8:	08 f0       	brcs	.+2      	; 0xeec <__ftoa_engine+0x180>
 eea:	70 e3       	ldi	r23, 0x30	; 48
 eec:	7c 93       	st	X, r23
 eee:	20 13       	cpse	r18, r16
 ef0:	b8 f7       	brcc	.-18     	; 0xee0 <__ftoa_engine+0x174>
 ef2:	7e 91       	ld	r23, -X
 ef4:	70 61       	ori	r23, 0x10	; 16
 ef6:	7d 93       	st	X+, r23
 ef8:	30 f0       	brcs	.+12     	; 0xf06 <__ftoa_engine+0x19a>
 efa:	83 95       	inc	r24
 efc:	71 e3       	ldi	r23, 0x31	; 49
 efe:	7d 93       	st	X+, r23
 f00:	70 e3       	ldi	r23, 0x30	; 48
 f02:	2a 95       	dec	r18
 f04:	e1 f7       	brne	.-8      	; 0xefe <__ftoa_engine+0x192>
 f06:	11 24       	eor	r1, r1
 f08:	ef 90       	pop	r14
 f0a:	ff 90       	pop	r15
 f0c:	0f 91       	pop	r16
 f0e:	1f 91       	pop	r17
 f10:	cf 91       	pop	r28
 f12:	df 91       	pop	r29
 f14:	99 27       	eor	r25, r25
 f16:	87 fd       	sbrc	r24, 7
 f18:	90 95       	com	r25
 f1a:	08 95       	ret

00000f1c <memset>:
 f1c:	dc 01       	movw	r26, r24
 f1e:	01 c0       	rjmp	.+2      	; 0xf22 <memset+0x6>
 f20:	6d 93       	st	X+, r22
 f22:	41 50       	subi	r20, 0x01	; 1
 f24:	50 40       	sbci	r21, 0x00	; 0
 f26:	e0 f7       	brcc	.-8      	; 0xf20 <memset+0x4>
 f28:	08 95       	ret

00000f2a <__prologue_saves__>:
 f2a:	2f 92       	push	r2
 f2c:	3f 92       	push	r3
 f2e:	4f 92       	push	r4
 f30:	5f 92       	push	r5
 f32:	6f 92       	push	r6
 f34:	7f 92       	push	r7
 f36:	8f 92       	push	r8
 f38:	9f 92       	push	r9
 f3a:	af 92       	push	r10
 f3c:	bf 92       	push	r11
 f3e:	cf 92       	push	r12
 f40:	df 92       	push	r13
 f42:	ef 92       	push	r14
 f44:	ff 92       	push	r15
 f46:	0f 93       	push	r16
 f48:	1f 93       	push	r17
 f4a:	cf 93       	push	r28
 f4c:	df 93       	push	r29
 f4e:	cd b7       	in	r28, 0x3d	; 61
 f50:	de b7       	in	r29, 0x3e	; 62
 f52:	ca 1b       	sub	r28, r26
 f54:	db 0b       	sbc	r29, r27
 f56:	0f b6       	in	r0, 0x3f	; 63
 f58:	f8 94       	cli
 f5a:	de bf       	out	0x3e, r29	; 62
 f5c:	0f be       	out	0x3f, r0	; 63
 f5e:	cd bf       	out	0x3d, r28	; 61
 f60:	09 94       	ijmp

00000f62 <__epilogue_restores__>:
 f62:	2a 88       	ldd	r2, Y+18	; 0x12
 f64:	39 88       	ldd	r3, Y+17	; 0x11
 f66:	48 88       	ldd	r4, Y+16	; 0x10
 f68:	5f 84       	ldd	r5, Y+15	; 0x0f
 f6a:	6e 84       	ldd	r6, Y+14	; 0x0e
 f6c:	7d 84       	ldd	r7, Y+13	; 0x0d
 f6e:	8c 84       	ldd	r8, Y+12	; 0x0c
 f70:	9b 84       	ldd	r9, Y+11	; 0x0b
 f72:	aa 84       	ldd	r10, Y+10	; 0x0a
 f74:	b9 84       	ldd	r11, Y+9	; 0x09
 f76:	c8 84       	ldd	r12, Y+8	; 0x08
 f78:	df 80       	ldd	r13, Y+7	; 0x07
 f7a:	ee 80       	ldd	r14, Y+6	; 0x06
 f7c:	fd 80       	ldd	r15, Y+5	; 0x05
 f7e:	0c 81       	ldd	r16, Y+4	; 0x04
 f80:	1b 81       	ldd	r17, Y+3	; 0x03
 f82:	aa 81       	ldd	r26, Y+2	; 0x02
 f84:	b9 81       	ldd	r27, Y+1	; 0x01
 f86:	ce 0f       	add	r28, r30
 f88:	d1 1d       	adc	r29, r1
 f8a:	0f b6       	in	r0, 0x3f	; 63
 f8c:	f8 94       	cli
 f8e:	de bf       	out	0x3e, r29	; 62
 f90:	0f be       	out	0x3f, r0	; 63
 f92:	cd bf       	out	0x3d, r28	; 61
 f94:	ed 01       	movw	r28, r26
 f96:	08 95       	ret

00000f98 <_exit>:
 f98:	f8 94       	cli

00000f9a <__stop_program>:
 f9a:	ff cf       	rjmp	.-2      	; 0xf9a <__stop_program>
