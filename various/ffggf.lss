
ffggf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000012  00800060  00800060  000002da  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000107  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000513  00000000  00000000  00000421  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000260  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000431  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a2  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000023c  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <g_DaneCom>:
  26:	bf df ef f7                                         ....

0000002a <g_WzoryCyfr>:
  2a:	c0 f9 a4 b0 99 92 82 f8 80 90 88 83 c6 a1 86 8e     ................
  3a:	af 89 bf 00                                         ....

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf ed       	ldi	r28, 0xDF	; 223
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a2 37       	cpi	r26, 0x72	; 114
  52:	b1 07       	cpc	r27, r17
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	cc d0       	rcall	.+408    	; 0x1f0 <main>
  58:	04 c1       	rjmp	.+520    	; 0x262 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <wait_1w>:

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  5c:	00 00       	nop
	}
	while(--delay1w!=0);
  5e:	81 50       	subi	r24, 0x01	; 1
  60:	e9 f7       	brne	.-6      	; 0x5c <wait_1w>
}
  62:	08 95       	ret

00000064 <slot1w_read>:
uint8_t slot1w_read(void) {
	
	//Zmienna 
	uint8_t bit1w;
	
	wire_out0 								//inicjuj slot czytania
  64:	8d 9a       	sbi	0x11, 5	; 17

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  66:	00 00       	nop
	//Zmienna 
	uint8_t bit1w;
	
	wire_out0 								//inicjuj slot czytania
	wait_1w(1);								//Odczekaj
	wire_out1 								//zwolnij liniê
  68:	8d 98       	cbi	0x11, 5	; 17
  6a:	8e e0       	ldi	r24, 0x0E	; 14

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  6c:	00 00       	nop
	}
	while(--delay1w!=0);
  6e:	81 50       	subi	r24, 0x01	; 1
  70:	e9 f7       	brne	.-6      	; 0x6c <slot1w_read+0x8>
	
	wire_out0 								//inicjuj slot czytania
	wait_1w(1);								//Odczekaj
	wire_out1 								//zwolnij liniê
	wait_1w(14);							//ok. 14us
	bit1w = ((PIND&0x20)>>wire);
  72:	80 b3       	in	r24, 0x10	; 16
  74:	2b e3       	ldi	r18, 0x3B	; 59

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  76:	00 00       	nop
	}
	while(--delay1w!=0);
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	e9 f7       	brne	.-6      	; 0x76 <slot1w_read+0x12>
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	80 72       	andi	r24, 0x20	; 32
  80:	90 70       	andi	r25, 0x00	; 0
  82:	25 e0       	ldi	r18, 0x05	; 5
  84:	95 95       	asr	r25
  86:	87 95       	ror	r24
  88:	2a 95       	dec	r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <slot1w_read+0x20>
	wire_out1 								//zwolnij liniê
	wait_1w(14);							//ok. 14us
	bit1w = ((PIND&0x20)>>wire);
	wait_1w(59);							//ok. 60us
	return bit1w;
}
  8c:	08 95       	ret

0000008e <slot1w_write>:

//Slot zapisu 1-Wire.
void slot1w_write(uint8_t znak) {
	
	if(znak) {								//slot "1"
  8e:	88 23       	and	r24, r24
  90:	59 f0       	breq	.+22     	; 0xa8 <slot1w_write+0x1a>
		wire_out0							//inicjuj slot
  92:	8d 9a       	sbi	0x11, 5	; 17
  94:	8b e0       	ldi	r24, 0x0B	; 11

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  96:	00 00       	nop
	}
	while(--delay1w!=0);
  98:	81 50       	subi	r24, 0x01	; 1
  9a:	e9 f7       	brne	.-6      	; 0x96 <slot1w_write+0x8>
void slot1w_write(uint8_t znak) {
	
	if(znak) {								//slot "1"
		wire_out0							//inicjuj slot
		wait_1w(11);						//ok. 11us
		wire_out1
  9c:	8d 98       	cbi	0x11, 5	; 17
  9e:	8c e3       	ldi	r24, 0x3C	; 60

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  a0:	00 00       	nop
	}
	while(--delay1w!=0);
  a2:	81 50       	subi	r24, 0x01	; 1
  a4:	e9 f7       	brne	.-6      	; 0xa0 <slot1w_write+0x12>
  a6:	08 95       	ret
		wire_out1
		
		wait_1w(60);
	} else {
		
		wire_out0
  a8:	8d 9a       	sbi	0x11, 5	; 17
  aa:	86 e4       	ldi	r24, 0x46	; 70

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  ac:	00 00       	nop
	}
	while(--delay1w!=0);
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	e9 f7       	brne	.-6      	; 0xac <slot1w_write+0x1e>
		wait_1w(60);
	} else {
		
		wire_out0
		wait_1w(70);						//ok. 70us
		wire_out1
  b2:	8d 98       	cbi	0x11, 5	; 17
  b4:	08 95       	ret

000000b6 <write_1w>:
	}
}

//Zapis bajtu do urz¹dzenia 1-Wire.
void write_1w(uint8_t rozkaz) {
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	10 e0       	ldi	r17, 0x00	; 0
	
	uint8_t i;								//Zmienna pomocnicza
	
	for(i=0;i<8;i++) {
		slot1w_write(rozkaz&0x01);			//Wyœlij bit 
  bc:	08 2f       	mov	r16, r24
  be:	01 70       	andi	r16, 0x01	; 1
  c0:	80 2f       	mov	r24, r16
  c2:	e5 df       	rcall	.-54     	; 0x8e <slot1w_write>
//Zapis bajtu do urz¹dzenia 1-Wire.
void write_1w(uint8_t rozkaz) {
	
	uint8_t i;								//Zmienna pomocnicza
	
	for(i=0;i<8;i++) {
  c4:	1f 5f       	subi	r17, 0xFF	; 255
  c6:	18 30       	cpi	r17, 0x08	; 8
  c8:	d9 f7       	brne	.-10     	; 0xc0 <write_1w+0xa>
		slot1w_write(rozkaz&0x01);			//Wyœlij bit 
		rozkaz>>1;
	}
}
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	08 95       	ret

000000d0 <read_1w>:

//Odczyt bajtu z urz¹dzenia 1-Wire.
void read_1w(void) {
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
	
	uint8_t i,j,dana;
	
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
  da:	82 e6       	ldi	r24, 0x62	; 98
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 6c 00 	sts	0x006C, r25
  e2:	80 93 6b 00 	sts	0x006B, r24
  e6:	ff 24       	eor	r15, r15
  e8:	19 c0       	rjmp	.+50     	; 0x11c <__stack+0x3d>
	for(i=0;i<9;i++) {						//czytaj "family code" (1bajt)
											//i "registartion number" (7 bajtów)
		dana=0;								//wstêpne zerowanie danej
		
		for(j=0x01;j!=0;j<<=1) {			//zmienna steruj¹ca pêtli wskazuje jednoczeœnie aktualnie zapisywany bit
			dana|=slot1w_read()?j:dana;		//czytaj kolejne bity
  ea:	bc df       	rcall	.-136    	; 0x64 <slot1w_read>
  ec:	88 23       	and	r24, r24
  ee:	11 f4       	brne	.+4      	; 0xf4 <__stack+0x15>
  f0:	81 2f       	mov	r24, r17
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <__stack+0x17>
  f4:	80 2f       	mov	r24, r16
  f6:	18 2b       	or	r17, r24
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
	for(i=0;i<9;i++) {						//czytaj "family code" (1bajt)
											//i "registartion number" (7 bajtów)
		dana=0;								//wstêpne zerowanie danej
		
		for(j=0x01;j!=0;j<<=1) {			//zmienna steruj¹ca pêtli wskazuje jednoczeœnie aktualnie zapisywany bit
  f8:	00 0f       	add	r16, r16
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	c8 30       	cpi	r28, 0x08	; 8
  fe:	d1 05       	cpc	r29, r1
 100:	a1 f7       	brne	.-24     	; 0xea <__stack+0xb>
			dana|=slot1w_read()?j:dana;		//czytaj kolejne bity
		}
		*pbufor1w++=dana;					//po skompletowaniu zapisz do bufotra
 102:	e0 91 6b 00 	lds	r30, 0x006B
 106:	f0 91 6c 00 	lds	r31, 0x006C
 10a:	11 93       	st	Z+, r17
 10c:	f0 93 6c 00 	sts	0x006C, r31
 110:	e0 93 6b 00 	sts	0x006B, r30
void read_1w(void) {
	
	uint8_t i,j,dana;
	
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
	for(i=0;i<9;i++) {						//czytaj "family code" (1bajt)
 114:	f3 94       	inc	r15
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	f8 16       	cp	r15, r24
 11a:	29 f0       	breq	.+10     	; 0x126 <__stack+0x47>
 11c:	01 e0       	ldi	r16, 0x01	; 1
 11e:	10 e0       	ldi	r17, 0x00	; 0
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	e2 cf       	rjmp	.-60     	; 0xea <__stack+0xb>
		for(j=0x01;j!=0;j<<=1) {			//zmienna steruj¹ca pêtli wskazuje jednoczeœnie aktualnie zapisywany bit
			dana|=slot1w_read()?j:dana;		//czytaj kolejne bity
		}
		*pbufor1w++=dana;					//po skompletowaniu zapisz do bufotra
	}
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	08 95       	ret

00000132 <count_CRC>:

//Funkcja wyliczenia CRC.
void count_CRC(uint8_t bajt, uint8_t *CRC) {
 132:	fb 01       	movw	r30, r22
 134:	90 81       	ld	r25, Z
 136:	38 2f       	mov	r19, r24
 138:	20 e0       	ldi	r18, 0x00	; 0
		bajt^=*CRC;							//wskaŸnik *CRC wyznacza aktualnie wyliczony CRC
		
		zp2=bajt&0x01;						//wydzielenie bitu do obliczeñ
		bajt=*CRC;
		if(zp2) {
			bajt^=0x18;
 13a:	58 e1       	ldi	r21, 0x18	; 24
	zp1=bajt;
	for(i=0;i<8;i++) {
		
		bajt^=*CRC;							//wskaŸnik *CRC wyznacza aktualnie wyliczony CRC
		
		zp2=bajt&0x01;						//wydzielenie bitu do obliczeñ
 13c:	89 27       	eor	r24, r25
		bajt=*CRC;
		if(zp2) {
 13e:	48 2f       	mov	r20, r24
 140:	41 70       	andi	r20, 0x01	; 1
 142:	80 fd       	sbrc	r24, 0
			bajt^=0x18;
 144:	95 27       	eor	r25, r21
			}
		bajt=((uint8_t)(bajt)>>1)+0x80*zp2;
 146:	89 2f       	mov	r24, r25
 148:	86 95       	lsr	r24
 14a:	94 2f       	mov	r25, r20
 14c:	97 95       	ror	r25
 14e:	99 27       	eor	r25, r25
 150:	97 95       	ror	r25
 152:	98 0f       	add	r25, r24
void count_CRC(uint8_t bajt, uint8_t *CRC) {
											//wielomian generuj¹cy jest równy x^8 + x^5 + x^4 + 1
	uint8_t zp1, zp2,i; 					//Zmienne pomocniecze
	
	zp1=bajt;
	for(i=0;i<8;i++) {
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	28 30       	cpi	r18, 0x08	; 8
 158:	19 f0       	breq	.+6      	; 0x160 <count_CRC+0x2e>
			bajt^=0x18;
			}
		bajt=((uint8_t)(bajt)>>1)+0x80*zp2;
		
		*CRC=bajt;
		zp1=(bajt=zp1>>1);
 15a:	36 95       	lsr	r19
 15c:	83 2f       	mov	r24, r19
 15e:	ee cf       	rjmp	.-36     	; 0x13c <count_CRC+0xa>
 160:	90 83       	st	Z, r25
	}
}
 162:	08 95       	ret

00000164 <reset_1w>:

//Sekwencja inicjuj¹ca 1-Wire.
uint8_t reset_1w(void) {
	wire_out0								//sekwencja inicjuj¹ca 1-Wire
 164:	8d 9a       	sbi	0x11, 5	; 17
 166:	8f ef       	ldi	r24, 0xFF	; 255

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 168:	00 00       	nop
	}
	while(--delay1w!=0);
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	e9 f7       	brne	.-6      	; 0x168 <reset_1w+0x4>
 16e:	83 eb       	ldi	r24, 0xB3	; 179

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 170:	00 00       	nop
	}
	while(--delay1w!=0);
 172:	81 50       	subi	r24, 0x01	; 1
 174:	e9 f7       	brne	.-6      	; 0x170 <reset_1w+0xc>
//Sekwencja inicjuj¹ca 1-Wire.
uint8_t reset_1w(void) {
	wire_out0								//sekwencja inicjuj¹ca 1-Wire
	wait_1w(0xFF);
	wait_1w(0xB3);							//impuls inicjuj¹cy "0" ok. 480us
	wire_out1								//zwolnij liniê
 176:	8d 98       	cbi	0x11, 5	; 17
 178:	81 e4       	ldi	r24, 0x41	; 65

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 17a:	00 00       	nop
	}
	while(--delay1w!=0);
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	e9 f7       	brne	.-6      	; 0x17a <reset_1w+0x16>
	wire_out0								//sekwencja inicjuj¹ca 1-Wire
	wait_1w(0xFF);
	wait_1w(0xB3);							//impuls inicjuj¹cy "0" ok. 480us
	wire_out1								//zwolnij liniê
	wait_1w(65);							//po odczekaniu ok. 65us czekaj na impuls obecnosci
	if(((PIND&0x20)>>wire)==0) {
 180:	85 9b       	sbis	0x10, 5	; 16
 182:	0b c0       	rjmp	.+22     	; 0x19a <reset_1w+0x36>
 184:	8f ef       	ldi	r24, 0xFF	; 255

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 186:	00 00       	nop
	}
	while(--delay1w!=0);
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	e9 f7       	brne	.-6      	; 0x186 <reset_1w+0x22>
 18c:	8c e4       	ldi	r24, 0x4C	; 76

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 18e:	00 00       	nop
	}
	while(--delay1w!=0);
 190:	81 50       	subi	r24, 0x01	; 1
 192:	e9 f7       	brne	.-6      	; 0x18e <reset_1w+0x2a>
	}
	
	wait_1w(0xFF);
	wait_1w(0x4C);							//czekaj ok. 416us do zakonczenia slotu inicjuj¹cego
	
	if(((PIND&0x20)>>wire)==0) {
 194:	85 9b       	sbis	0x10, 5	; 16
 196:	02 c0       	rjmp	.+4      	; 0x19c <reset_1w+0x38>
 198:	08 95       	ret
		return 0;							//jeœli pozostaje w stanie niskim, to oznacza zwarcie
	}
}
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret

0000019e <WyswietlDEC>:
	
	//Zmienna przechowuj¹ca wartoœæ licznika.
	uint16_t g_Licznik = 0;

	//Funkcja wyœwitla w kodzie dziesiêtnym podan¹ liczbê.
	void WyswietlDEC(uint16_t var) {
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	9c 01       	movw	r18, r24
		uint8_t n;
		if(var > 9999)
 1a4:	87 e2       	ldi	r24, 0x27	; 39
 1a6:	20 31       	cpi	r18, 0x10	; 16
 1a8:	38 07       	cpc	r19, r24
 1aa:	50 f0       	brcs	.+20     	; 0x1c0 <WyswietlDEC+0x22>
		{
			for(n=0; n<4; n++)
			{
				g_DaneWyswietlacza[n] = ~(1<<LED_G);
 1ac:	8f eb       	ldi	r24, 0xBF	; 191
 1ae:	80 93 6e 00 	sts	0x006E, r24
 1b2:	80 93 6f 00 	sts	0x006F, r24
 1b6:	80 93 70 00 	sts	0x0070, r24
 1ba:	80 93 71 00 	sts	0x0071, r24
 1be:	15 c0       	rjmp	.+42     	; 0x1ea <WyswietlDEC+0x4c>
	//Funkcja wyœwitla w kodzie dziesiêtnym podan¹ liczbê.
	void WyswietlDEC(uint16_t var) {
		uint8_t n;
		if(var > 9999)
		{
			for(n=0; n<4; n++)
 1c0:	c1 e7       	ldi	r28, 0x71	; 113
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
		return;
		}
	
		for(n=4; n>0; n--)
		{
			g_DaneWyswietlacza[n-1] = pgm_read_byte(&g_WzoryCyfr[var%10]);
 1c4:	c9 01       	movw	r24, r18
 1c6:	6a e0       	ldi	r22, 0x0A	; 10
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	37 d0       	rcall	.+110    	; 0x23a <__udivmodhi4>
 1cc:	fc 01       	movw	r30, r24
 1ce:	e6 5d       	subi	r30, 0xD6	; 214
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	e4 91       	lpm	r30, Z+
 1d4:	e8 83       	st	Y, r30
			var /= 10;
 1d6:	c9 01       	movw	r24, r18
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	2e d0       	rcall	.+92     	; 0x23a <__udivmodhi4>
 1de:	9b 01       	movw	r18, r22
 1e0:	21 97       	sbiw	r28, 0x01	; 1
				g_DaneWyswietlacza[n] = ~(1<<LED_G);
			}
		return;
		}
	
		for(n=4; n>0; n--)
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	cd 36       	cpi	r28, 0x6D	; 109
 1e6:	d8 07       	cpc	r29, r24
 1e8:	69 f7       	brne	.-38     	; 0x1c4 <WyswietlDEC+0x26>
		{
			g_DaneWyswietlacza[n-1] = pgm_read_byte(&g_WzoryCyfr[var%10]);
			var /= 10;
		}	
	}	
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <main>:

int main(void) {
 1f0:	1f 93       	push	r17
	
	//Konfiguracja portów.
	PORTD &= ~(1<<wire);
 1f2:	95 98       	cbi	0x12, 5	; 18
	LEDDDR = 0xff; 
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	87 bb       	out	0x17, r24	; 23
	COMDDR = 1<<COM1 | 1<<COM2 | 1<<COM3 | 1<<COM4;
 1f8:	88 e7       	ldi	r24, 0x78	; 120
 1fa:	81 bb       	out	0x11, r24	; 17
	
	//Deklaracja zmiennej.
	uint8_t AktWyswietlacz;
	for(;;) {
		//Wygaszenie wyœwietlaczy.
		COMPORT |= 1<<COM1 | 1<<COM2 | 1<<COM3 | 1<<COM4;
 1fc:	82 b3       	in	r24, 0x12	; 18
 1fe:	88 67       	ori	r24, 0x78	; 120
 200:	82 bb       	out	0x12, r24	; 18
		//Wys³anie odpowiedniej danej.
		LEDPORT = g_DaneWyswietlacza[AktWyswietlacz];
 202:	e1 2f       	mov	r30, r17
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	df 01       	movw	r26, r30
 208:	a2 59       	subi	r26, 0x92	; 146
 20a:	bf 4f       	sbci	r27, 0xFF	; 255
 20c:	8c 91       	ld	r24, X
 20e:	88 bb       	out	0x18, r24	; 24
		//W³¹czenie odpowiedniego wyœwietlacza.
		//Odwo³anie do pamiêci programu.
		COMPORT &= pgm_read_byte(&g_DaneCom[AktWyswietlacz]);
 210:	82 b3       	in	r24, 0x12	; 18
 212:	ea 5d       	subi	r30, 0xDA	; 218
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	e4 91       	lpm	r30, Z+
 218:	e8 23       	and	r30, r24
 21a:	e2 bb       	out	0x12, r30	; 18
		
		//Zwiêkszanie stanu zmiennej wskazuj¹cej wyœwietlacz
		++AktWyswietlacz;
 21c:	1f 5f       	subi	r17, 0xFF	; 255
		if (AktWyswietlacz > 3) {
 21e:	14 30       	cpi	r17, 0x04	; 4
 220:	40 f0       	brcs	.+16     	; 0x232 <main+0x42>
			//Zmienna zapobiegaj¹ca niepotrzebnemu kopiowaniu
			//zmiennej g_bDelay (typ volatile!)
			uint8_t delay;
			AktWyswietlacz = 0;
			//Obs³uga opóŸnieñ
			delay = g_bDelay;
 222:	80 91 6d 00 	lds	r24, 0x006D
			if(delay > 0)
 226:	88 23       	and	r24, r24
 228:	19 f0       	breq	.+6      	; 0x230 <main+0x40>
			{
				--delay;
 22a:	81 50       	subi	r24, 0x01	; 1
				g_bDelay = delay;
 22c:	80 93 6d 00 	sts	0x006D, r24
 230:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
	
	WyswietlDEC(1111);
 232:	87 e5       	ldi	r24, 0x57	; 87
 234:	94 e0       	ldi	r25, 0x04	; 4
 236:	b3 df       	rcall	.-154    	; 0x19e <WyswietlDEC>
 238:	e1 cf       	rjmp	.-62     	; 0x1fc <main+0xc>

0000023a <__udivmodhi4>:
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	51 e1       	ldi	r21, 0x11	; 17
 240:	07 c0       	rjmp	.+14     	; 0x250 <__udivmodhi4_ep>

00000242 <__udivmodhi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a6 17       	cp	r26, r22
 248:	b7 07       	cpc	r27, r23
 24a:	10 f0       	brcs	.+4      	; 0x250 <__udivmodhi4_ep>
 24c:	a6 1b       	sub	r26, r22
 24e:	b7 0b       	sbc	r27, r23

00000250 <__udivmodhi4_ep>:
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	5a 95       	dec	r21
 256:	a9 f7       	brne	.-22     	; 0x242 <__udivmodhi4_loop>
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
