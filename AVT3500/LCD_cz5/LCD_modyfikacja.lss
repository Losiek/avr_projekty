
LCD_modyfikacja.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000360  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000005d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000085  00000000  00000000  000005f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000305  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000134  00000000  00000000  0000097b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010b  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  00000f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	ec ea       	ldi	r30, 0xAC	; 172
  26:	f1 e0       	ldi	r31, 0x01	; 1
  28:	03 c0       	rjmp	.+6      	; 0x30 <.do_copy_data_start>

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a0 36       	cpi	r26, 0x60	; 96
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <.do_copy_data_loop>

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a0 36       	cpi	r26, 0x60	; 96
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	6a d0       	rcall	.+212    	; 0x11c <main>
  48:	b0 c0       	rjmp	.+352    	; 0x1aa <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <delay100us8>:
	: :[ticks]"r"(t) );}
	// DEC - 1 cykl, BRNE 2 cykle, + 1xnop. Zegar 4MHz

void delay100us8(uint8_t t)
{
  4c:	24 e6       	ldi	r18, 0x64	; 100
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	04 c0       	rjmp	.+8      	; 0x5a <delayus8_loop12+0x8>

00000052 <delayus8_loop12>:
	while(t>0)
	{
		delayus8(100); 
  52:	00 00       	nop
  54:	2a 95       	dec	r18
  56:	e9 f7       	brne	.-6      	; 0x52 <delayus8_loop12>
		--t; 
  58:	81 50       	subi	r24, 0x01	; 1
  5a:	88 23       	and	r24, r24
  5c:	d1 f7       	brne	.-12     	; 0x52 <delayus8_loop12>
  5e:	08 95       	ret

00000060 <LCDsendHalf>:
	}
}
//Koniec opóŸnieñ
//_________________________________________

#define LCD_EPULSE() \
	{PORT(LCD_EPORT) |= 1<<LCD_E; \
	delay250ns(); \
	PORT(LCD_EPORT) &= ~(1<<LCD_E);}

void LCDsendHalf(uint8_t data)
{
  60:	98 b3       	in	r25, 0x18	; 24
  62:	9f 70       	andi	r25, 0x0F	; 15
  64:	82 95       	swap	r24
  66:	80 7f       	andi	r24, 0xF0	; 240
  68:	98 2b       	or	r25, r24
  6a:	98 bb       	out	0x18, r25	; 24
	data = (data & 0x0F) << LCD_D4; 
	//data |= 0xF0;
	//data &= 0x0F;
	//data <<= LCD_D4; 
	PORT(LCD_DPORT) = 
		(PORT(LCD_DPORT) & ~(0x0F<<LCD_D4)) | data;
	//PORT(LCD_DPORT) &= ~(0x0F<<LCD_D4); 
	//PORT(LCD_DPORT) |= data; 
	LCD_EPULSE();
  6c:	c1 9a       	sbi	0x18, 1	; 24
  6e:	00 00       	nop
  70:	c1 98       	cbi	0x18, 1	; 24
  72:	08 95       	ret

00000074 <LCDsend>:
}

void LCDsend(uint8_t data)
{
  74:	1f 93       	push	r17
  76:	18 2f       	mov	r17, r24
	// Starsza czêœæ
	LCDsendHalf(data>>4);
  78:	82 95       	swap	r24
  7a:	8f 70       	andi	r24, 0x0F	; 15
  7c:	f1 df       	rcall	.-30     	; 0x60 <LCDsendHalf>
	// M³odsza czêœæ
	LCDsendHalf(data);
  7e:	81 2f       	mov	r24, r17
  80:	ef df       	rcall	.-34     	; 0x60 <LCDsendHalf>
	delayus8(120);
  82:	88 e7       	ldi	r24, 0x78	; 120
  84:	90 e0       	ldi	r25, 0x00	; 0

00000086 <delayus8_loop52>:
  86:	00 00       	nop
  88:	8a 95       	dec	r24
  8a:	e9 f7       	brne	.-6      	; 0x86 <delayus8_loop52>
  8c:	1f 91       	pop	r17
  8e:	08 95       	ret

00000090 <LCDcommand>:
}

// Funkcje interfejsu
void LCDcommand(uint8_t command)
{
  90:	c2 98       	cbi	0x18, 2	; 24
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
	LCDsend(command);
  92:	f0 df       	rcall	.-32     	; 0x74 <LCDsend>
  94:	08 95       	ret

00000096 <LCDdata>:
}

void LCDdata(uint8_t data)
{
  96:	c2 9a       	sbi	0x18, 2	; 24
	PORT(LCD_RSPORT) |= 1<<LCD_RS;
	LCDsend(data);
  98:	ed df       	rcall	.-38     	; 0x74 <LCDsend>
  9a:	08 95       	ret

0000009c <LCDcls>:
}

void LCDcls(void)
{
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	f8 df       	rcall	.-16     	; 0x90 <LCDcommand>
  a0:	20 e3       	ldi	r18, 0x30	; 48
  a2:	84 e6       	ldi	r24, 0x64	; 100
  a4:	90 e0       	ldi	r25, 0x00	; 0

000000a6 <delayus8_loop89>:
  a6:	00 00       	nop
  a8:	8a 95       	dec	r24
  aa:	e9 f7       	brne	.-6      	; 0xa6 <delayus8_loop89>
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	d9 f7       	brne	.-10     	; 0xa6 <delayus8_loop89>
  b0:	08 95       	ret

000000b2 <LCDinit>:
	LCDcommand(LCDC_CLS);
	delay100us8(48);
}

void LCDhome(void)
{
	LCDcommand(LCDC_HOME);
	delay100us8(48);
}

void LCDinit(void)
{
  b2:	26 e9       	ldi	r18, 0x96	; 150
  b4:	84 e6       	ldi	r24, 0x64	; 100
  b6:	90 e0       	ldi	r25, 0x00	; 0

000000b8 <delayus8_loop111>:
  b8:	00 00       	nop
  ba:	8a 95       	dec	r24
  bc:	e9 f7       	brne	.-6      	; 0xb8 <delayus8_loop111>
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	d9 f7       	brne	.-10     	; 0xb8 <delayus8_loop111>
	delay100us8(150);
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
  c2:	c2 98       	cbi	0x18, 2	; 24
	LCDsendHalf(LCDC_FUNC|LCDC_FUNC8b); 
  c4:	80 e3       	ldi	r24, 0x30	; 48
  c6:	cc df       	rcall	.-104    	; 0x60 <LCDsendHalf>
  c8:	29 e2       	ldi	r18, 0x29	; 41
  ca:	84 e6       	ldi	r24, 0x64	; 100
  cc:	90 e0       	ldi	r25, 0x00	; 0

000000ce <delayus8_loop136>:
  ce:	00 00       	nop
  d0:	8a 95       	dec	r24
  d2:	e9 f7       	brne	.-6      	; 0xce <delayus8_loop136>
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	d9 f7       	brne	.-10     	; 0xce <delayus8_loop136>
	delay100us8(41);
	LCDsendHalf(LCDC_FUNC|LCDC_FUNC8b);
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	c2 df       	rcall	.-124    	; 0x60 <LCDsendHalf>
  dc:	84 e6       	ldi	r24, 0x64	; 100
  de:	90 e0       	ldi	r25, 0x00	; 0

000000e0 <delayus8_loop154>:
  e0:	00 00       	nop
  e2:	8a 95       	dec	r24
  e4:	e9 f7       	brne	.-6      	; 0xe0 <delayus8_loop154>
  e6:	84 e6       	ldi	r24, 0x64	; 100
  e8:	90 e0       	ldi	r25, 0x00	; 0

000000ea <delayus8_loop156>:
  ea:	00 00       	nop
  ec:	8a 95       	dec	r24
  ee:	e9 f7       	brne	.-6      	; 0xea <delayus8_loop156>
	delay100us8(2);
	LCDsendHalf(LCDC_FUNC|LCDC_FUNC4b);
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	b6 df       	rcall	.-148    	; 0x60 <LCDsendHalf>
  f4:	84 e6       	ldi	r24, 0x64	; 100
  f6:	90 e0       	ldi	r25, 0x00	; 0

000000f8 <delayus8_loop166>:
  f8:	00 00       	nop
  fa:	8a 95       	dec	r24
  fc:	e9 f7       	brne	.-6      	; 0xf8 <delayus8_loop166>
  fe:	84 e6       	ldi	r24, 0x64	; 100
 100:	90 e0       	ldi	r25, 0x00	; 0

00000102 <delayus8_loop168>:
 102:	00 00       	nop
 104:	8a 95       	dec	r24
 106:	e9 f7       	brne	.-6      	; 0x102 <delayus8_loop168>
	delay100us8(2);
	// Teraz jest ju¿ 4b. Koniec korzystania z sendHalf
	LCDcommand(LCDC_FUNC|LCDC_FUNC4b|LCDC_FUNC2L|LCDC_FUNC5x7);
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	c2 df       	rcall	.-124    	; 0x90 <LCDcommand>
	LCDcommand(LCDC_ON);
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	c0 df       	rcall	.-128    	; 0x90 <LCDcommand>
	LCDcls();
 110:	c5 df       	rcall	.-118    	; 0x9c <LCDcls>
	LCDcommand(LCDC_MODE|LCDC_MODER);
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	bd df       	rcall	.-134    	; 0x90 <LCDcommand>
	LCDcommand(LCDC_ON|LCDC_ONDISPLAY|LCDC_ONCURSOR);
 116:	8e e0       	ldi	r24, 0x0E	; 14
 118:	bb df       	rcall	.-138    	; 0x90 <LCDcommand>
 11a:	08 95       	ret

0000011c <main>:
}

// Koniec obs³ugi wyœwietlacza
//--------------------------------------------------

// START
int main(void)
{
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	//----------------------------------------------
	// Inicjacja - uwaga: uproszczona, mo¿e wymagaæ 
	// zmian przy zmianie przyporz¹dkowania portów
	DDR(LCD_DPORT) = 1<<LCD_E | 1<<LCD_RS | 
 128:	86 ef       	ldi	r24, 0xF6	; 246
 12a:	87 bb       	out	0x17, r24	; 23
		0x0F<<LCD_D4;
	
	LCDinit();
 12c:	c2 df       	rcall	.-124    	; 0xb2 <LCDinit>
	// Koniec inicjacji
	//---------------------------------------------- 
	LCDcls(); 
 12e:	b6 df       	rcall	.-148    	; 0x9c <LCDcls>
	
	LCDdata('O');
 130:	8f e4       	ldi	r24, 0x4F	; 79
 132:	b1 df       	rcall	.-158    	; 0x96 <LCDdata>
	LCDdata('L');
 134:	8c e4       	ldi	r24, 0x4C	; 76
 136:	af df       	rcall	.-162    	; 0x96 <LCDdata>
	LCDdata('E');
 138:	85 e4       	ldi	r24, 0x45	; 69
 13a:	ad df       	rcall	.-166    	; 0x96 <LCDdata>
	LCDdata('K');
 13c:	8b e4       	ldi	r24, 0x4B	; 75
 13e:	ab df       	rcall	.-170    	; 0x96 <LCDdata>
 140:	ee 24       	eor	r14, r14
 142:	ff 24       	eor	r15, r15
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 144:	0f ef       	ldi	r16, 0xFF	; 255
 146:	1f ef       	ldi	r17, 0xFF	; 255
 148:	91 2f       	mov	r25, r17
 14a:	80 2f       	mov	r24, r16
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x30>
	
	for(;;)
	{
		for(int i = 0; i < 12; i++) 
		{
			_delay_loop_2(0xffff);
			LCDcommand(LCDC_SHIFT|LCDC_SHIFTDISP|LCDC_SHIFTR);
 150:	8c e1       	ldi	r24, 0x1C	; 28
 152:	9e df       	rcall	.-196    	; 0x90 <LCDcommand>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 154:	91 2f       	mov	r25, r17
 156:	80 2f       	mov	r24, r16
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x3c>
 15c:	08 94       	sec
 15e:	e1 1c       	adc	r14, r1
 160:	f1 1c       	adc	r15, r1
 162:	9c e0       	ldi	r25, 0x0C	; 12
 164:	e9 16       	cp	r14, r25
 166:	f1 04       	cpc	r15, r1
 168:	6c f3       	brlt	.-38     	; 0x144 <main+0x28>
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16e:	0f ef       	ldi	r16, 0xFF	; 255
 170:	1f ef       	ldi	r17, 0xFF	; 255
 172:	91 2f       	mov	r25, r17
 174:	80 2f       	mov	r24, r16
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x5a>
			_delay_loop_2(0xffff);
		}
		
		for(int i = 0; i < 12; i++) 
		{
			_delay_loop_2(0xffff);
			LCDcommand(LCDC_SHIFT|LCDC_SHIFTDISP|LCDC_SHIFTL);
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	89 df       	rcall	.-238    	; 0x90 <LCDcommand>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17e:	91 2f       	mov	r25, r17
 180:	80 2f       	mov	r24, r16
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x66>
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	ee 24       	eor	r14, r14
 18a:	ff 24       	eor	r15, r15
 18c:	cc 30       	cpi	r28, 0x0C	; 12
 18e:	d1 05       	cpc	r29, r1
 190:	71 f7       	brne	.-36     	; 0x16e <main+0x52>
 192:	d8 cf       	rjmp	.-80     	; 0x144 <main+0x28>

00000194 <LCDhome>:
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	7c df       	rcall	.-264    	; 0x90 <LCDcommand>
 198:	20 e3       	ldi	r18, 0x30	; 48
 19a:	84 e6       	ldi	r24, 0x64	; 100
 19c:	90 e0       	ldi	r25, 0x00	; 0

0000019e <delayus8_loop295>:
 19e:	00 00       	nop
 1a0:	8a 95       	dec	r24
 1a2:	e9 f7       	brne	.-6      	; 0x19e <delayus8_loop295>
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	d9 f7       	brne	.-10     	; 0x19e <delayus8_loop295>
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <_exit>
