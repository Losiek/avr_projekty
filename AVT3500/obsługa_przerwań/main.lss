
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000108  2**0
                  ALLOC
  2 .stab         00000360  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000004d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000039  00000000  00000000  000004f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000a7  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000074  00000000  00000000  000005d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f5  00000000  00000000  0000064d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000be  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	e4 e9       	ldi	r30, 0x94	; 148
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	03 c0       	rjmp	.+6      	; 0x30 <.do_copy_data_start>

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a0 36       	cpi	r26, 0x60	; 96
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <.do_copy_data_loop>

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a1 36       	cpi	r26, 0x61	; 97
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	02 d0       	rcall	.+4      	; 0x4c <main>
  48:	24 c0       	rjmp	.+72     	; 0x92 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <main>:
uint8_t count = 0;

// Start
int main(void) 
{
  4c:	9f ef       	ldi	r25, 0xFF	; 255
  4e:	97 bb       	out	0x17, r25	; 23
	////////////////////////////////////////////////////
	// Inicjacja
	LEDDDR = 0xff;
	COMDDR = 1<<COM1 | 1<<COM2 | 1<<COM3 | 1<<COM4;
  50:	88 e7       	ldi	r24, 0x78	; 120
  52:	81 bb       	out	0x11, r24	; 17
	// Wygaszenie wyœwietlaczy
	LEDPORT = 0xff;
  54:	98 bb       	out	0x18, r25	; 24
	COMPORT = 0xff;
  56:	92 bb       	out	0x12, r25	; 18
	// Timer0
	TCCR0 = 1<<CS02 | 0<<CS01 | 1<<CS00;
  58:	85 e0       	ldi	r24, 0x05	; 5
  5a:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1<<TOIE0;
  5c:	82 e0       	ldi	r24, 0x02	; 2
  5e:	89 bf       	out	0x39, r24	; 57
	// Globalne zezwolenie przerwañ
	sei();
  60:	78 94       	sei
  62:	9f eb       	ldi	r25, 0xBF	; 191
  64:	8e ef       	ldi	r24, 0xFE	; 254
	// koniec inicjacji
	///////////////////////////////////////////////////
	
	for(;;)
	{
		if (count = 255) {
			count = 0;
			//W³¹czenie wyœwietlaczy
			COMPORT = ~(1<<COM1);
  66:	92 bb       	out	0x12, r25	; 18
			//Zapalenie segmentu
			LEDPORT = ~(1<<LED_A);
  68:	88 bb       	out	0x18, r24	; 24
  6a:	fd cf       	rjmp	.-6      	; 0x66 <main+0x1a>

0000006c <TIMER0_OVF_vect>:
			
			}
		}
		
	return 0;
}

//_____________________________________________________
// Obs³uga przerwañ
SIGNAL(TIMER0_OVF_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	//Wpisanie do licznika pocz¹tkowej wartoœci
	//TCNT0 = 128;
	++count;
  78:	80 91 60 00 	lds	r24, 0x0060
  7c:	8f 5f       	subi	r24, 0xFF	; 255
  7e:	80 93 60 00 	sts	0x0060, r24
	PORTB = ~(1<<LED_C);
  82:	8b ef       	ldi	r24, 0xFB	; 251
  84:	88 bb       	out	0x18, r24	; 24
  86:	8f 91       	pop	r24
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <_exit>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <_exit>
