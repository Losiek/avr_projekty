
PCF8591.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000360  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000765  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011c  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a6  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b5  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f3  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d2  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000149  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	11 c0       	rjmp	.+34     	; 0x24 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>

00000016 <__c.1574>:
  16:	20 20 00                                              .

00000019 <__c.1572>:
  19:	44 61 6e 65 20 7a 20 49 30 3a 00                    Dane z I0:.

00000024 <__ctors_end>:
  24:	11 24       	eor	r1, r1
  26:	1f be       	out	0x3f, r1	; 63
  28:	cf ed       	ldi	r28, 0xDF	; 223
  2a:	cd bf       	out	0x3d, r28	; 61

0000002c <__do_copy_data>:
  2c:	10 e0       	ldi	r17, 0x00	; 0
  2e:	a0 e6       	ldi	r26, 0x60	; 96
  30:	b0 e0       	ldi	r27, 0x00	; 0
  32:	e0 e4       	ldi	r30, 0x40	; 64
  34:	f3 e0       	ldi	r31, 0x03	; 3
  36:	03 c0       	rjmp	.+6      	; 0x3e <.do_copy_data_start>

00000038 <.do_copy_data_loop>:
  38:	c8 95       	lpm
  3a:	31 96       	adiw	r30, 0x01	; 1
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d1 f7       	brne	.-12     	; 0x38 <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 36       	cpi	r26, 0x60	; 96
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	02 d0       	rcall	.+4      	; 0x5a <main>
  56:	73 c1       	rjmp	.+742    	; 0x33e <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <main>:
#include "i2c.h"
#include "lcd.h"

int main(void)
{
  5a:	80 e6       	ldi	r24, 0x60	; 96
  5c:	82 bb       	out	0x12, r24	; 18
	//Inicjacja
	PORTD = 1<<I2C_SDA | 1<<I2C_SCL;
	DDRD = 1<<I2C_SCL;
  5e:	80 e2       	ldi	r24, 0x20	; 32
  60:	81 bb       	out	0x11, r24	; 17
	DDRB = 1<<LCD_E | 1<<LCD_RS | 0x0f<<LCD_D4;
  62:	86 ef       	ldi	r24, 0xF6	; 246
  64:	87 bb       	out	0x17, r24	; 23
	lcd_init();
  66:	fd d0       	rcall	.+506    	; 0x262 <lcd_init>
	//Koniec inicjacji
	
	//Tekst informacyjny w górnej linii
	lcd_str_P((prog_char*)PSTR("Dane z I0:"));
  68:	89 e1       	ldi	r24, 0x19	; 25
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	b9 d0       	rcall	.+370    	; 0x1e0 <lcd_str_P>
	lcd_command(LCDC_DDA | 64);
  6e:	80 ec       	ldi	r24, 0xC0	; 192
  70:	b1 d0       	rcall	.+354    	; 0x1d4 <lcd_command>
	
	//Konfiguracja przetwornika
	i2c_start();
  72:	12 d0       	rcall	.+36     	; 0x98 <i2c_start>
	//Bajt adresowy, zapis
	i2c_send(0x90);
  74:	80 e9       	ldi	r24, 0x90	; 144
  76:	29 d0       	rcall	.+82     	; 0xca <i2c_send>
	//bajt kontrolny
	i2c_send(0x00);
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	27 d0       	rcall	.+78     	; 0xca <i2c_send>
	i2c_stop();
  7c:	50 d0       	rcall	.+160    	; 0x11e <i2c_stop>
	
	//Pobieranie danych
	for(;;)
	{
		lcd_command(LCDC_DDA | 64);
  7e:	80 ec       	ldi	r24, 0xC0	; 192
  80:	a9 d0       	rcall	.+338    	; 0x1d4 <lcd_command>
		//Odczyt danych
		i2c_start();
  82:	0a d0       	rcall	.+20     	; 0x98 <i2c_start>
		//Bajt adresowy, odczyt
		i2c_send(0x91);
  84:	81 e9       	ldi	r24, 0x91	; 145
  86:	21 d0       	rcall	.+66     	; 0xca <i2c_send>
		//Pobieranie i wyœwietlenie danej
		lcd_dec(i2c_get(I2C_NACK));
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	61 d0       	rcall	.+194    	; 0x14e <i2c_get>
  8c:	99 27       	eor	r25, r25
  8e:	c4 d0       	rcall	.+392    	; 0x218 <lcd_dec>
		//Przys³oniêcie reszty napisu
		lcd_str_P((prog_char*)PSTR("  "));
  90:	86 e1       	ldi	r24, 0x16	; 22
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	a5 d0       	rcall	.+330    	; 0x1e0 <lcd_str_P>
  96:	f2 cf       	rjmp	.-28     	; 0x7c <main+0x22>

00000098 <i2c_start>:
	PORT(I2C_SCLPORT) &= ~(1<<I2C_SCL);
}

void i2c_start(void)
{
  98:	8e 98       	cbi	0x11, 6	; 17
  9a:	96 9a       	sbi	0x12, 6	; 18
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b0 e0       	ldi	r27, 0x00	; 0

000000a4 <delayus8_loop17>:
  a4:	8a 95       	dec	r24
  a6:	f1 f7       	brne	.-4      	; 0xa4 <delayus8_loop17>
  a8:	95 9a       	sbi	0x12, 5	; 18
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b0 e0       	ldi	r27, 0x00	; 0

000000b2 <delayus8_loop34>:
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <delayus8_loop34>
  b6:	96 98       	cbi	0x12, 6	; 18
  b8:	8e 9a       	sbi	0x11, 6	; 17
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b0 e0       	ldi	r27, 0x00	; 0

000000c2 <delayus8_loop53>:
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <delayus8_loop53>
  c6:	95 98       	cbi	0x12, 5	; 18
  c8:	08 95       	ret

000000ca <i2c_send>:
	//Jeœli start bez stop
	i2c_sdaset();
	i2c_hdelay();
	i2c_sclset();
	i2c_hdelay();
	//Normalna sekwencja startu
	i2c_sdaclear();
	i2c_hdelay();
	i2c_sclclear();
}

void i2c_stop(void)
{
	i2c_sdaclear();
	i2c_hdelay();
	i2c_sclset();
	i2c_hdelay();
	i2c_sdaset();
	i2c_hdelay();
}

uint8_t i2c_send(uint8_t data)
{
  ca:	98 e0       	ldi	r25, 0x08	; 8
  cc:	25 e0       	ldi	r18, 0x05	; 5
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t n;
	
	for(n=8; n>0; --n)
	{
		if(data & 0x80)
  d4:	87 ff       	sbrs	r24, 7
  d6:	03 c0       	rjmp	.+6      	; 0xde <i2c_send+0x14>
  d8:	8e 98       	cbi	0x11, 6	; 17
  da:	96 9a       	sbi	0x12, 6	; 18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <delayus8_loop105>
  de:	96 98       	cbi	0x12, 6	; 18
  e0:	8e 9a       	sbi	0x11, 6	; 17

000000e2 <delayus8_loop105>:
  e2:	2a 95       	dec	r18
  e4:	f1 f7       	brne	.-4      	; 0xe2 <delayus8_loop105>
  e6:	95 9a       	sbi	0x12, 5	; 18

000000e8 <delayus8_loop121>:
  e8:	2a 95       	dec	r18
  ea:	f1 f7       	brne	.-4      	; 0xe8 <delayus8_loop121>
  ec:	95 98       	cbi	0x12, 5	; 18
  ee:	91 50       	subi	r25, 0x01	; 1
  f0:	11 f0       	breq	.+4      	; 0xf6 <delayus8_loop121+0xe>
			i2c_sdaset();
		else
			i2c_sdaclear();
		data <<= 1;
  f2:	88 0f       	add	r24, r24
  f4:	ef cf       	rjmp	.-34     	; 0xd4 <i2c_send+0xa>
  f6:	8e 98       	cbi	0x11, 6	; 17
  f8:	96 9a       	sbi	0x12, 6	; 18
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0

00000102 <delayus8_loop159>:
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <delayus8_loop159>
 106:	95 9a       	sbi	0x12, 5	; 18
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b0 e0       	ldi	r27, 0x00	; 0

00000110 <delayus8_loop176>:
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <delayus8_loop176>
 114:	80 b3       	in	r24, 0x10	; 16
 116:	95 98       	cbi	0x12, 5	; 18
 118:	80 74       	andi	r24, 0x40	; 64
		i2c_hdelay();
		i2c_sclset();
		i2c_hdelay();
		i2c_sclclear();
	}
	//ACK potwierdzenie transmisji
	i2c_sdaset();
	i2c_hdelay();
	i2c_sclset();
	i2c_hdelay();
	n = i2c_sdaget();
	i2c_sclclear();
	
	return n;
}
 11a:	99 27       	eor	r25, r25
 11c:	08 95       	ret

0000011e <i2c_stop>:
 11e:	96 98       	cbi	0x12, 6	; 18
 120:	8e 9a       	sbi	0x11, 6	; 17
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b0 e0       	ldi	r27, 0x00	; 0

0000012a <delayus8_loop214>:
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <delayus8_loop214>
 12e:	95 9a       	sbi	0x12, 5	; 18
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b0 e0       	ldi	r27, 0x00	; 0

00000138 <delayus8_loop231>:
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <delayus8_loop231>
 13c:	8e 98       	cbi	0x11, 6	; 17
 13e:	96 9a       	sbi	0x12, 6	; 18
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b0 e0       	ldi	r27, 0x00	; 0

00000148 <delayus8_loop250>:
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <delayus8_loop250>
 14c:	08 95       	ret

0000014e <i2c_get>:

uint8_t i2c_get(uint8_t ack)
{
 14e:	8e 98       	cbi	0x11, 6	; 17
 150:	96 9a       	sbi	0x12, 6	; 18
 152:	98 e0       	ldi	r25, 0x08	; 8
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	25 e0       	ldi	r18, 0x05	; 5
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	50 e0       	ldi	r21, 0x00	; 0

0000015e <delayus8_loop281>:
 15e:	2a 95       	dec	r18
 160:	f1 f7       	brne	.-4      	; 0x15e <delayus8_loop281>
 162:	95 9a       	sbi	0x12, 5	; 18

00000164 <delayus8_loop297>:
 164:	2a 95       	dec	r18
 166:	f1 f7       	brne	.-4      	; 0x164 <delayus8_loop297>
	uint8_t n, temp=0;
	
	i2c_sdaset();
	for(n=8; n>0; --n)
	{
		i2c_hdelay();
		i2c_sclset();
		i2c_hdelay();
		temp<<=1;
 168:	66 0f       	add	r22, r22
		if(i2c_sdaget())
 16a:	86 99       	sbic	0x10, 6	; 16
			temp++;
 16c:	6f 5f       	subi	r22, 0xFF	; 255
 16e:	95 98       	cbi	0x12, 5	; 18
 170:	91 50       	subi	r25, 0x01	; 1
 172:	a9 f7       	brne	.-22     	; 0x15e <delayus8_loop281>
		i2c_sclclear();
	}
	//ACK
	if(ack == I2C_ACK)
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	19 f4       	brne	.+6      	; 0x17e <delayus8_loop297+0x1a>
 178:	96 98       	cbi	0x12, 6	; 18
 17a:	8e 9a       	sbi	0x11, 6	; 17
 17c:	02 c0       	rjmp	.+4      	; 0x182 <delayus8_loop297+0x1e>
 17e:	8e 98       	cbi	0x11, 6	; 17
 180:	96 9a       	sbi	0x12, 6	; 18
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e0       	ldi	r27, 0x00	; 0

0000018a <delayus8_loop357>:
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <delayus8_loop357>
 18e:	95 9a       	sbi	0x12, 5	; 18
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	a0 e0       	ldi	r26, 0x00	; 0
 196:	b0 e0       	ldi	r27, 0x00	; 0

00000198 <delayus8_loop374>:
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <delayus8_loop374>
 19c:	95 98       	cbi	0x12, 5	; 18
		i2c_sdaclear();
	else
		i2c_sdaset();
	i2c_hdelay();
	i2c_sclset();
	i2c_hdelay();
	i2c_sclclear();
	
	return temp;
}
 19e:	86 2f       	mov	r24, r22
 1a0:	99 27       	eor	r25, r25
 1a2:	08 95       	ret

000001a4 <lcd_sendHalf>:
	delay250ns(); \
	PORT(LCD_EPORT) &= ~(1<<LCD_E);}

void lcd_sendHalf(uint8_t data)
{
 1a4:	98 b3       	in	r25, 0x18	; 24
 1a6:	9f 70       	andi	r25, 0x0F	; 15
 1a8:	82 95       	swap	r24
 1aa:	80 7f       	andi	r24, 0xF0	; 240
 1ac:	98 2b       	or	r25, r24
 1ae:	98 bb       	out	0x18, r25	; 24
	data = (data & 0x0F) << LCD_D4; 
	//data |= 0xF0;
	//data &= 0x0F;
	//data <<= LCD_D4; 
	PORT(LCD_DPORT) = 
		(PORT(LCD_DPORT) & ~(0x0F<<LCD_D4)) | data;
	//PORT(LCD_DPORT) &= ~(0x0F<<LCD_D4); 
	//PORT(LCD_DPORT) |= data; 
	LCD_EPULSE();
 1b0:	c1 9a       	sbi	0x18, 1	; 24
 1b2:	00 00       	nop
 1b4:	c1 98       	cbi	0x18, 1	; 24
 1b6:	08 95       	ret

000001b8 <lcd_send>:
}

void lcd_send(uint8_t data)
{
 1b8:	1f 93       	push	r17
 1ba:	18 2f       	mov	r17, r24
	// Starsza czêœæ
	lcd_sendHalf(data>>4);
 1bc:	82 95       	swap	r24
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	f1 df       	rcall	.-30     	; 0x1a4 <lcd_sendHalf>
	// M³odsza czêœæ
	lcd_sendHalf(data);
 1c2:	81 2f       	mov	r24, r17
 1c4:	ef df       	rcall	.-34     	; 0x1a4 <lcd_sendHalf>
	delayus8(120);
 1c6:	88 e7       	ldi	r24, 0x78	; 120
 1c8:	90 e0       	ldi	r25, 0x00	; 0

000001ca <delayus8_loop30>:
 1ca:	00 00       	nop
 1cc:	8a 95       	dec	r24
 1ce:	e9 f7       	brne	.-6      	; 0x1ca <delayus8_loop30>
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <lcd_command>:
}

// Funkcje interfejsu
void lcd_command(uint8_t command)
{
 1d4:	c2 98       	cbi	0x18, 2	; 24
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
	lcd_send(command);
 1d6:	f0 df       	rcall	.-32     	; 0x1b8 <lcd_send>
 1d8:	08 95       	ret

000001da <lcd_data>:
}

void lcd_data(uint8_t data)
{
 1da:	c2 9a       	sbi	0x18, 2	; 24
	PORT(LCD_RSPORT) |= 1<<LCD_RS;
	lcd_send(data);
 1dc:	ed df       	rcall	.-38     	; 0x1b8 <lcd_send>
 1de:	08 95       	ret

000001e0 <lcd_str_P>:
}

void lcd_cls(void)
{
	lcd_command(LCDC_CLS);
	delay100us8(48);
}

void lcd_home(void)
{
	lcd_command(LCDC_HOME);
	delay100us8(48);
}

void lcd_init(void)
{
	delay100us8(150);
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
	lcd_sendHalf(LCDC_FUNC|LCDC_FUNC8b); 
	delay100us8(41);
	lcd_sendHalf(LCDC_FUNC|LCDC_FUNC8b);
	delay100us8(2);
	lcd_sendHalf(LCDC_FUNC|LCDC_FUNC4b);
	delay100us8(2);
	// Teraz jest ju¿ 4b. Koniec korzystania z sendHalf
	lcd_command(LCDC_FUNC|LCDC_FUNC4b|LCDC_FUNC2L|LCDC_FUNC5x7);
	lcd_command(LCDC_ON);
	lcd_cls();
	lcd_command(LCDC_MODE|LCDC_MODER);
	lcd_command(LCDC_ON|LCDC_ONDISPLAY|LCDC_ONCURSOR);
}

// Koniec obs³ugi wyœwietlacza
//--------------------------------------------------

//Funkcje pisz¹ce
void lcd_str_P(prog_char* str)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	d9 2f       	mov	r29, r25
 1e6:	c8 2f       	mov	r28, r24
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <lcd_str_P+0xc>
	char znak;
	while(0 != (znak=pgm_read_byte(str++)))
		lcd_data(znak);
 1ea:	f7 df       	rcall	.-18     	; 0x1da <lcd_data>
 1ec:	fd 2f       	mov	r31, r29
 1ee:	ec 2f       	mov	r30, r28
 1f0:	21 96       	adiw	r28, 0x01	; 1
 1f2:	c8 95       	lpm
 1f4:	80 2d       	mov	r24, r0
 1f6:	88 23       	and	r24, r24
 1f8:	c1 f7       	brne	.-16     	; 0x1ea <lcd_str_P+0xa>
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <lcd_str>:
}

void lcd_str(char* str)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	d9 2f       	mov	r29, r25
 206:	c8 2f       	mov	r28, r24
 208:	01 c0       	rjmp	.+2      	; 0x20c <lcd_str+0xc>
	char znak;
	while(0 != (znak = *(str++)))
		lcd_data(znak);
 20a:	e7 df       	rcall	.-50     	; 0x1da <lcd_data>
 20c:	89 91       	ld	r24, Y+
 20e:	88 23       	and	r24, r24
 210:	e1 f7       	brne	.-8      	; 0x20a <lcd_str+0xa>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <lcd_dec>:
}

//Wypisuje liczbê na wyœwietlaczu
void lcd_dec(int val)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	27 97       	sbiw	r28, 0x07	; 7
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
	char bufor[7];
	lcd_str(itoa(val, bufor, 10));
 22c:	4a e0       	ldi	r20, 0x0A	; 10
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	6c 2f       	mov	r22, r28
 232:	7d 2f       	mov	r23, r29
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	37 d0       	rcall	.+110    	; 0x2a8 <itoa>
 23a:	e2 df       	rcall	.-60     	; 0x200 <lcd_str>
 23c:	27 96       	adiw	r28, 0x07	; 7
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <lcd_home>:
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	c1 df       	rcall	.-126    	; 0x1d4 <lcd_command>
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	1f d0       	rcall	.+62     	; 0x294 <delay100us8>
 256:	08 95       	ret

00000258 <lcd_cls>:
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	bc df       	rcall	.-136    	; 0x1d4 <lcd_command>
 25c:	80 e3       	ldi	r24, 0x30	; 48
 25e:	1a d0       	rcall	.+52     	; 0x294 <delay100us8>
 260:	08 95       	ret

00000262 <lcd_init>:
 262:	86 e9       	ldi	r24, 0x96	; 150
 264:	17 d0       	rcall	.+46     	; 0x294 <delay100us8>
 266:	c2 98       	cbi	0x18, 2	; 24
 268:	80 e3       	ldi	r24, 0x30	; 48
 26a:	9c df       	rcall	.-200    	; 0x1a4 <lcd_sendHalf>
 26c:	89 e2       	ldi	r24, 0x29	; 41
 26e:	12 d0       	rcall	.+36     	; 0x294 <delay100us8>
 270:	80 e3       	ldi	r24, 0x30	; 48
 272:	98 df       	rcall	.-208    	; 0x1a4 <lcd_sendHalf>
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e d0       	rcall	.+28     	; 0x294 <delay100us8>
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	94 df       	rcall	.-216    	; 0x1a4 <lcd_sendHalf>
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0a d0       	rcall	.+20     	; 0x294 <delay100us8>
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	a8 df       	rcall	.-176    	; 0x1d4 <lcd_command>
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	a6 df       	rcall	.-180    	; 0x1d4 <lcd_command>
 288:	e7 df       	rcall	.-50     	; 0x258 <lcd_cls>
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	a3 df       	rcall	.-186    	; 0x1d4 <lcd_command>
 28e:	8e e0       	ldi	r24, 0x0E	; 14
 290:	a1 df       	rcall	.-190    	; 0x1d4 <lcd_command>
 292:	08 95       	ret

00000294 <delay100us8>:
#include <avr/io.h>
#include "delay.h"

void delay100us8(uint8_t t)
{
 294:	24 e6       	ldi	r18, 0x64	; 100
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <delayus8_loop12+0x8>

0000029a <delayus8_loop12>:
	while (t>0)
	{
		delayus8(100);
 29a:	00 00       	nop
 29c:	2a 95       	dec	r18
 29e:	e9 f7       	brne	.-6      	; 0x29a <delayus8_loop12>
		--t;
 2a0:	81 50       	subi	r24, 0x01	; 1
 2a2:	88 23       	and	r24, r24
 2a4:	d1 f7       	brne	.-12     	; 0x29a <delayus8_loop12>
 2a6:	08 95       	ret

000002a8 <itoa>:
 2a8:	e6 2f       	mov	r30, r22
 2aa:	f7 2f       	mov	r31, r23
 2ac:	2e 2f       	mov	r18, r30
 2ae:	3f 2f       	mov	r19, r31
 2b0:	e8 94       	clt
 2b2:	42 30       	cpi	r20, 0x02	; 2
 2b4:	c4 f0       	brlt	.+48     	; 0x2e6 <itoa+0x3e>
 2b6:	45 32       	cpi	r20, 0x25	; 37
 2b8:	b4 f4       	brge	.+44     	; 0x2e6 <itoa+0x3e>
 2ba:	4a 30       	cpi	r20, 0x0A	; 10
 2bc:	29 f4       	brne	.+10     	; 0x2c8 <itoa+0x20>
 2be:	97 fb       	bst	r25, 7
 2c0:	1e f4       	brtc	.+6      	; 0x2c8 <itoa+0x20>
 2c2:	90 95       	com	r25
 2c4:	81 95       	neg	r24
 2c6:	9f 4f       	sbci	r25, 0xFF	; 255
 2c8:	64 2f       	mov	r22, r20
 2ca:	77 27       	eor	r23, r23
 2cc:	22 d0       	rcall	.+68     	; 0x312 <__udivmodhi4>
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	8a 33       	cpi	r24, 0x3A	; 58
 2d2:	0c f0       	brlt	.+2      	; 0x2d6 <itoa+0x2e>
 2d4:	89 5d       	subi	r24, 0xD9	; 217
 2d6:	81 93       	st	Z+, r24
 2d8:	86 2f       	mov	r24, r22
 2da:	97 2f       	mov	r25, r23
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	a1 f7       	brne	.-24     	; 0x2c8 <itoa+0x20>
 2e0:	16 f4       	brtc	.+4      	; 0x2e6 <itoa+0x3e>
 2e2:	5d e2       	ldi	r21, 0x2D	; 45
 2e4:	51 93       	st	Z+, r21
 2e6:	10 82       	st	Z, r1
 2e8:	82 2f       	mov	r24, r18
 2ea:	93 2f       	mov	r25, r19
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <strrev>

000002ee <strrev>:
 2ee:	a8 2f       	mov	r26, r24
 2f0:	b9 2f       	mov	r27, r25
 2f2:	e8 2f       	mov	r30, r24
 2f4:	f9 2f       	mov	r31, r25
 2f6:	67 2f       	mov	r22, r23
 2f8:	71 91       	ld	r23, Z+
 2fa:	77 23       	and	r23, r23
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <strrev+0x8>
 2fe:	32 97       	sbiw	r30, 0x02	; 2
 300:	04 c0       	rjmp	.+8      	; 0x30a <strrev+0x1c>
 302:	7c 91       	ld	r23, X
 304:	6d 93       	st	X+, r22
 306:	70 83       	st	Z, r23
 308:	62 91       	ld	r22, -Z
 30a:	ae 17       	cp	r26, r30
 30c:	bf 07       	cpc	r27, r31
 30e:	c8 f3       	brcs	.-14     	; 0x302 <strrev+0x14>
 310:	08 95       	ret

00000312 <__udivmodhi4>:
 312:	aa 1b       	sub	r26, r26
 314:	bb 1b       	sub	r27, r27
 316:	51 e1       	ldi	r21, 0x11	; 17
 318:	07 c0       	rjmp	.+14     	; 0x328 <__udivmodhi4_ep>

0000031a <__udivmodhi4_loop>:
 31a:	aa 1f       	adc	r26, r26
 31c:	bb 1f       	adc	r27, r27
 31e:	a6 17       	cp	r26, r22
 320:	b7 07       	cpc	r27, r23
 322:	10 f0       	brcs	.+4      	; 0x328 <__udivmodhi4_ep>
 324:	a6 1b       	sub	r26, r22
 326:	b7 0b       	sbc	r27, r23

00000328 <__udivmodhi4_ep>:
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	5a 95       	dec	r21
 32e:	a9 f7       	brne	.-22     	; 0x31a <__udivmodhi4_loop>
 330:	80 95       	com	r24
 332:	90 95       	com	r25
 334:	68 2f       	mov	r22, r24
 336:	79 2f       	mov	r23, r25
 338:	8a 2f       	mov	r24, r26
 33a:	9b 2f       	mov	r25, r27
 33c:	08 95       	ret

0000033e <_exit>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <_exit>
