
ds18b20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800060  00800060  0000020a  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a7  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003c3  00000000  00000000  000002f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ae  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000032f  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ef  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001a8  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_clear_bss>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	01 c0       	rjmp	.+2      	; 0x28 <.do_clear_bss_start>

00000026 <.do_clear_bss_loop>:
  26:	1d 92       	st	X+, r1

00000028 <.do_clear_bss_start>:
  28:	ab 36       	cpi	r26, 0x6B	; 107
  2a:	b1 07       	cpc	r27, r17
  2c:	e1 f7       	brne	.-8      	; 0x26 <.do_clear_bss_loop>
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	b0 c0       	rjmp	.+352    	; 0x192 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:


int main(void) {
	
	//Konfiguracja portów.
	LEDDDR = 0xff;
  34:	8f ef       	ldi	r24, 0xFF	; 255
  36:	87 bb       	out	0x17, r24	; 23
	DDRD  &= ~(1<<wire);
  38:	8c 98       	cbi	0x11, 4	; 17
	PORTD &= ~(1<<wire);
  3a:	94 98       	cbi	0x12, 4	; 18
	//koniec konfiguracji portów.
	//////////////////////////////////////////////////////
	wait_1w(200);
  3c:	88 ec       	ldi	r24, 0xC8	; 200
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	0b d0       	rcall	.+22     	; 0x58 <wait_1w>
	reset_1w();
  42:	8a d0       	rcall	.+276    	; 0x158 <reset_1w>


	for(;;) {
	    if (reset_1w()) {
  44:	89 d0       	rcall	.+274    	; 0x158 <reset_1w>
  46:	89 2b       	or	r24, r25
  48:	19 f0       	breq	.+6      	; 0x50 <__SREG__+0x11>
	    	PORTB |= ~(1<<LED_A);
  4a:	88 b3       	in	r24, 0x18	; 24
  4c:	8e 6f       	ori	r24, 0xFE	; 254
  4e:	02 c0       	rjmp	.+4      	; 0x54 <__SREG__+0x15>
		} else {
			PORTB &= (1<<LED_A);
  50:	88 b3       	in	r24, 0x18	; 24
  52:	81 70       	andi	r24, 0x01	; 1
  54:	88 bb       	out	0x18, r24	; 24
  56:	f6 cf       	rjmp	.-20     	; 0x44 <__SREG__+0x5>

00000058 <wait_1w>:

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  58:	00 00       	nop
	}
	while(--delay1w!=0);
  5a:	81 50       	subi	r24, 0x01	; 1
  5c:	e9 f7       	brne	.-6      	; 0x58 <wait_1w>
}
  5e:	08 95       	ret

00000060 <slot1w_read>:
uint8_t slot1w_read(void) {
	
	//Zmienna
	uint8_t bit1w;
	
	wire_out0 								//inicjuj slot czytania
  60:	8c 9a       	sbi	0x11, 4	; 17

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  62:	00 00       	nop
	//Zmienna
	uint8_t bit1w;
	
	wire_out0 								//inicjuj slot czytania
	wait_1w(1);								//Odczekaj
	wire_out1 								//zwolnij liniê
  64:	8c 98       	cbi	0x11, 4	; 17
  66:	8e e0       	ldi	r24, 0x0E	; 14

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  68:	00 00       	nop
	}
	while(--delay1w!=0);
  6a:	81 50       	subi	r24, 0x01	; 1
  6c:	e9 f7       	brne	.-6      	; 0x68 <slot1w_read+0x8>
	
	wire_out0 								//inicjuj slot czytania
	wait_1w(1);								//Odczekaj
	wire_out1 								//zwolnij liniê
	wait_1w(14);							//ok. 14us
	bit1w = ((PIND&0x20)>>wire);
  6e:	80 b3       	in	r24, 0x10	; 16
  70:	9b e3       	ldi	r25, 0x3B	; 59

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  72:	00 00       	nop
	}
	while(--delay1w!=0);
  74:	91 50       	subi	r25, 0x01	; 1
  76:	e9 f7       	brne	.-6      	; 0x72 <slot1w_read+0x12>
  78:	82 95       	swap	r24
	wire_out1 								//zwolnij liniê
	wait_1w(14);							//ok. 14us
	bit1w = ((PIND&0x20)>>wire);
	wait_1w(59);							//ok. 60us
	return bit1w;
}
  7a:	82 70       	andi	r24, 0x02	; 2
  7c:	08 95       	ret

0000007e <slot1w_write>:

//Slot zapisu 1-Wire.
void slot1w_write(uint8_t znak) {
	
	if(znak) {								//slot "1"
  7e:	88 23       	and	r24, r24
  80:	59 f0       	breq	.+22     	; 0x98 <slot1w_write+0x1a>
		wire_out0							//inicjuj slot
  82:	8c 9a       	sbi	0x11, 4	; 17
  84:	8b e0       	ldi	r24, 0x0B	; 11

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  86:	00 00       	nop
	}
	while(--delay1w!=0);
  88:	81 50       	subi	r24, 0x01	; 1
  8a:	e9 f7       	brne	.-6      	; 0x86 <slot1w_write+0x8>
void slot1w_write(uint8_t znak) {
	
	if(znak) {								//slot "1"
		wire_out0							//inicjuj slot
		wait_1w(11);						//ok. 11us
		wire_out1
  8c:	8c 98       	cbi	0x11, 4	; 17
  8e:	8c e3       	ldi	r24, 0x3C	; 60

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  90:	00 00       	nop
	}
	while(--delay1w!=0);
  92:	81 50       	subi	r24, 0x01	; 1
  94:	e9 f7       	brne	.-6      	; 0x90 <slot1w_write+0x12>
  96:	08 95       	ret
		wire_out1
		
		wait_1w(60);
	} else {
		
		wire_out0                     //inicjuj slot
  98:	8c 9a       	sbi	0x11, 4	; 17
  9a:	86 e4       	ldi	r24, 0x46	; 70

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
  9c:	00 00       	nop
	}
	while(--delay1w!=0);
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	e9 f7       	brne	.-6      	; 0x9c <slot1w_write+0x1e>
		wait_1w(60);
	} else {
		
		wire_out0                     //inicjuj slot
		wait_1w(70);						//ok. 70us
		wire_out1
  a2:	8c 98       	cbi	0x11, 4	; 17
  a4:	08 95       	ret

000000a6 <write_1w>:
	}
}

//Zapis bajtu do urz¹dzenia 1-Wire.
void write_1w(uint8_t rozkaz) {
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	08 2f       	mov	r16, r24
  ac:	10 e0       	ldi	r17, 0x00	; 0
	
	uint8_t i;								//Zmienna pomocnicza
	
	for(i=0;i<8;i++) {
		slot1w_write(rozkaz&0x01);			//Wyœlij bit
  ae:	80 2f       	mov	r24, r16
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	e5 df       	rcall	.-54     	; 0x7e <slot1w_write>
		rozkaz>>=1;
  b4:	06 95       	lsr	r16
//Zapis bajtu do urz¹dzenia 1-Wire.
void write_1w(uint8_t rozkaz) {
	
	uint8_t i;								//Zmienna pomocnicza
	
	for(i=0;i<8;i++) {
  b6:	1f 5f       	subi	r17, 0xFF	; 255
  b8:	18 30       	cpi	r17, 0x08	; 8
  ba:	c9 f7       	brne	.-14     	; 0xae <write_1w+0x8>
		slot1w_write(rozkaz&0x01);			//Wyœlij bit
		rozkaz>>=1;
	}
}
  bc:	1f 91       	pop	r17
  be:	0f 91       	pop	r16
  c0:	08 95       	ret

000000c2 <read_1w>:

//Odczyt bajtu z urz¹dzenia 1-Wire.
void read_1w(void) {
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	
	uint8_t i,j,dana;
	
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
  cc:	80 e6       	ldi	r24, 0x60	; 96
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 6a 00 	sts	0x006A, r25
  d4:	80 93 69 00 	sts	0x0069, r24
  d8:	ff 24       	eor	r15, r15
  da:	19 c0       	rjmp	.+50     	; 0x10e <__stack+0x2f>
	for(i=0;i<9;i++) {						//czytaj "family code" (1bajt)
											//i "registartion number" (7 bajtów)
		dana=0;								//wstêpne zerowanie danej
		
		for(j=0x01;j!=0;j<<=1) {			//zmienna steruj¹ca pêtli wskazuje jednoczeœnie aktualnie zapisywany bit
			dana|=slot1w_read()?j:dana;		//czytaj kolejne bity
  dc:	c1 df       	rcall	.-126    	; 0x60 <slot1w_read>
  de:	88 23       	and	r24, r24
  e0:	11 f4       	brne	.+4      	; 0xe6 <__stack+0x7>
  e2:	81 2f       	mov	r24, r17
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <__stack+0x9>
  e6:	80 2f       	mov	r24, r16
  e8:	18 2b       	or	r17, r24
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
	for(i=0;i<9;i++) {						//czytaj "family code" (1bajt)
											//i "registartion number" (7 bajtów)
		dana=0;								//wstêpne zerowanie danej
		
		for(j=0x01;j!=0;j<<=1) {			//zmienna steruj¹ca pêtli wskazuje jednoczeœnie aktualnie zapisywany bit
  ea:	00 0f       	add	r16, r16
  ec:	21 96       	adiw	r28, 0x01	; 1
  ee:	c8 30       	cpi	r28, 0x08	; 8
  f0:	d1 05       	cpc	r29, r1
  f2:	a1 f7       	brne	.-24     	; 0xdc <read_1w+0x1a>
			dana|=slot1w_read()?j:dana;		//czytaj kolejne bity
		}
		*pbufor1w++=dana;					//po skompletowaniu zapisz do bufotra
  f4:	e0 91 69 00 	lds	r30, 0x0069
  f8:	f0 91 6a 00 	lds	r31, 0x006A
  fc:	11 93       	st	Z+, r17
  fe:	f0 93 6a 00 	sts	0x006A, r31
 102:	e0 93 69 00 	sts	0x0069, r30
void read_1w(void) {
	
	uint8_t i,j,dana;
	
	pbufor1w=&bufor1w[0];					//Dane bêd¹ umieszczane w buforze "bufor1w".
	for(i=0;i<9;i++) {						//czytaj "family code" (1bajt)
 106:	f3 94       	inc	r15
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	f8 16       	cp	r15, r24
 10c:	29 f0       	breq	.+10     	; 0x118 <__stack+0x39>
 10e:	01 e0       	ldi	r16, 0x01	; 1
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	e2 cf       	rjmp	.-60     	; 0xdc <read_1w+0x1a>
		for(j=0x01;j!=0;j<<=1) {			//zmienna steruj¹ca pêtli wskazuje jednoczeœnie aktualnie zapisywany bit
			dana|=slot1w_read()?j:dana;		//czytaj kolejne bity
		}
		*pbufor1w++=dana;					//po skompletowaniu zapisz do bufotra
	}
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	08 95       	ret

00000124 <count_CRC>:

//Funkcja wyliczenia CRC.
void count_CRC(uint8_t bajt, uint8_t *CRC) {
 124:	e6 2f       	mov	r30, r22
 126:	f7 2f       	mov	r31, r23
 128:	90 81       	ld	r25, Z
 12a:	38 2f       	mov	r19, r24
 12c:	20 e0       	ldi	r18, 0x00	; 0
		bajt^=*CRC;							//wskaŸnik *CRC wyznacza aktualnie wyliczony CRC
		
		zp2=bajt&0x01;						//wydzielenie bitu do obliczeñ
		bajt=*CRC;
		if(zp2) {
			bajt^=0x18;
 12e:	58 e1       	ldi	r21, 0x18	; 24
	zp1=bajt;
	for(i=0;i<8;i++) {
		
		bajt^=*CRC;							//wskaŸnik *CRC wyznacza aktualnie wyliczony CRC
		
		zp2=bajt&0x01;						//wydzielenie bitu do obliczeñ
 130:	89 27       	eor	r24, r25
		bajt=*CRC;
		if(zp2) {
 132:	48 2f       	mov	r20, r24
 134:	41 70       	andi	r20, 0x01	; 1
 136:	80 fd       	sbrc	r24, 0
			bajt^=0x18;
 138:	95 27       	eor	r25, r21
			}
		bajt=((uint8_t)(bajt)>>1)+0x80*zp2;
 13a:	89 2f       	mov	r24, r25
 13c:	86 95       	lsr	r24
 13e:	94 2f       	mov	r25, r20
 140:	97 95       	ror	r25
 142:	99 27       	eor	r25, r25
 144:	97 95       	ror	r25
 146:	98 0f       	add	r25, r24
void count_CRC(uint8_t bajt, uint8_t *CRC) {
											//wielomian generuj¹cy jest równy x^8 + x^5 + x^4 + 1
	uint8_t zp1, zp2,i; 					//Zmienne pomocniecze
	
	zp1=bajt;
	for(i=0;i<8;i++) {
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	28 30       	cpi	r18, 0x08	; 8
 14c:	19 f0       	breq	.+6      	; 0x154 <count_CRC+0x30>
			bajt^=0x18;
			}
		bajt=((uint8_t)(bajt)>>1)+0x80*zp2;
		
		*CRC=bajt;
		zp1=(bajt=zp1>>1);
 14e:	36 95       	lsr	r19
 150:	83 2f       	mov	r24, r19
 152:	ee cf       	rjmp	.-36     	; 0x130 <count_CRC+0xc>
 154:	90 83       	st	Z, r25
	}
}
 156:	08 95       	ret

00000158 <reset_1w>:

//Sekwencja inicjuj¹ca 1-Wire.
uint8_t reset_1w(void) {
	wire_out0								//sekwencja inicjuj¹ca 1-Wire
 158:	8c 9a       	sbi	0x11, 4	; 17
 15a:	8f ef       	ldi	r24, 0xFF	; 255

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 15c:	00 00       	nop
	}
	while(--delay1w!=0);
 15e:	81 50       	subi	r24, 0x01	; 1
 160:	e9 f7       	brne	.-6      	; 0x15c <reset_1w+0x4>
 162:	83 eb       	ldi	r24, 0xB3	; 179

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 164:	00 00       	nop
	}
	while(--delay1w!=0);
 166:	81 50       	subi	r24, 0x01	; 1
 168:	e9 f7       	brne	.-6      	; 0x164 <reset_1w+0xc>
//Sekwencja inicjuj¹ca 1-Wire.
uint8_t reset_1w(void) {
	wire_out0								//sekwencja inicjuj¹ca 1-Wire
	wait_1w(0xFF);
	wait_1w(0xB3);							//impuls inicjuj¹cy "0" ok. 480us
	wire_out1								//zwolnij liniê
 16a:	8c 98       	cbi	0x11, 4	; 17
 16c:	81 e4       	ldi	r24, 0x41	; 65

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 16e:	00 00       	nop
	}
	while(--delay1w!=0);
 170:	81 50       	subi	r24, 0x01	; 1
 172:	e9 f7       	brne	.-6      	; 0x16e <reset_1w+0x16>
	wait_1w(0xFF);
	wait_1w(0xB3);							//impuls inicjuj¹cy "0" ok. 480us
	wire_out1								//zwolnij liniê
	wait_1w(65);							//po odczekaniu ok. 65us czekaj na impuls obecnosci

	if(PIND&(1<<wire))  {
 174:	84 99       	sbic	0x10, 4	; 16
 176:	0b c0       	rjmp	.+22     	; 0x18e <reset_1w+0x36>
 178:	8f ef       	ldi	r24, 0xFF	; 255

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 17a:	00 00       	nop
	}
	while(--delay1w!=0);
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	e9 f7       	brne	.-6      	; 0x17a <reset_1w+0x22>
 180:	8c e4       	ldi	r24, 0x4C	; 76

//Pêtla opóznienia dla 1-Wire
//opóŸnienie jest równe t=(5+5*delay1w)*T, T-cykl zegarowy MCU, delay1w - parametr.
void wait_1w(uint8_t delay1w) {
	do {
		asm("nop"); //wstawka asemblerowa - rozkaz NOP
 182:	00 00       	nop
	}
	while(--delay1w!=0);
 184:	81 50       	subi	r24, 0x01	; 1
 186:	e9 f7       	brne	.-6      	; 0x182 <reset_1w+0x2a>
	}
	
	wait_1w(0xFF);
	wait_1w(0x4C);							//czekaj ok. 416us do zakonczenia slotu inicjuj¹cego
	
	if(!(PIND&(1<<wire))) {
 188:	84 9b       	sbis	0x10, 4	; 16
 18a:	02 c0       	rjmp	.+4      	; 0x190 <reset_1w+0x38>
 18c:	08 95       	ret
		return 0;							//jeœli pozostaje w stanie niskim, to oznacza zwarcie
	}											//jeœli pozostaje w stanie niskim, to oznacza zwarcie
}
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
